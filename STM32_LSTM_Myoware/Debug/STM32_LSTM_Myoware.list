
STM32_LSTM_Myoware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e558  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000ceee0  0800e6e8  0800e6e8  0001e6e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080dd5c8  080dd5c8  000f020c  2**0
                  CONTENTS
  4 .ARM          00000008  080dd5c8  080dd5c8  000ed5c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080dd5d0  080dd5d0  000f020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080dd5d0  080dd5d0  000ed5d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080dd5d4  080dd5d4  000ed5d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  080dd5d8  000f0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ca4  20000210  080dd7e4  000f0210  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  20000eb4  080dd7e4  000f0eb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000f020c  2**0
                  CONTENTS, READONLY
 12 .debug_info   001be785  00000000  00000000  000f023c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000dc95  00000000  00000000  002ae9c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00006750  00000000  00000000  002bc658  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006560  00000000  00000000  002c2da8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f5a6  00000000  00000000  002c9308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003230d  00000000  00000000  002f88ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001767fc  00000000  00000000  0032abbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  004a13b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001ea70  00000000  00000000  004a1434  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000210 	.word	0x20000210
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e6d0 	.word	0x0800e6d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000214 	.word	0x20000214
 80001cc:	0800e6d0 	.word	0x0800e6d0

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9ac 	b.w	8000fd8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f840 	bl	8000d0c <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <__aeabi_d2ulz+0x3c>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f981 	bl	8000fdc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <__aeabi_d2ulz+0x40>)
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f972 	bl	8000fdc <__aeabi_d2uiz>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	bdd0      	pop	{r4, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	3df00000 	.word	0x3df00000
 8000d08:	41f00000 	.word	0x41f00000

08000d0c <__udivmoddi4>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	9e08      	ldr	r6, [sp, #32]
 8000d12:	4604      	mov	r4, r0
 8000d14:	4688      	mov	r8, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14b      	bne.n	8000db2 <__udivmoddi4+0xa6>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	d967      	bls.n	8000df0 <__udivmoddi4+0xe4>
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	b14a      	cbz	r2, 8000d3a <__udivmoddi4+0x2e>
 8000d26:	f1c2 0720 	rsb	r7, r2, #32
 8000d2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d32:	4095      	lsls	r5, r2
 8000d34:	ea47 0803 	orr.w	r8, r7, r3
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d44:	fa1f fc85 	uxth.w	ip, r5
 8000d48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d50:	fb07 f10c 	mul.w	r1, r7, ip
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x60>
 8000d58:	18eb      	adds	r3, r5, r3
 8000d5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5e:	f080 811b 	bcs.w	8000f98 <__udivmoddi4+0x28c>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 8118 	bls.w	8000f98 <__udivmoddi4+0x28c>
 8000d68:	3f02      	subs	r7, #2
 8000d6a:	442b      	add	r3, r5
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x8c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x290>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x290>
 8000d94:	3802      	subs	r0, #2
 8000d96:	442c      	add	r4, r5
 8000d98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d9c:	eba4 040c 	sub.w	r4, r4, ip
 8000da0:	2700      	movs	r7, #0
 8000da2:	b11e      	cbz	r6, 8000dac <__udivmoddi4+0xa0>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dac:	4639      	mov	r1, r7
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xbe>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	f000 80eb 	beq.w	8000f92 <__udivmoddi4+0x286>
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f783 	clz	r7, r3
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d147      	bne.n	8000e62 <__udivmoddi4+0x156>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd0>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80fa 	bhi.w	8000fd0 <__udivmoddi4+0x2c4>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	4698      	mov	r8, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa0>
 8000dea:	e9c6 4800 	strd	r4, r8, [r6]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa0>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xe8>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 808f 	bne.w	8000f1c <__udivmoddi4+0x210>
 8000dfe:	1b49      	subs	r1, r1, r5
 8000e00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e04:	fa1f f885 	uxth.w	r8, r5
 8000e08:	2701      	movs	r7, #1
 8000e0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb08 f10c 	mul.w	r1, r8, ip
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x124>
 8000e20:	18eb      	adds	r3, r5, r3
 8000e22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x122>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2bc>
 8000e2e:	4684      	mov	ip, r0
 8000e30:	1a59      	subs	r1, r3, r1
 8000e32:	b2a3      	uxth	r3, r4
 8000e34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e40:	fb08 f800 	mul.w	r8, r8, r0
 8000e44:	45a0      	cmp	r8, r4
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x14c>
 8000e48:	192c      	adds	r4, r5, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x14a>
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	f200 80b6 	bhi.w	8000fc2 <__udivmoddi4+0x2b6>
 8000e56:	4618      	mov	r0, r3
 8000e58:	eba4 0408 	sub.w	r4, r4, r8
 8000e5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e60:	e79f      	b.n	8000da2 <__udivmoddi4+0x96>
 8000e62:	f1c7 0c20 	rsb	ip, r7, #32
 8000e66:	40bb      	lsls	r3, r7
 8000e68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e70:	fa01 f407 	lsl.w	r4, r1, r7
 8000e74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e80:	4325      	orrs	r5, r4
 8000e82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e86:	0c2c      	lsrs	r4, r5, #16
 8000e88:	fb08 3319 	mls	r3, r8, r9, r3
 8000e8c:	fa1f fa8e 	uxth.w	sl, lr
 8000e90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e94:	fb09 f40a 	mul.w	r4, r9, sl
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b0>
 8000ea4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	f080 8087 	bcs.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f240 8084 	bls.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4473      	add	r3, lr
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	b2ad      	uxth	r5, r5
 8000ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ecc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ed0:	45a2      	cmp	sl, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1da>
 8000ed4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000edc:	d26b      	bcs.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ede:	45a2      	cmp	sl, r4
 8000ee0:	d969      	bls.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4474      	add	r4, lr
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	eba4 040a 	sub.w	r4, r4, sl
 8000ef2:	454c      	cmp	r4, r9
 8000ef4:	46c2      	mov	sl, r8
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	d354      	bcc.n	8000fa4 <__udivmoddi4+0x298>
 8000efa:	d051      	beq.n	8000fa0 <__udivmoddi4+0x294>
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d069      	beq.n	8000fd4 <__udivmoddi4+0x2c8>
 8000f00:	ebb1 050a 	subs.w	r5, r1, sl
 8000f04:	eb64 0403 	sbc.w	r4, r4, r3
 8000f08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	40fc      	lsrs	r4, r7
 8000f10:	ea4c 0505 	orr.w	r5, ip, r5
 8000f14:	e9c6 5400 	strd	r5, r4, [r6]
 8000f18:	2700      	movs	r7, #0
 8000f1a:	e747      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f703 	lsr.w	r7, r0, r3
 8000f24:	4095      	lsls	r5, r2
 8000f26:	fa01 f002 	lsl.w	r0, r1, r2
 8000f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f32:	4338      	orrs	r0, r7
 8000f34:	0c01      	lsrs	r1, r0, #16
 8000f36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f3a:	fa1f f885 	uxth.w	r8, r5
 8000f3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb07 f308 	mul.w	r3, r7, r8
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x256>
 8000f52:	1869      	adds	r1, r5, r1
 8000f54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f58:	d22f      	bcs.n	8000fba <__udivmoddi4+0x2ae>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d92d      	bls.n	8000fba <__udivmoddi4+0x2ae>
 8000f5e:	3f02      	subs	r7, #2
 8000f60:	4429      	add	r1, r5
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	b281      	uxth	r1, r0
 8000f66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb00 f308 	mul.w	r3, r0, r8
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x27e>
 8000f7a:	1869      	adds	r1, r5, r1
 8000f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f80:	d217      	bcs.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d915      	bls.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4429      	add	r1, r5
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f90:	e73b      	b.n	8000e0a <__udivmoddi4+0xfe>
 8000f92:	4637      	mov	r7, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e709      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f98:	4607      	mov	r7, r0
 8000f9a:	e6e7      	b.n	8000d6c <__udivmoddi4+0x60>
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x8c>
 8000fa0:	4541      	cmp	r1, r8
 8000fa2:	d2ab      	bcs.n	8000efc <__udivmoddi4+0x1f0>
 8000fa4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fac:	3801      	subs	r0, #1
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e7a4      	b.n	8000efc <__udivmoddi4+0x1f0>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	e7e9      	b.n	8000f8a <__udivmoddi4+0x27e>
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	e795      	b.n	8000ee6 <__udivmoddi4+0x1da>
 8000fba:	4667      	mov	r7, ip
 8000fbc:	e7d1      	b.n	8000f62 <__udivmoddi4+0x256>
 8000fbe:	4681      	mov	r9, r0
 8000fc0:	e77c      	b.n	8000ebc <__udivmoddi4+0x1b0>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	442c      	add	r4, r5
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0x14c>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	442b      	add	r3, r5
 8000fce:	e72f      	b.n	8000e30 <__udivmoddi4+0x124>
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xda>
 8000fd4:	4637      	mov	r7, r6
 8000fd6:	e6e9      	b.n	8000dac <__udivmoddi4+0xa0>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2uiz>:
 8000fdc:	004a      	lsls	r2, r1, #1
 8000fde:	d211      	bcs.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fe4:	d211      	bcs.n	800100a <__aeabi_d2uiz+0x2e>
 8000fe6:	d50d      	bpl.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff0:	d40e      	bmi.n	8001010 <__aeabi_d2uiz+0x34>
 8000ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ffe:	fa23 f002 	lsr.w	r0, r3, r2
 8001002:	4770      	bx	lr
 8001004:	f04f 0000 	mov.w	r0, #0
 8001008:	4770      	bx	lr
 800100a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800100e:	d102      	bne.n	8001016 <__aeabi_d2uiz+0x3a>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr

0800101c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	080dc6f4 	.word	0x080dc6f4

0800103c <_ZN6tflite13ErrorReporterD0Ev>:
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffe9 	bl	800101c <_ZN6tflite13ErrorReporterD1Ev>
 800104a:	2104      	movs	r1, #4
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f00a fc60 	bl	800b912 <_ZdlPvj>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffd5 	bl	800101c <_ZN6tflite13ErrorReporterD1Ev>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	080dd20c 	.word	0x080dd20c

08001080 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe7 	bl	800105c <_ZN6tflite18MicroErrorReporterD1Ev>
 800108e:	2104      	movs	r1, #4
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f00a fc3e 	bl	800b912 <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010b6:	2149      	movs	r1, #73	; 0x49
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010ba:	f00a fd17 	bl	800baec <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	0800e6e8 	.word	0x0800e6e8
 80010cc:	080dc700 	.word	0x080dc700
 80010d0:	0800e72c 	.word	0x0800e72c

080010d4 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010dc:	687c      	ldr	r4, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 ff1e 	bl	8001f22 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	425b      	negs	r3, r3
 80010ea:	4423      	add	r3, r4
  }
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}

080010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffe7 	bl	80010d4 <_ZNK11flatbuffers5Table9GetVTableEv>
 8001106:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 feee 	bl	8001eea <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	429a      	cmp	r2, r3
 8001118:	d207      	bcs.n	800112a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fee2 	bl	8001eea <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001126:	4603      	mov	r3, r0
 8001128:	e000      	b.n	800112c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800112a:	2300      	movs	r3, #0
  }
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNK6tflite5Model7versionEv>:
    VT_DESCRIPTION = 10,
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16
  };
  uint32_t version() const {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	2104      	movs	r1, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fefb 	bl	8001f3e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001148:	4603      	mov	r3, r0
  }
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 ff0d 	bl	8001f7a <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
	...

0800116c <_ZN6tflite10OpResolverD1Ev>:
  virtual const TfLiteRegistration* FindOp(tflite::BuiltinOperator op,
                                           int version) const = 0;
  /// Finds the op registration of a custom operator by op name.
  virtual const TfLiteRegistration* FindOp(const char* op,
                                           int version) const = 0;
  virtual ~OpResolver() {}
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	4a04      	ldr	r2, [pc, #16]	; (8001188 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	080dc6dc 	.word	0x080dc6dc

0800118c <_ZN6tflite10OpResolverD0Ev>:
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ffe9 	bl	800116c <_ZN6tflite10OpResolverD1Ev>
 800119a:	2104      	movs	r1, #4
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f00a fbb8 	bl	800b912 <_ZdlPvj>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	460b      	mov	r3, r1
 80011b6:	607a      	str	r2, [r7, #4]
 80011b8:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	3310      	adds	r3, #16
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	7afa      	ldrb	r2, [r7, #11]
 80011c4:	4611      	mov	r1, r2
 80011c6:	68f8      	ldr	r0, [r7, #12]
 80011c8:	4798      	blx	r3
 80011ca:	4603      	mov	r3, r0
  }
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	60f8      	str	r0, [r7, #12]
 80011dc:	60b9      	str	r1, [r7, #8]
 80011de:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	3314      	adds	r3, #20
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68b9      	ldr	r1, [r7, #8]
 80011ea:	68f8      	ldr	r0, [r7, #12]
 80011ec:	4798      	blx	r3
 80011ee:	4603      	mov	r3, r0
  }
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff ffaf 	bl	800116c <_ZN6tflite10OpResolverD1Ev>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	080dc6b8 	.word	0x080dc6b8

0800121c <_ZN6tflite15MicroOpResolverD0Ev>:
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	f7ff ffe7 	bl	80011f8 <_ZN6tflite15MicroOpResolverD1Ev>
 800122a:	2104      	movs	r1, #4
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f00a fb70 	bl	800b912 <_ZdlPvj>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4618      	mov	r0, r3
 8001236:	3708      	adds	r7, #8
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}

0800123c <_Z10isFullADC1v>:
int rearADC2 = -1;
int itemsInQueueADC2 = 0;
long sumADC2 = 0;
long squaredSumADC2 = 0;

_Bool isFullADC1() {
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	return itemsInQueueADC1 == SIZE;
 8001240:	4b05      	ldr	r3, [pc, #20]	; (8001258 <_Z10isFullADC1v+0x1c>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b64      	cmp	r3, #100	; 0x64
 8001246:	bf0c      	ite	eq
 8001248:	2301      	moveq	r3, #1
 800124a:	2300      	movne	r3, #0
 800124c:	b2db      	uxtb	r3, r3
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr
 8001258:	20000c6c 	.word	0x20000c6c

0800125c <_Z10isFullADC2v>:
_Bool isFullADC2() {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
	return itemsInQueueADC2 == SIZE;
 8001260:	4b05      	ldr	r3, [pc, #20]	; (8001278 <_Z10isFullADC2v+0x1c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2b64      	cmp	r3, #100	; 0x64
 8001266:	bf0c      	ite	eq
 8001268:	2301      	moveq	r3, #1
 800126a:	2300      	movne	r3, #0
 800126c:	b2db      	uxtb	r3, r3
}
 800126e:	4618      	mov	r0, r3
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr
 8001278:	20000d44 	.word	0x20000d44

0800127c <_Z19removeDataADC1Queuev>:

short removeDataADC1Queue() {
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
	short data = QueueADC1[frontADC1++];
 8001282:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <_Z19removeDataADC1Queuev+0x64>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	1c5a      	adds	r2, r3, #1
 8001288:	4915      	ldr	r1, [pc, #84]	; (80012e0 <_Z19removeDataADC1Queuev+0x64>)
 800128a:	600a      	str	r2, [r1, #0]
 800128c:	4a15      	ldr	r2, [pc, #84]	; (80012e4 <_Z19removeDataADC1Queuev+0x68>)
 800128e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001292:	80fb      	strh	r3, [r7, #6]

	if(frontADC1 == SIZE) {
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <_Z19removeDataADC1Queuev+0x64>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b64      	cmp	r3, #100	; 0x64
 800129a:	d102      	bne.n	80012a2 <_Z19removeDataADC1Queuev+0x26>
		frontADC1 = 0;
 800129c:	4b10      	ldr	r3, [pc, #64]	; (80012e0 <_Z19removeDataADC1Queuev+0x64>)
 800129e:	2200      	movs	r2, #0
 80012a0:	601a      	str	r2, [r3, #0]
	}

	itemsInQueueADC1--;
 80012a2:	4b11      	ldr	r3, [pc, #68]	; (80012e8 <_Z19removeDataADC1Queuev+0x6c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	4a0f      	ldr	r2, [pc, #60]	; (80012e8 <_Z19removeDataADC1Queuev+0x6c>)
 80012aa:	6013      	str	r3, [r2, #0]
	sumADC1 -= data;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <_Z19removeDataADC1Queuev+0x70>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <_Z19removeDataADC1Queuev+0x70>)
 80012b8:	6013      	str	r3, [r2, #0]
	squaredSumADC1 -= data*data;
 80012ba:	4b0d      	ldr	r3, [pc, #52]	; (80012f0 <_Z19removeDataADC1Queuev+0x74>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012c2:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80012c6:	fb01 f303 	mul.w	r3, r1, r3
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	4a08      	ldr	r2, [pc, #32]	; (80012f0 <_Z19removeDataADC1Queuev+0x74>)
 80012ce:	6013      	str	r3, [r2, #0]
	return data;
 80012d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	20000c68 	.word	0x20000c68
 80012e4:	20000ba0 	.word	0x20000ba0
 80012e8:	20000c6c 	.word	0x20000c6c
 80012ec:	20000c70 	.word	0x20000c70
 80012f0:	20000c74 	.word	0x20000c74

080012f4 <_Z19removeDataADC2Queuev>:
short removeDataADC2Queue() {
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
	short data = QueueADC2[frontADC2++];
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <_Z19removeDataADC2Queuev+0x64>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4915      	ldr	r1, [pc, #84]	; (8001358 <_Z19removeDataADC2Queuev+0x64>)
 8001302:	600a      	str	r2, [r1, #0]
 8001304:	4a15      	ldr	r2, [pc, #84]	; (800135c <_Z19removeDataADC2Queuev+0x68>)
 8001306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130a:	80fb      	strh	r3, [r7, #6]

	if(frontADC2 == SIZE) {
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <_Z19removeDataADC2Queuev+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b64      	cmp	r3, #100	; 0x64
 8001312:	d102      	bne.n	800131a <_Z19removeDataADC2Queuev+0x26>
		frontADC2 = 0;
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <_Z19removeDataADC2Queuev+0x64>)
 8001316:	2200      	movs	r2, #0
 8001318:	601a      	str	r2, [r3, #0]
	}

	itemsInQueueADC2--;
 800131a:	4b11      	ldr	r3, [pc, #68]	; (8001360 <_Z19removeDataADC2Queuev+0x6c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <_Z19removeDataADC2Queuev+0x6c>)
 8001322:	6013      	str	r3, [r2, #0]
	sumADC2 -= data;
 8001324:	4b0f      	ldr	r3, [pc, #60]	; (8001364 <_Z19removeDataADC2Queuev+0x70>)
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a0d      	ldr	r2, [pc, #52]	; (8001364 <_Z19removeDataADC2Queuev+0x70>)
 8001330:	6013      	str	r3, [r2, #0]
	squaredSumADC2 -= data*data;
 8001332:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <_Z19removeDataADC2Queuev+0x74>)
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800133a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800133e:	fb01 f303 	mul.w	r3, r1, r3
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a08      	ldr	r2, [pc, #32]	; (8001368 <_Z19removeDataADC2Queuev+0x74>)
 8001346:	6013      	str	r3, [r2, #0]
	return data;
 8001348:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800134c:	4618      	mov	r0, r3
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	20000d40 	.word	0x20000d40
 800135c:	20000c78 	.word	0x20000c78
 8001360:	20000d44 	.word	0x20000d44
 8001364:	20000d48 	.word	0x20000d48
 8001368:	20000d4c 	.word	0x20000d4c

0800136c <_Z19insertDataADC1Queues>:

void insertDataADC1Queue(short data) {
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	4603      	mov	r3, r0
 8001374:	80fb      	strh	r3, [r7, #6]

	if(!isFullADC1()) {
 8001376:	f7ff ff61 	bl	800123c <_Z10isFullADC1v>
 800137a:	4603      	mov	r3, r0
 800137c:	f083 0301 	eor.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d02a      	beq.n	80013dc <_Z19insertDataADC1Queues+0x70>
		if(rearADC1 == SIZE-1) {
 8001386:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <_Z19insertDataADC1Queues+0x88>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2b63      	cmp	r3, #99	; 0x63
 800138c:	d103      	bne.n	8001396 <_Z19insertDataADC1Queues+0x2a>
			rearADC1 = -1;
 800138e:	4b19      	ldr	r3, [pc, #100]	; (80013f4 <_Z19insertDataADC1Queues+0x88>)
 8001390:	f04f 32ff 	mov.w	r2, #4294967295
 8001394:	601a      	str	r2, [r3, #0]
		}
		QueueADC1[++rearADC1] = data;
 8001396:	4b17      	ldr	r3, [pc, #92]	; (80013f4 <_Z19insertDataADC1Queues+0x88>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	3301      	adds	r3, #1
 800139c:	4a15      	ldr	r2, [pc, #84]	; (80013f4 <_Z19insertDataADC1Queues+0x88>)
 800139e:	6013      	str	r3, [r2, #0]
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <_Z19insertDataADC1Queues+0x88>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4914      	ldr	r1, [pc, #80]	; (80013f8 <_Z19insertDataADC1Queues+0x8c>)
 80013a6:	88fa      	ldrh	r2, [r7, #6]
 80013a8:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		itemsInQueueADC1++;
 80013ac:	4b13      	ldr	r3, [pc, #76]	; (80013fc <_Z19insertDataADC1Queues+0x90>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	3301      	adds	r3, #1
 80013b2:	4a12      	ldr	r2, [pc, #72]	; (80013fc <_Z19insertDataADC1Queues+0x90>)
 80013b4:	6013      	str	r3, [r2, #0]
		sumADC1 += data;
 80013b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <_Z19insertDataADC1Queues+0x94>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <_Z19insertDataADC1Queues+0x94>)
 80013c2:	6013      	str	r3, [r2, #0]
		squaredSumADC1 += data*data;
 80013c4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013c8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80013cc:	fb02 f203 	mul.w	r2, r2, r3
 80013d0:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <_Z19insertDataADC1Queues+0x98>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4413      	add	r3, r2
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <_Z19insertDataADC1Queues+0x98>)
 80013d8:	6013      	str	r3, [r2, #0]
	} else {
		removeDataADC1Queue();
		insertDataADC1Queue(data);
	}
}
 80013da:	e006      	b.n	80013ea <_Z19insertDataADC1Queues+0x7e>
		removeDataADC1Queue();
 80013dc:	f7ff ff4e 	bl	800127c <_Z19removeDataADC1Queuev>
		insertDataADC1Queue(data);
 80013e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff ffc1 	bl	800136c <_Z19insertDataADC1Queues>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	20000000 	.word	0x20000000
 80013f8:	20000ba0 	.word	0x20000ba0
 80013fc:	20000c6c 	.word	0x20000c6c
 8001400:	20000c70 	.word	0x20000c70
 8001404:	20000c74 	.word	0x20000c74

08001408 <_Z19insertDataADC2Queues>:
void insertDataADC2Queue(short data) {
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	80fb      	strh	r3, [r7, #6]

	if(!isFullADC2()) {
 8001412:	f7ff ff23 	bl	800125c <_Z10isFullADC2v>
 8001416:	4603      	mov	r3, r0
 8001418:	f083 0301 	eor.w	r3, r3, #1
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b00      	cmp	r3, #0
 8001420:	d02a      	beq.n	8001478 <_Z19insertDataADC2Queues+0x70>
		if(rearADC2 == SIZE-1) {
 8001422:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <_Z19insertDataADC2Queues+0x88>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2b63      	cmp	r3, #99	; 0x63
 8001428:	d103      	bne.n	8001432 <_Z19insertDataADC2Queues+0x2a>
			rearADC2 = -1;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <_Z19insertDataADC2Queues+0x88>)
 800142c:	f04f 32ff 	mov.w	r2, #4294967295
 8001430:	601a      	str	r2, [r3, #0]
		}
		QueueADC2[++rearADC2] = data;
 8001432:	4b17      	ldr	r3, [pc, #92]	; (8001490 <_Z19insertDataADC2Queues+0x88>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	4a15      	ldr	r2, [pc, #84]	; (8001490 <_Z19insertDataADC2Queues+0x88>)
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <_Z19insertDataADC2Queues+0x88>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4914      	ldr	r1, [pc, #80]	; (8001494 <_Z19insertDataADC2Queues+0x8c>)
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		itemsInQueueADC2++;
 8001448:	4b13      	ldr	r3, [pc, #76]	; (8001498 <_Z19insertDataADC2Queues+0x90>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	3301      	adds	r3, #1
 800144e:	4a12      	ldr	r2, [pc, #72]	; (8001498 <_Z19insertDataADC2Queues+0x90>)
 8001450:	6013      	str	r3, [r2, #0]
		sumADC2 += data;
 8001452:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <_Z19insertDataADC2Queues+0x94>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4413      	add	r3, r2
 800145c:	4a0f      	ldr	r2, [pc, #60]	; (800149c <_Z19insertDataADC2Queues+0x94>)
 800145e:	6013      	str	r3, [r2, #0]
		squaredSumADC2 += data*data;
 8001460:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001464:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001468:	fb02 f203 	mul.w	r2, r2, r3
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <_Z19insertDataADC2Queues+0x98>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4413      	add	r3, r2
 8001472:	4a0b      	ldr	r2, [pc, #44]	; (80014a0 <_Z19insertDataADC2Queues+0x98>)
 8001474:	6013      	str	r3, [r2, #0]
	} else {
		removeDataADC2Queue();
		insertDataADC2Queue(data);
	}
}
 8001476:	e006      	b.n	8001486 <_Z19insertDataADC2Queues+0x7e>
		removeDataADC2Queue();
 8001478:	f7ff ff3c 	bl	80012f4 <_Z19removeDataADC2Queuev>
		insertDataADC2Queue(data);
 800147c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff ffc1 	bl	8001408 <_Z19insertDataADC2Queues>
}
 8001486:	bf00      	nop
 8001488:	3708      	adds	r7, #8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000004 	.word	0x20000004
 8001494:	20000c78 	.word	0x20000c78
 8001498:	20000d44 	.word	0x20000d44
 800149c:	20000d48 	.word	0x20000d48
 80014a0:	20000d4c 	.word	0x20000d4c

080014a4 <__tcf_0>:
	MX_ADC2_Init();
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim1);

	// Set up logging (modify tensorflow/lite/micro/debug_log.cc)
	static tflite::MicroErrorReporter micro_error_reporter;
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__tcf_0+0xc>)
 80014aa:	f7ff fdd7 	bl	800105c <_ZN6tflite18MicroErrorReporterD1Ev>
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000008 	.word	0x20000008

080014b4 <__tcf_1>:
	}

	// Pull in only needed operations (should match NN layers). Template parameter
	// <n> is number of ops to be added. Available ops:
	// tensorflow/lite/micro/kernels/micro_ops.h
	static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4801      	ldr	r0, [pc, #4]	; (80014c0 <__tcf_1+0xc>)
 80014ba:	f000 fe91 	bl	80021e0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20000d54 	.word	0x20000d54

080014c4 <__tcf_2>:
		while(1);
	}

	// Build an interpreter to run the model with.
	static tflite::MicroInterpreter static_interpreter(
			model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4801      	ldr	r0, [pc, #4]	; (80014d0 <__tcf_2+0xc>)
 80014ca:	f007 fd7b 	bl	8008fc4 <_ZN6tflite16MicroInterpreterD1Ev>
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000d90 	.word	0x20000d90

080014d4 <main>:
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b094      	sub	sp, #80	; 0x50
 80014d8:	af04      	add	r7, sp, #16
	int buf_len = 0;
 80014da:	2300      	movs	r3, #0
 80014dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_Init();
 80014de:	f001 f983 	bl	80027e8 <HAL_Init>
	SystemClock_Config();
 80014e2:	f000 f91d 	bl	8001720 <_Z18SystemClock_Configv>
	MX_GPIO_Init();
 80014e6:	f000 fb35 	bl	8001b54 <_ZL12MX_GPIO_Initv>
	MX_ADC1_Init();
 80014ea:	f000 f98d 	bl	8001808 <_ZL12MX_ADC1_Initv>
	MX_TIM1_Init();
 80014ee:	f000 fa43 	bl	8001978 <_ZL12MX_TIM1_Initv>
	MX_TIM8_Init();
 80014f2:	f000 faa1 	bl	8001a38 <_ZL12MX_TIM8_Initv>
	MX_USART2_UART_Init();
 80014f6:	f000 faff 	bl	8001af8 <_ZL19MX_USART2_UART_Initv>
	MX_ADC2_Init();
 80014fa:	f000 f9e1 	bl	80018c0 <_ZL12MX_ADC2_Initv>
	HAL_TIM_Base_Start_IT(&htim1);
 80014fe:	4871      	ldr	r0, [pc, #452]	; (80016c4 <main+0x1f0>)
 8001500:	f002 fdd5 	bl	80040ae <HAL_TIM_Base_Start_IT>
	static tflite::MicroErrorReporter micro_error_reporter;
 8001504:	4b70      	ldr	r3, [pc, #448]	; (80016c8 <main+0x1f4>)
 8001506:	781b      	ldrb	r3, [r3, #0]
 8001508:	f3bf 8f5b 	dmb	ish
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	bf0c      	ite	eq
 8001516:	2301      	moveq	r3, #1
 8001518:	2300      	movne	r3, #0
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d010      	beq.n	8001542 <main+0x6e>
 8001520:	4869      	ldr	r0, [pc, #420]	; (80016c8 <main+0x1f4>)
 8001522:	f00a fa09 	bl	800b938 <__cxa_guard_acquire>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	b2db      	uxtb	r3, r3
 8001532:	2b00      	cmp	r3, #0
 8001534:	d005      	beq.n	8001542 <main+0x6e>
 8001536:	4864      	ldr	r0, [pc, #400]	; (80016c8 <main+0x1f4>)
 8001538:	f00a fa0a 	bl	800b950 <__cxa_guard_release>
 800153c:	4863      	ldr	r0, [pc, #396]	; (80016cc <main+0x1f8>)
 800153e:	f00a faf3 	bl	800bb28 <atexit>
	error_reporter = &micro_error_reporter;
 8001542:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <main+0x1fc>)
 8001544:	4a63      	ldr	r2, [pc, #396]	; (80016d4 <main+0x200>)
 8001546:	601a      	str	r2, [r3, #0]
	error_reporter->Report("STM32 TensorFlow Lite test");
 8001548:	4b61      	ldr	r3, [pc, #388]	; (80016d0 <main+0x1fc>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4962      	ldr	r1, [pc, #392]	; (80016d8 <main+0x204>)
 800154e:	4618      	mov	r0, r3
 8001550:	f003 fe9a 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
	model = tflite::GetModel(EMG_RNN);
 8001554:	4861      	ldr	r0, [pc, #388]	; (80016dc <main+0x208>)
 8001556:	f7ff fdfc 	bl	8001152 <_ZN6tflite8GetModelEPKv>
 800155a:	4602      	mov	r2, r0
 800155c:	4b60      	ldr	r3, [pc, #384]	; (80016e0 <main+0x20c>)
 800155e:	601a      	str	r2, [r3, #0]
	if (model->version() != TFLITE_SCHEMA_VERSION)
 8001560:	4b5f      	ldr	r3, [pc, #380]	; (80016e0 <main+0x20c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fde5 	bl	8001134 <_ZNK6tflite5Model7versionEv>
 800156a:	4603      	mov	r3, r0
 800156c:	2b03      	cmp	r3, #3
 800156e:	bf14      	ite	ne
 8001570:	2301      	movne	r3, #1
 8001572:	2300      	moveq	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <main+0xb4>
		error_reporter->Report("Model version does not match Schema");
 800157a:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <main+0x1fc>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4959      	ldr	r1, [pc, #356]	; (80016e4 <main+0x210>)
 8001580:	4618      	mov	r0, r3
 8001582:	f003 fe81 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		while(1);
 8001586:	e7fe      	b.n	8001586 <main+0xb2>
	static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001588:	4b57      	ldr	r3, [pc, #348]	; (80016e8 <main+0x214>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	f3bf 8f5b 	dmb	ish
 8001590:	b2db      	uxtb	r3, r3
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	bf0c      	ite	eq
 800159a:	2301      	moveq	r3, #1
 800159c:	2300      	movne	r3, #0
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d014      	beq.n	80015ce <main+0xfa>
 80015a4:	4850      	ldr	r0, [pc, #320]	; (80016e8 <main+0x214>)
 80015a6:	f00a f9c7 	bl	800b938 <__cxa_guard_acquire>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	bf14      	ite	ne
 80015b0:	2301      	movne	r3, #1
 80015b2:	2300      	moveq	r3, #0
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d009      	beq.n	80015ce <main+0xfa>
 80015ba:	2100      	movs	r1, #0
 80015bc:	484b      	ldr	r0, [pc, #300]	; (80016ec <main+0x218>)
 80015be:	f000 fd0b 	bl	8001fd8 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 80015c2:	4849      	ldr	r0, [pc, #292]	; (80016e8 <main+0x214>)
 80015c4:	f00a f9c4 	bl	800b950 <__cxa_guard_release>
 80015c8:	4849      	ldr	r0, [pc, #292]	; (80016f0 <main+0x21c>)
 80015ca:	f00a faad 	bl	800bb28 <atexit>
	tflite_status = micro_op_resolver.AddFullyConnected();
 80015ce:	4847      	ldr	r0, [pc, #284]	; (80016ec <main+0x218>)
 80015d0:	f000 fd1e 	bl	8002010 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (tflite_status != kTfLiteOk)
 80015da:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d006      	beq.n	80015f0 <main+0x11c>
		error_reporter->Report("Could not add FULLY CONNECTED op");
 80015e2:	4b3b      	ldr	r3, [pc, #236]	; (80016d0 <main+0x1fc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4943      	ldr	r1, [pc, #268]	; (80016f4 <main+0x220>)
 80015e8:	4618      	mov	r0, r3
 80015ea:	f003 fe4d 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		while(1);
 80015ee:	e7fe      	b.n	80015ee <main+0x11a>
			model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <main+0x224>)
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	f3bf 8f5b 	dmb	ish
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f003 0301 	and.w	r3, r3, #1
 80015fe:	2b00      	cmp	r3, #0
 8001600:	bf0c      	ite	eq
 8001602:	2301      	moveq	r3, #1
 8001604:	2300      	movne	r3, #0
 8001606:	b2db      	uxtb	r3, r3
 8001608:	2b00      	cmp	r3, #0
 800160a:	d01f      	beq.n	800164c <main+0x178>
 800160c:	483a      	ldr	r0, [pc, #232]	; (80016f8 <main+0x224>)
 800160e:	f00a f993 	bl	800b938 <__cxa_guard_acquire>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf14      	ite	ne
 8001618:	2301      	movne	r3, #1
 800161a:	2300      	moveq	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2b00      	cmp	r3, #0
 8001620:	d014      	beq.n	800164c <main+0x178>
 8001622:	4b2f      	ldr	r3, [pc, #188]	; (80016e0 <main+0x20c>)
 8001624:	6819      	ldr	r1, [r3, #0]
 8001626:	4b2a      	ldr	r3, [pc, #168]	; (80016d0 <main+0x1fc>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2200      	movs	r2, #0
 800162c:	9202      	str	r2, [sp, #8]
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	4b31      	ldr	r3, [pc, #196]	; (80016fc <main+0x228>)
 8001638:	4a2c      	ldr	r2, [pc, #176]	; (80016ec <main+0x218>)
 800163a:	4831      	ldr	r0, [pc, #196]	; (8001700 <main+0x22c>)
 800163c:	f007 fc85 	bl	8008f4a <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 8001640:	482d      	ldr	r0, [pc, #180]	; (80016f8 <main+0x224>)
 8001642:	f00a f985 	bl	800b950 <__cxa_guard_release>
 8001646:	482f      	ldr	r0, [pc, #188]	; (8001704 <main+0x230>)
 8001648:	f00a fa6e 	bl	800bb28 <atexit>
	interpreter = &static_interpreter;
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <main+0x234>)
 800164e:	4a2c      	ldr	r2, [pc, #176]	; (8001700 <main+0x22c>)
 8001650:	601a      	str	r2, [r3, #0]

	// Allocate memory from the tensor_arena for the model's tensors.
	tflite_status = interpreter->AllocateTensors();
 8001652:	4b2d      	ldr	r3, [pc, #180]	; (8001708 <main+0x234>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4618      	mov	r0, r3
 8001658:	f007 fd3e 	bl	80090d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 800165c:	4603      	mov	r3, r0
 800165e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	if (tflite_status != kTfLiteOk)
 8001662:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <main+0x1a4>
	{
		error_reporter->Report("AllocateTensors() failed");
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <main+0x1fc>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4927      	ldr	r1, [pc, #156]	; (800170c <main+0x238>)
 8001670:	4618      	mov	r0, r3
 8001672:	f003 fe09 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
		while(1);
 8001676:	e7fe      	b.n	8001676 <main+0x1a2>
	}

	// Assign model input and output buffers (tensors) to pointers
	model_input = interpreter->input(0);
 8001678:	4b23      	ldr	r3, [pc, #140]	; (8001708 <main+0x234>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	2100      	movs	r1, #0
 800167e:	4618      	mov	r0, r3
 8001680:	f007 fe38 	bl	80092f4 <_ZN6tflite16MicroInterpreter5inputEj>
 8001684:	4602      	mov	r2, r0
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <main+0x23c>)
 8001688:	601a      	str	r2, [r3, #0]
	model_output = interpreter->output(0);
 800168a:	4b1f      	ldr	r3, [pc, #124]	; (8001708 <main+0x234>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2100      	movs	r1, #0
 8001690:	4618      	mov	r0, r3
 8001692:	f007 fe59 	bl	8009348 <_ZN6tflite16MicroInterpreter6outputEj>
 8001696:	4602      	mov	r2, r0
 8001698:	4b1e      	ldr	r3, [pc, #120]	; (8001714 <main+0x240>)
 800169a:	601a      	str	r2, [r3, #0]

	// Get number of elements in input tensor
	num_elements = model_input->bytes / sizeof(float);
 800169c:	4b1c      	ldr	r3, [pc, #112]	; (8001710 <main+0x23c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	699b      	ldr	r3, [r3, #24]
 80016a2:	089b      	lsrs	r3, r3, #2
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
	buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 80016a6:	463b      	mov	r3, r7
 80016a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016aa:	491b      	ldr	r1, [pc, #108]	; (8001718 <main+0x244>)
 80016ac:	4618      	mov	r0, r3
 80016ae:	f00b f951 	bl	800c954 <siprintf>
 80016b2:	63f8      	str	r0, [r7, #60]	; 0x3c
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80016b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	4639      	mov	r1, r7
 80016ba:	2364      	movs	r3, #100	; 0x64
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <main+0x248>)
 80016be:	f003 f918 	bl	80048f2 <HAL_UART_Transmit>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80016c2:	e7fe      	b.n	80016c2 <main+0x1ee>
 80016c4:	200002bc 	.word	0x200002bc
 80016c8:	20000d50 	.word	0x20000d50
 80016cc:	080014a5 	.word	0x080014a5
 80016d0:	20000384 	.word	0x20000384
 80016d4:	20000008 	.word	0x20000008
 80016d8:	0800e7e4 	.word	0x0800e7e4
 80016dc:	08010efc 	.word	0x08010efc
 80016e0:	20000388 	.word	0x20000388
 80016e4:	0800e800 	.word	0x0800e800
 80016e8:	20000d8c 	.word	0x20000d8c
 80016ec:	20000d54 	.word	0x20000d54
 80016f0:	080014b5 	.word	0x080014b5
 80016f4:	0800e824 	.word	0x0800e824
 80016f8:	20000e08 	.word	0x20000e08
 80016fc:	200003a0 	.word	0x200003a0
 8001700:	20000d90 	.word	0x20000d90
 8001704:	080014c5 	.word	0x080014c5
 8001708:	2000038c 	.word	0x2000038c
 800170c:	0800e848 	.word	0x0800e848
 8001710:	20000390 	.word	0x20000390
 8001714:	20000394 	.word	0x20000394
 8001718:	0800e864 	.word	0x0800e864
 800171c:	2000033c 	.word	0x2000033c

08001720 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b094      	sub	sp, #80	; 0x50
 8001724:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001726:	f107 0320 	add.w	r3, r7, #32
 800172a:	2230      	movs	r2, #48	; 0x30
 800172c:	2100      	movs	r1, #0
 800172e:	4618      	mov	r0, r3
 8001730:	f00a fa70 	bl	800bc14 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001734:	f107 030c 	add.w	r3, r7, #12
 8001738:	2200      	movs	r2, #0
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	609a      	str	r2, [r3, #8]
 8001740:	60da      	str	r2, [r3, #12]
 8001742:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001744:	2300      	movs	r3, #0
 8001746:	60bb      	str	r3, [r7, #8]
 8001748:	4b2d      	ldr	r3, [pc, #180]	; (8001800 <_Z18SystemClock_Configv+0xe0>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <_Z18SystemClock_Configv+0xe0>)
 800174e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001752:	6413      	str	r3, [r2, #64]	; 0x40
 8001754:	4b2a      	ldr	r3, [pc, #168]	; (8001800 <_Z18SystemClock_Configv+0xe0>)
 8001756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001758:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800175c:	60bb      	str	r3, [r7, #8]
 800175e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001760:	2300      	movs	r3, #0
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	4b27      	ldr	r3, [pc, #156]	; (8001804 <_Z18SystemClock_Configv+0xe4>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a26      	ldr	r2, [pc, #152]	; (8001804 <_Z18SystemClock_Configv+0xe4>)
 800176a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800176e:	6013      	str	r3, [r2, #0]
 8001770:	4b24      	ldr	r3, [pc, #144]	; (8001804 <_Z18SystemClock_Configv+0xe4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001778:	607b      	str	r3, [r7, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800177c:	2302      	movs	r3, #2
 800177e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001780:	2301      	movs	r3, #1
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001784:	2310      	movs	r3, #16
 8001786:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001788:	2302      	movs	r3, #2
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800178c:	2300      	movs	r3, #0
 800178e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001790:	2308      	movs	r3, #8
 8001792:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001794:	23a8      	movs	r3, #168	; 0xa8
 8001796:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001798:	2302      	movs	r3, #2
 800179a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800179c:	2307      	movs	r3, #7
 800179e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017a0:	f107 0320 	add.w	r3, r7, #32
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 fff5 	bl	8003794 <HAL_RCC_OscConfig>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	bf14      	ite	ne
 80017b0:	2301      	movne	r3, #1
 80017b2:	2300      	moveq	r3, #0
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <_Z18SystemClock_Configv+0x9e>
	{
		Error_Handler();
 80017ba:	f000 fb87 	bl	8001ecc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80017ce:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017d4:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017d6:	f107 030c 	add.w	r3, r7, #12
 80017da:	2105      	movs	r1, #5
 80017dc:	4618      	mov	r0, r3
 80017de:	f002 fa49 	bl	8003c74 <HAL_RCC_ClockConfig>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_Z18SystemClock_Configv+0xd6>
	{
		Error_Handler();
 80017f2:	f000 fb6b 	bl	8001ecc <Error_Handler>
	}
}
 80017f6:	bf00      	nop
 80017f8:	3750      	adds	r7, #80	; 0x50
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40007000 	.word	0x40007000

08001808 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800180e:	463b      	mov	r3, r7
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800181a:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800181c:	4a26      	ldr	r2, [pc, #152]	; (80018b8 <_ZL12MX_ADC1_Initv+0xb0>)
 800181e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001822:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001826:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001828:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 800182e:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001830:	2200      	movs	r2, #0
 8001832:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001834:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001836:	2200      	movs	r2, #0
 8001838:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800183a:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001844:	2200      	movs	r2, #0
 8001846:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001848:	4b1a      	ldr	r3, [pc, #104]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800184a:	4a1c      	ldr	r2, [pc, #112]	; (80018bc <_ZL12MX_ADC1_Initv+0xb4>)
 800184c:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001850:	2200      	movs	r2, #0
 8001852:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001856:	2201      	movs	r2, #1
 8001858:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800185c:	2200      	movs	r2, #0
 800185e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001864:	2201      	movs	r2, #1
 8001866:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001868:	4812      	ldr	r0, [pc, #72]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 800186a:	f001 f82f 	bl	80028cc <HAL_ADC_Init>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	bf14      	ite	ne
 8001874:	2301      	movne	r3, #1
 8001876:	2300      	moveq	r3, #0
 8001878:	b2db      	uxtb	r3, r3
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <_ZL12MX_ADC1_Initv+0x7a>
	{
		Error_Handler();
 800187e:	f000 fb25 	bl	8001ecc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001882:	2308      	movs	r3, #8
 8001884:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001886:	2301      	movs	r3, #1
 8001888:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800188a:	2300      	movs	r3, #0
 800188c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800188e:	463b      	mov	r3, r7
 8001890:	4619      	mov	r1, r3
 8001892:	4808      	ldr	r0, [pc, #32]	; (80018b4 <_ZL12MX_ADC1_Initv+0xac>)
 8001894:	f001 fa90 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf14      	ite	ne
 800189e:	2301      	movne	r3, #1
 80018a0:	2300      	moveq	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <_ZL12MX_ADC1_Initv+0xa4>
	{
		Error_Handler();
 80018a8:	f000 fb10 	bl	8001ecc <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */
	/* USER CODE END ADC1_Init 2 */

}
 80018ac:	bf00      	nop
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	2000022c 	.word	0x2000022c
 80018b8:	40012000 	.word	0x40012000
 80018bc:	0f000001 	.word	0x0f000001

080018c0 <_ZL12MX_ADC2_Initv>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b084      	sub	sp, #16
 80018c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]
 80018cc:	605a      	str	r2, [r3, #4]
 80018ce:	609a      	str	r2, [r3, #8]
 80018d0:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN ADC2_Init 1 */

	/* USER CODE END ADC2_Init 1 */
	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80018d2:	4b26      	ldr	r3, [pc, #152]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018d4:	4a26      	ldr	r2, [pc, #152]	; (8001970 <_ZL12MX_ADC2_Initv+0xb0>)
 80018d6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80018d8:	4b24      	ldr	r3, [pc, #144]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80018de:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80018e0:	4b22      	ldr	r3, [pc, #136]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80018e6:	4b21      	ldr	r3, [pc, #132]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80018ec:	4b1f      	ldr	r3, [pc, #124]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80018f2:	4b1e      	ldr	r3, [pc, #120]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 8001902:	4a1c      	ldr	r2, [pc, #112]	; (8001974 <_ZL12MX_ADC2_Initv+0xb4>)
 8001904:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001906:	4b19      	ldr	r3, [pc, #100]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 8001908:	2200      	movs	r2, #0
 800190a:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 800190c:	4b17      	ldr	r3, [pc, #92]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 800190e:	2201      	movs	r2, #1
 8001910:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8001912:	4b16      	ldr	r3, [pc, #88]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 8001914:	2200      	movs	r2, #0
 8001916:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800191a:	4b14      	ldr	r3, [pc, #80]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 800191c:	2201      	movs	r2, #1
 800191e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001920:	4812      	ldr	r0, [pc, #72]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 8001922:	f000 ffd3 	bl	80028cc <HAL_ADC_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf14      	ite	ne
 800192c:	2301      	movne	r3, #1
 800192e:	2300      	moveq	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <_ZL12MX_ADC2_Initv+0x7a>
	{
		Error_Handler();
 8001936:	f000 fac9 	bl	8001ecc <Error_Handler>
	}
	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 800193a:	2309      	movs	r3, #9
 800193c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800193e:	2301      	movs	r3, #1
 8001940:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001946:	463b      	mov	r3, r7
 8001948:	4619      	mov	r1, r3
 800194a:	4808      	ldr	r0, [pc, #32]	; (800196c <_ZL12MX_ADC2_Initv+0xac>)
 800194c:	f001 fa34 	bl	8002db8 <HAL_ADC_ConfigChannel>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	bf14      	ite	ne
 8001956:	2301      	movne	r3, #1
 8001958:	2300      	moveq	r3, #0
 800195a:	b2db      	uxtb	r3, r3
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <_ZL12MX_ADC2_Initv+0xa4>
	{
		Error_Handler();
 8001960:	f000 fab4 	bl	8001ecc <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001964:	bf00      	nop
 8001966:	3710      	adds	r7, #16
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20000274 	.word	0x20000274
 8001970:	40012100 	.word	0x40012100
 8001974:	0f000001 	.word	0x0f000001

08001978 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800197e:	f107 0308 	add.w	r3, r7, #8
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	605a      	str	r2, [r3, #4]
 8001988:	609a      	str	r2, [r3, #8]
 800198a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198c:	463b      	mov	r3, r7
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001994:	4b26      	ldr	r3, [pc, #152]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 8001996:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <_ZL12MX_TIM1_Initv+0xbc>)
 8001998:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 4199;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 800199c:	f241 0267 	movw	r2, #4199	; 0x1067
 80019a0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b23      	ldr	r3, [pc, #140]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 40;
 80019a8:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019aa:	2228      	movs	r2, #40	; 0x28
 80019ac:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019ae:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80019b4:	4b1e      	ldr	r3, [pc, #120]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80019c0:	481b      	ldr	r0, [pc, #108]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019c2:	f002 fb49 	bl	8004058 <HAL_TIM_Base_Init>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf14      	ite	ne
 80019cc:	2301      	movne	r3, #1
 80019ce:	2300      	moveq	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <_ZL12MX_TIM1_Initv+0x62>
	{
		Error_Handler();
 80019d6:	f000 fa79 	bl	8001ecc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019de:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80019e0:	f107 0308 	add.w	r3, r7, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	4812      	ldr	r0, [pc, #72]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 80019e8:	f002 fc8d 	bl	8004306 <HAL_TIM_ConfigClockSource>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	bf14      	ite	ne
 80019f2:	2301      	movne	r3, #1
 80019f4:	2300      	moveq	r3, #0
 80019f6:	b2db      	uxtb	r3, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <_ZL12MX_TIM1_Initv+0x88>
	{
		Error_Handler();
 80019fc:	f000 fa66 	bl	8001ecc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a00:	2320      	movs	r3, #32
 8001a02:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4808      	ldr	r0, [pc, #32]	; (8001a30 <_ZL12MX_TIM1_Initv+0xb8>)
 8001a0e:	f002 fe93 	bl	8004738 <HAL_TIMEx_MasterConfigSynchronization>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	bf14      	ite	ne
 8001a18:	2301      	movne	r3, #1
 8001a1a:	2300      	moveq	r3, #0
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <_ZL12MX_TIM1_Initv+0xae>
	{
		Error_Handler();
 8001a22:	f000 fa53 	bl	8001ecc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001a26:	bf00      	nop
 8001a28:	3718      	adds	r7, #24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	200002bc 	.word	0x200002bc
 8001a34:	40010000 	.word	0x40010000

08001a38 <_ZL12MX_TIM8_Initv>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3e:	f107 0308 	add.w	r3, r7, #8
 8001a42:	2200      	movs	r2, #0
 8001a44:	601a      	str	r2, [r3, #0]
 8001a46:	605a      	str	r2, [r3, #4]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	463b      	mov	r3, r7
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001a54:	4b26      	ldr	r3, [pc, #152]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a56:	4a27      	ldr	r2, [pc, #156]	; (8001af4 <_ZL12MX_TIM8_Initv+0xbc>)
 8001a58:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 4199;
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a5c:	f241 0267 	movw	r2, #4199	; 0x1067
 8001a60:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 4000;
 8001a68:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a6a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8001a6e:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001a76:	4b1e      	ldr	r3, [pc, #120]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b1c      	ldr	r3, [pc, #112]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a82:	481b      	ldr	r0, [pc, #108]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001a84:	f002 fae8 	bl	8004058 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	bf14      	ite	ne
 8001a8e:	2301      	movne	r3, #1
 8001a90:	2300      	moveq	r3, #0
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <_ZL12MX_TIM8_Initv+0x64>
	{
		Error_Handler();
 8001a98:	f000 fa18 	bl	8001ecc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aa0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001aa2:	f107 0308 	add.w	r3, r7, #8
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4811      	ldr	r0, [pc, #68]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001aaa:	f002 fc2c 	bl	8004306 <HAL_TIM_ConfigClockSource>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	bf14      	ite	ne
 8001ab4:	2301      	movne	r3, #1
 8001ab6:	2300      	moveq	r3, #0
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <_ZL12MX_TIM8_Initv+0x8a>
	{
		Error_Handler();
 8001abe:	f000 fa05 	bl	8001ecc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac2:	2320      	movs	r3, #32
 8001ac4:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001aca:	463b      	mov	r3, r7
 8001acc:	4619      	mov	r1, r3
 8001ace:	4808      	ldr	r0, [pc, #32]	; (8001af0 <_ZL12MX_TIM8_Initv+0xb8>)
 8001ad0:	f002 fe32 	bl	8004738 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	bf14      	ite	ne
 8001ada:	2301      	movne	r3, #1
 8001adc:	2300      	moveq	r3, #0
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <_ZL12MX_TIM8_Initv+0xb0>
	{
		Error_Handler();
 8001ae4:	f000 f9f2 	bl	8001ecc <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001ae8:	bf00      	nop
 8001aea:	3718      	adds	r7, #24
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200002fc 	.word	0x200002fc
 8001af4:	40010400 	.word	0x40010400

08001af8 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001afc:	4b13      	ldr	r3, [pc, #76]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001afe:	4a14      	ldr	r2, [pc, #80]	; (8001b50 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001b00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 921600;
 8001b02:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b04:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001b08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0a:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8001b10:	4b0e      	ldr	r3, [pc, #56]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001b1c:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b1e:	220c      	movs	r2, #12
 8001b20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b28:	4b08      	ldr	r3, [pc, #32]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b30:	f002 fe92 	bl	8004858 <HAL_UART_Init>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	bf14      	ite	ne
 8001b3a:	2301      	movne	r3, #1
 8001b3c:	2300      	moveq	r3, #0
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <_ZL19MX_USART2_UART_Initv+0x50>
	{
		Error_Handler();
 8001b44:	f000 f9c2 	bl	8001ecc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	2000033c 	.word	0x2000033c
 8001b50:	40004400 	.word	0x40004400

08001b54 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08c      	sub	sp, #48	; 0x30
 8001b58:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
 8001b64:	609a      	str	r2, [r3, #8]
 8001b66:	60da      	str	r2, [r3, #12]
 8001b68:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	61bb      	str	r3, [r7, #24]
 8001b6e:	4ba1      	ldr	r3, [pc, #644]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4aa0      	ldr	r2, [pc, #640]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b74:	f043 0310 	orr.w	r3, r3, #16
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b9e      	ldr	r3, [pc, #632]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	61bb      	str	r3, [r7, #24]
 8001b84:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b9a      	ldr	r3, [pc, #616]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a99      	ldr	r2, [pc, #612]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b97      	ldr	r3, [pc, #604]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	613b      	str	r3, [r7, #16]
 8001ba6:	4b93      	ldr	r3, [pc, #588]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a92      	ldr	r2, [pc, #584]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b90      	ldr	r3, [pc, #576]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	4b8c      	ldr	r3, [pc, #560]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a8b      	ldr	r2, [pc, #556]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60bb      	str	r3, [r7, #8]
 8001bde:	4b85      	ldr	r3, [pc, #532]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a84      	ldr	r2, [pc, #528]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b82      	ldr	r3, [pc, #520]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	60bb      	str	r3, [r7, #8]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	607b      	str	r3, [r7, #4]
 8001bfa:	4b7e      	ldr	r3, [pc, #504]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	4a7d      	ldr	r2, [pc, #500]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6313      	str	r3, [r2, #48]	; 0x30
 8001c06:	4b7b      	ldr	r3, [pc, #492]	; (8001df4 <_ZL12MX_GPIO_Initv+0x2a0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2108      	movs	r1, #8
 8001c16:	4878      	ldr	r0, [pc, #480]	; (8001df8 <_ZL12MX_GPIO_Initv+0x2a4>)
 8001c18:	f001 fda2 	bl	8003760 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4876      	ldr	r0, [pc, #472]	; (8001dfc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001c22:	f001 fd9d 	bl	8003760 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c26:	2200      	movs	r2, #0
 8001c28:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001c2c:	4874      	ldr	r0, [pc, #464]	; (8001e00 <_ZL12MX_GPIO_Initv+0x2ac>)
 8001c2e:	f001 fd97 	bl	8003760 <HAL_GPIO_WritePin>
			|Audio_RST_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin : CS_I2C_SPI_Pin */
	GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001c32:	2308      	movs	r3, #8
 8001c34:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8001c42:	f107 031c 	add.w	r3, r7, #28
 8001c46:	4619      	mov	r1, r3
 8001c48:	486b      	ldr	r0, [pc, #428]	; (8001df8 <_ZL12MX_GPIO_Initv+0x2a4>)
 8001c4a:	f001 fbef 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001c5e:	f107 031c 	add.w	r3, r7, #28
 8001c62:	4619      	mov	r1, r3
 8001c64:	4865      	ldr	r0, [pc, #404]	; (8001dfc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001c66:	f001 fbe1 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : PDM_OUT_Pin */
	GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001c6a:	2308      	movs	r3, #8
 8001c6c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c72:	2300      	movs	r3, #0
 8001c74:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c76:	2300      	movs	r3, #0
 8001c78:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c7a:	2305      	movs	r3, #5
 8001c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4619      	mov	r1, r3
 8001c84:	485d      	ldr	r0, [pc, #372]	; (8001dfc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001c86:	f001 fbd1 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c8e:	4b5d      	ldr	r3, [pc, #372]	; (8001e04 <_ZL12MX_GPIO_Initv+0x2b0>)
 8001c90:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c92:	2300      	movs	r3, #0
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	485a      	ldr	r0, [pc, #360]	; (8001e08 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001c9e:	f001 fbc5 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : I2S3_WS_Pin */
	GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001ca2:	2310      	movs	r3, #16
 8001ca4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001caa:	2300      	movs	r3, #0
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001cb6:	f107 031c 	add.w	r3, r7, #28
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4852      	ldr	r0, [pc, #328]	; (8001e08 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001cbe:	f001 fbb5 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_SCK_Pin SPI1_MISO_Pin SPI1_MOSI_Pin */
	GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001cc2:	23e0      	movs	r3, #224	; 0xe0
 8001cc4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cd6:	f107 031c 	add.w	r3, r7, #28
 8001cda:	4619      	mov	r1, r3
 8001cdc:	484a      	ldr	r0, [pc, #296]	; (8001e08 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001cde:	f001 fba5 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8001ce2:	2304      	movs	r3, #4
 8001ce4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	4845      	ldr	r0, [pc, #276]	; (8001e0c <_ZL12MX_GPIO_Initv+0x2b8>)
 8001cf6:	f001 fb99 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : CLK_IN_Pin */
	GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfe:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d00:	2302      	movs	r3, #2
 8001d02:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0c:	2305      	movs	r3, #5
 8001d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001d10:	f107 031c 	add.w	r3, r7, #28
 8001d14:	4619      	mov	r1, r3
 8001d16:	483d      	ldr	r0, [pc, #244]	; (8001e0c <_ZL12MX_GPIO_Initv+0x2b8>)
 8001d18:	f001 fb88 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
	GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001d1c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001d20:	61fb      	str	r3, [r7, #28]
			|Audio_RST_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d22:	2301      	movs	r3, #1
 8001d24:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d2e:	f107 031c 	add.w	r3, r7, #28
 8001d32:	4619      	mov	r1, r3
 8001d34:	4832      	ldr	r0, [pc, #200]	; (8001e00 <_ZL12MX_GPIO_Initv+0x2ac>)
 8001d36:	f001 fb79 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
	GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d3a:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d3e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d40:	2302      	movs	r3, #2
 8001d42:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d44:	2300      	movs	r3, #0
 8001d46:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d4c:	2306      	movs	r3, #6
 8001d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d50:	f107 031c 	add.w	r3, r7, #28
 8001d54:	4619      	mov	r1, r3
 8001d56:	4829      	ldr	r0, [pc, #164]	; (8001dfc <_ZL12MX_GPIO_Initv+0x2a8>)
 8001d58:	f001 fb68 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : VBUS_FS_Pin */
	GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8001d5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d60:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d62:	2300      	movs	r3, #0
 8001d64:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d66:	2300      	movs	r3, #0
 8001d68:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8001d6a:	f107 031c 	add.w	r3, r7, #28
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4825      	ldr	r0, [pc, #148]	; (8001e08 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001d72:	f001 fb5b 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_ID_Pin OTG_FS_DM_Pin OTG_FS_DP_Pin */
	GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8001d76:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001d7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d84:	2300      	movs	r3, #0
 8001d86:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001d88:	230a      	movs	r3, #10
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8c:	f107 031c 	add.w	r3, r7, #28
 8001d90:	4619      	mov	r1, r3
 8001d92:	481d      	ldr	r0, [pc, #116]	; (8001e08 <_ZL12MX_GPIO_Initv+0x2b4>)
 8001d94:	f001 fb4a 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001d98:	2320      	movs	r3, #32
 8001d9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	4619      	mov	r1, r3
 8001daa:	4815      	ldr	r0, [pc, #84]	; (8001e00 <_ZL12MX_GPIO_Initv+0x2ac>)
 8001dac:	f001 fb3e 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
	GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001db0:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001db4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001db6:	2312      	movs	r3, #18
 8001db8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	480f      	ldr	r0, [pc, #60]	; (8001e0c <_ZL12MX_GPIO_Initv+0x2b8>)
 8001dce:	f001 fb2d 	bl	800342c <HAL_GPIO_Init>

	/*Configure GPIO pin : MEMS_INT2_Pin */
	GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <_ZL12MX_GPIO_Initv+0x2bc>)
 8001dd8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001dde:	f107 031c 	add.w	r3, r7, #28
 8001de2:	4619      	mov	r1, r3
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <_ZL12MX_GPIO_Initv+0x2a4>)
 8001de6:	f001 fb21 	bl	800342c <HAL_GPIO_Init>

}
 8001dea:	bf00      	nop
 8001dec:	3730      	adds	r7, #48	; 0x30
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023800 	.word	0x40023800
 8001df8:	40021000 	.word	0x40021000
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	10110000 	.word	0x10110000
 8001e08:	40020000 	.word	0x40020000
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	10120000 	.word	0x10120000

08001e14 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1){
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a1a      	ldr	r2, [pc, #104]	; (8001e8c <HAL_ADC_ConvCpltCallback+0x78>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d114      	bne.n	8001e50 <HAL_ADC_ConvCpltCallback+0x3c>
		datoADC1 = HAL_ADC_GetValue(&hadc1)*3000/4098;
 8001e26:	481a      	ldr	r0, [pc, #104]	; (8001e90 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001e28:	f000 ffa5 	bl	8002d76 <HAL_ADC_GetValue>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e32:	fb03 f302 	mul.w	r3, r3, r2
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x80>)
 8001e38:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3c:	089b      	lsrs	r3, r3, #2
 8001e3e:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <HAL_ADC_ConvCpltCallback+0x84>)
 8001e40:	6013      	str	r3, [r2, #0]
		insertDataADC1Queue(datoADC1);
 8001e42:	4b15      	ldr	r3, [pc, #84]	; (8001e98 <HAL_ADC_ConvCpltCallback+0x84>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff fa8f 	bl	800136c <_Z19insertDataADC1Queues>
	}else if(hadc->Instance == ADC2){
		datoADC2 = HAL_ADC_GetValue(&hadc2)*3000/4098;
		insertDataADC2Queue(datoADC2);
	}
}
 8001e4e:	e018      	b.n	8001e82 <HAL_ADC_ConvCpltCallback+0x6e>
	}else if(hadc->Instance == ADC2){
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a11      	ldr	r2, [pc, #68]	; (8001e9c <HAL_ADC_ConvCpltCallback+0x88>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d113      	bne.n	8001e82 <HAL_ADC_ConvCpltCallback+0x6e>
		datoADC2 = HAL_ADC_GetValue(&hadc2)*3000/4098;
 8001e5a:	4811      	ldr	r0, [pc, #68]	; (8001ea0 <HAL_ADC_ConvCpltCallback+0x8c>)
 8001e5c:	f000 ff8b 	bl	8002d76 <HAL_ADC_GetValue>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001e66:	fb03 f302 	mul.w	r3, r3, r2
 8001e6a:	4a0a      	ldr	r2, [pc, #40]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x80>)
 8001e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e70:	089b      	lsrs	r3, r3, #2
 8001e72:	4a0c      	ldr	r2, [pc, #48]	; (8001ea4 <HAL_ADC_ConvCpltCallback+0x90>)
 8001e74:	6013      	str	r3, [r2, #0]
		insertDataADC2Queue(datoADC2);
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <HAL_ADC_ConvCpltCallback+0x90>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	b21b      	sxth	r3, r3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fac3 	bl	8001408 <_Z19insertDataADC2Queues>
}
 8001e82:	bf00      	nop
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40012000 	.word	0x40012000
 8001e90:	2000022c 	.word	0x2000022c
 8001e94:	003ff801 	.word	0x003ff801
 8001e98:	2000037c 	.word	0x2000037c
 8001e9c:	40012100 	.word	0x40012100
 8001ea0:	20000274 	.word	0x20000274
 8001ea4:	20000380 	.word	0x20000380

08001ea8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_IT(&hadc1);
 8001eb0:	4804      	ldr	r0, [pc, #16]	; (8001ec4 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001eb2:	f000 fd4f 	bl	8002954 <HAL_ADC_Start_IT>
	HAL_ADC_Start_IT(&hadc2);
 8001eb6:	4804      	ldr	r0, [pc, #16]	; (8001ec8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eb8:	f000 fd4c 	bl	8002954 <HAL_ADC_Start_IT>
}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	2000022c 	.word	0x2000022c
 8001ec8:	20000274 	.word	0x20000274

08001ecc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed0:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <Error_Handler+0x6>

08001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 8001edc:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 f8a9 	bl	800204e <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ffde 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001f18:	4603      	mov	r3, r0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b082      	sub	sp, #8
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f882 	bl	8002038 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001f34:	4603      	mov	r3, r0
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	460b      	mov	r3, r1
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001f4c:	897b      	ldrh	r3, [r7, #10]
 8001f4e:	4619      	mov	r1, r3
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff f8cf 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8001f56:	4603      	mov	r3, r0
 8001f58:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8001f5a:	8afb      	ldrh	r3, [r7, #22]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d007      	beq.n	8001f70 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001f60:	68fa      	ldr	r2, [r7, #12]
 8001f62:	8afb      	ldrh	r3, [r7, #22]
 8001f64:	4413      	add	r3, r2
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff ffcd 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	e000      	b.n	8001f72 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001f70:	687b      	ldr	r3, [r7, #4]
  }
 8001f72:	4618      	mov	r0, r3
 8001f74:	3718      	adds	r7, #24
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b082      	sub	sp, #8
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f86f 	bl	8002066 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 8001f88:	4603      	mov	r3, r0
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
	...

08001f94 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 8001f94:	b480      	push	{r7}
 8001f96:	b083      	sub	sp, #12
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <_ZN6tflite10OpResolverC1Ev+0x1c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	601a      	str	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fae:	4770      	bx	lr
 8001fb0:	080dc6dc 	.word	0x080dc6dc

08001fb4 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f7ff ffe8 	bl	8001f94 <_ZN6tflite10OpResolverC1Ev>
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3708      	adds	r7, #8
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	080dc6b8 	.word	0x080dc6b8

08001fd8 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
namespace tflite {

template <unsigned int tOpCount>
class MicroMutableOpResolver : public MicroOpResolver {
 public:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ffe5 	bl	8001fb4 <_ZN6tflite15MicroOpResolverC1Ev>
 8001fea:	4a08      	ldr	r2, [pc, #32]	; (800200c <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	625a      	str	r2, [r3, #36]	; 0x24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	631a      	str	r2, [r3, #48]	; 0x30
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	683a      	ldr	r2, [r7, #0]
 8002000:	635a      	str	r2, [r3, #52]	; 0x34
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	080dc694 	.word	0x080dc694

08002010 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv>:
    // function.
    return AddBuiltin(BuiltinOperator_FLOOR,
                      *tflite::ops::micro::Register_FLOOR(), ParseOpData);
  }

  TfLiteStatus AddFullyConnected() {
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED,
                      *tflite::ops::micro::Register_FULLY_CONNECTED(),
 8002018:	f009 f880 	bl	800b11c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 800201c:	4602      	mov	r2, r0
                      ParseFullyConnected);
 800201e:	4b05      	ldr	r3, [pc, #20]	; (8002034 <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedEv+0x24>)
 8002020:	2109      	movs	r1, #9
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 f832 	bl	800208c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8002028:	4603      	mov	r3, r0
  }
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	080055c9 	.word	0x080055c9

08002038 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    return t;
 8002040:	687b      	ldr	r3, [r7, #4]
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	80fb      	strh	r3, [r7, #6]
    return t;
 8002058:	88fb      	ldrh	r3, [r7, #6]
}
 800205a:	4618      	mov	r0, r3
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr

08002066 <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 8002066:	b580      	push	{r7, lr}
 8002068:	b082      	sub	sp, #8
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  EndianCheck();
 800206e:	f7ff f817 	bl	80010a0 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f7ff ff2c 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800207c:	4602      	mov	r2, r0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4413      	add	r3, r2
}
 8002082:	4618      	mov	r0, r3
 8002084:	3708      	adds	r7, #8
 8002086:	46bd      	mov	sp, r7
 8002088:	bd80      	pop	{r7, pc}
	...

0800208c <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  }

  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 800208c:	b5b0      	push	{r4, r5, r7, lr}
 800208e:	b084      	sub	sp, #16
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	460b      	mov	r3, r1
 800209a:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 800209c:	7afb      	ldrb	r3, [r7, #11]
 800209e:	2b20      	cmp	r3, #32
 80020a0:	d10b      	bne.n	80020ba <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ae:	4934      	ldr	r1, [pc, #208]	; (8002180 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 80020b0:	4618      	mov	r0, r3
 80020b2:	f003 f8e9 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e05d      	b.n	8002176 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	3310      	adds	r3, #16
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	7afa      	ldrb	r2, [r7, #11]
 80020c4:	4611      	mov	r1, r2
 80020c6:	68f8      	ldr	r0, [r7, #12]
 80020c8:	4798      	blx	r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00c      	beq.n	80020f4 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d006      	beq.n	80020f0 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	7afa      	ldrb	r2, [r7, #11]
 80020e8:	4926      	ldr	r1, [pc, #152]	; (8002184 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 f8cc 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e040      	b.n	8002176 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00c      	beq.n	8002116 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002100:	2b00      	cmp	r3, #0
 8002102:	d006      	beq.n	8002112 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8002108:	7afa      	ldrb	r2, [r7, #11]
 800210a:	2301      	movs	r3, #1
 800210c:	491e      	ldr	r1, [pc, #120]	; (8002188 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 800210e:	f003 f8bb 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8002112:	2301      	movs	r3, #1
 8002114:	e02f      	b.n	8002176 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorES2_PNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	015b      	lsls	r3, r3, #5
 800211e:	4413      	add	r3, r2
 8002120:	687a      	ldr	r2, [r7, #4]
 8002122:	1d1c      	adds	r4, r3, #4
 8002124:	4615      	mov	r5, r2
 8002126:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002128:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800212a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800212e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002136:	7afa      	ldrb	r2, [r7, #11]
 8002138:	68f9      	ldr	r1, [r7, #12]
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	440b      	add	r3, r1
 800213e:	3318      	adds	r3, #24
 8002140:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	7afa      	ldrb	r2, [r7, #11]
 8002156:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	330a      	adds	r3, #10
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	1c5a      	adds	r2, r3, #1
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8002174:	2300      	movs	r3, #0
  }
 8002176:	4618      	mov	r0, r3
 8002178:	3710      	adds	r7, #16
 800217a:	46bd      	mov	sp, r7
 800217c:	bdb0      	pop	{r4, r5, r7, pc}
 800217e:	bf00      	nop
 8002180:	0800e884 	.word	0x0800e884
 8002184:	0800e8cc 	.word	0x0800e8cc
 8002188:	0800e91c 	.word	0x0800e91c

0800218c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	460b      	mov	r3, r1
 8002196:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8002198:	78fb      	ldrb	r3, [r7, #3]
 800219a:	2b20      	cmp	r3, #32
 800219c:	d101      	bne.n	80021a2 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 800219e:	2300      	movs	r3, #0
 80021a0:	e018      	b.n	80021d4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80021a2:	2300      	movs	r3, #0
 80021a4:	60fb      	str	r3, [r7, #12]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d210      	bcs.n	80021d2 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015b      	lsls	r3, r3, #5
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	4413      	add	r3, r2
 80021b8:	3304      	adds	r3, #4
 80021ba:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	695a      	ldr	r2, [r3, #20]
 80021c0:	78fb      	ldrb	r3, [r7, #3]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d101      	bne.n	80021ca <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	e004      	b.n	80021d4 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	3301      	adds	r3, #1
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	e7e9      	b.n	80021a6 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 80021d2:	2300      	movs	r3, #0
  }
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	4a05      	ldr	r2, [pc, #20]	; (8002200 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	601a      	str	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7ff f801 	bl	80011f8 <_ZN6tflite15MicroOpResolverD1Ev>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4618      	mov	r0, r3
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	080dc694 	.word	0x080dc694

08002204 <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff ffe7 	bl	80021e0 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8002212:	2138      	movs	r1, #56	; 0x38
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f009 fb7c 	bl	800b912 <_ZdlPvj>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d218      	bcs.n	800226e <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	015b      	lsls	r3, r3, #5
 8002240:	687a      	ldr	r2, [r7, #4]
 8002242:	4413      	add	r3, r2
 8002244:	3304      	adds	r3, #4
 8002246:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	695b      	ldr	r3, [r3, #20]
 800224c:	2b20      	cmp	r3, #32
 800224e:	d10a      	bne.n	8002266 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	6839      	ldr	r1, [r7, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fd ffba 	bl	80001d0 <strcmp>
 800225c:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
        return &registration;
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	e004      	b.n	8002270 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3301      	adds	r3, #1
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	e7e1      	b.n	8002232 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0xe>
    return nullptr;
 800226e:	2300      	movs	r3, #0
  }
 8002270:	4618      	mov	r0, r3
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	2b01      	cmp	r3, #1
 800228a:	d901      	bls.n	8002290 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 800228c:	f009 fc26 	bl	800badc <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8002290:	2300      	movs	r3, #0
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	429a      	cmp	r2, r3
 800229c:	d212      	bcs.n	80022c4 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	3328      	adds	r3, #40	; 0x28
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	78fa      	ldrb	r2, [r7, #3]
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d106      	bne.n	80022bc <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	330a      	adds	r3, #10
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	e004      	b.n	80022c6 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	3301      	adds	r3, #1
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	e7e7      	b.n	8002294 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 80022c4:	2300      	movs	r3, #0
  }
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b10      	ldr	r3, [pc, #64]	; (800231c <HAL_MspInit+0x4c>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022de:	4a0f      	ldr	r2, [pc, #60]	; (800231c <HAL_MspInit+0x4c>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022e4:	6453      	str	r3, [r2, #68]	; 0x44
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_MspInit+0x4c>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b09      	ldr	r3, [pc, #36]	; (800231c <HAL_MspInit+0x4c>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	4a08      	ldr	r2, [pc, #32]	; (800231c <HAL_MspInit+0x4c>)
 80022fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002300:	6413      	str	r3, [r2, #64]	; 0x40
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_MspInit+0x4c>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800230e:	2007      	movs	r0, #7
 8002310:	f001 f84a 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002314:	bf00      	nop
 8002316:	3708      	adds	r7, #8
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	40023800 	.word	0x40023800

08002320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b08c      	sub	sp, #48	; 0x30
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002328:	f107 031c 	add.w	r3, r7, #28
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	605a      	str	r2, [r3, #4]
 8002332:	609a      	str	r2, [r3, #8]
 8002334:	60da      	str	r2, [r3, #12]
 8002336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a36      	ldr	r2, [pc, #216]	; (8002418 <HAL_ADC_MspInit+0xf8>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d130      	bne.n	80023a4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
 8002346:	4b35      	ldr	r3, [pc, #212]	; (800241c <HAL_ADC_MspInit+0xfc>)
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	4a34      	ldr	r2, [pc, #208]	; (800241c <HAL_ADC_MspInit+0xfc>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6453      	str	r3, [r2, #68]	; 0x44
 8002352:	4b32      	ldr	r3, [pc, #200]	; (800241c <HAL_ADC_MspInit+0xfc>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235a:	61bb      	str	r3, [r7, #24]
 800235c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
 8002362:	4b2e      	ldr	r3, [pc, #184]	; (800241c <HAL_ADC_MspInit+0xfc>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	4a2d      	ldr	r2, [pc, #180]	; (800241c <HAL_ADC_MspInit+0xfc>)
 8002368:	f043 0302 	orr.w	r3, r3, #2
 800236c:	6313      	str	r3, [r2, #48]	; 0x30
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_ADC_MspInit+0xfc>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	f003 0302 	and.w	r3, r3, #2
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800237a:	2301      	movs	r3, #1
 800237c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800237e:	2303      	movs	r3, #3
 8002380:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002382:	2300      	movs	r3, #0
 8002384:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002386:	f107 031c 	add.w	r3, r7, #28
 800238a:	4619      	mov	r1, r3
 800238c:	4824      	ldr	r0, [pc, #144]	; (8002420 <HAL_ADC_MspInit+0x100>)
 800238e:	f001 f84d 	bl	800342c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002392:	2200      	movs	r2, #0
 8002394:	2100      	movs	r1, #0
 8002396:	2012      	movs	r0, #18
 8002398:	f001 f811 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800239c:	2012      	movs	r0, #18
 800239e:	f001 f82a 	bl	80033f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80023a2:	e034      	b.n	800240e <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a1e      	ldr	r2, [pc, #120]	; (8002424 <HAL_ADC_MspInit+0x104>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d12f      	bne.n	800240e <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	613b      	str	r3, [r7, #16]
 80023b2:	4b1a      	ldr	r3, [pc, #104]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b6:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023bc:	6453      	str	r3, [r2, #68]	; 0x44
 80023be:	4b17      	ldr	r3, [pc, #92]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023c6:	613b      	str	r3, [r7, #16]
 80023c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b13      	ldr	r3, [pc, #76]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a12      	ldr	r2, [pc, #72]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023d4:	f043 0302 	orr.w	r3, r3, #2
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b10      	ldr	r3, [pc, #64]	; (800241c <HAL_ADC_MspInit+0xfc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0302 	and.w	r3, r3, #2
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023e6:	2302      	movs	r3, #2
 80023e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80023ea:	2303      	movs	r3, #3
 80023ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ee:	2300      	movs	r3, #0
 80023f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f2:	f107 031c 	add.w	r3, r7, #28
 80023f6:	4619      	mov	r1, r3
 80023f8:	4809      	ldr	r0, [pc, #36]	; (8002420 <HAL_ADC_MspInit+0x100>)
 80023fa:	f001 f817 	bl	800342c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	2012      	movs	r0, #18
 8002404:	f000 ffdb 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002408:	2012      	movs	r0, #18
 800240a:	f000 fff4 	bl	80033f6 <HAL_NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3730      	adds	r7, #48	; 0x30
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40012000 	.word	0x40012000
 800241c:	40023800 	.word	0x40023800
 8002420:	40020400 	.word	0x40020400
 8002424:	40012100 	.word	0x40012100

08002428 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_TIM_Base_MspInit+0x80>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d116      	bne.n	8002468 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800243a:	2300      	movs	r3, #0
 800243c:	60fb      	str	r3, [r7, #12]
 800243e:	4b1b      	ldr	r3, [pc, #108]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	4a1a      	ldr	r2, [pc, #104]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 8002444:	f043 0301 	orr.w	r3, r3, #1
 8002448:	6453      	str	r3, [r2, #68]	; 0x44
 800244a:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002456:	2200      	movs	r2, #0
 8002458:	2100      	movs	r1, #0
 800245a:	2019      	movs	r0, #25
 800245c:	f000 ffaf 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002460:	2019      	movs	r0, #25
 8002462:	f000 ffc8 	bl	80033f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002466:	e01a      	b.n	800249e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a10      	ldr	r2, [pc, #64]	; (80024b0 <HAL_TIM_Base_MspInit+0x88>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d115      	bne.n	800249e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002472:	2300      	movs	r3, #0
 8002474:	60bb      	str	r3, [r7, #8]
 8002476:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	4a0c      	ldr	r2, [pc, #48]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 800247c:	f043 0302 	orr.w	r3, r3, #2
 8002480:	6453      	str	r3, [r2, #68]	; 0x44
 8002482:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_TIM_Base_MspInit+0x84>)
 8002484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	60bb      	str	r3, [r7, #8]
 800248c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	202c      	movs	r0, #44	; 0x2c
 8002494:	f000 ff93 	bl	80033be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002498:	202c      	movs	r0, #44	; 0x2c
 800249a:	f000 ffac 	bl	80033f6 <HAL_NVIC_EnableIRQ>
}
 800249e:	bf00      	nop
 80024a0:	3710      	adds	r7, #16
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b08a      	sub	sp, #40	; 0x28
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024bc:	f107 0314 	add.w	r3, r7, #20
 80024c0:	2200      	movs	r2, #0
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	605a      	str	r2, [r3, #4]
 80024c6:	609a      	str	r2, [r3, #8]
 80024c8:	60da      	str	r2, [r3, #12]
 80024ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	; (8002538 <HAL_UART_MspInit+0x84>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d12b      	bne.n	800252e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	4b18      	ldr	r3, [pc, #96]	; (800253c <HAL_UART_MspInit+0x88>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	4a17      	ldr	r2, [pc, #92]	; (800253c <HAL_UART_MspInit+0x88>)
 80024e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024e4:	6413      	str	r3, [r2, #64]	; 0x40
 80024e6:	4b15      	ldr	r3, [pc, #84]	; (800253c <HAL_UART_MspInit+0x88>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b11      	ldr	r3, [pc, #68]	; (800253c <HAL_UART_MspInit+0x88>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a10      	ldr	r2, [pc, #64]	; (800253c <HAL_UART_MspInit+0x88>)
 80024fc:	f043 0301 	orr.w	r3, r3, #1
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b0e      	ldr	r3, [pc, #56]	; (800253c <HAL_UART_MspInit+0x88>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800250e:	230c      	movs	r3, #12
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251a:	2303      	movs	r3, #3
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800251e:	2307      	movs	r3, #7
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4805      	ldr	r0, [pc, #20]	; (8002540 <HAL_UART_MspInit+0x8c>)
 800252a:	f000 ff7f 	bl	800342c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800252e:	bf00      	nop
 8002530:	3728      	adds	r7, #40	; 0x28
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40004400 	.word	0x40004400
 800253c:	40023800 	.word	0x40023800
 8002540:	40020000 	.word	0x40020000

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 f97c 	bl	800288c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800259c:	4803      	ldr	r0, [pc, #12]	; (80025ac <ADC_IRQHandler+0x14>)
 800259e:	f000 faa9 	bl	8002af4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80025a2:	4803      	ldr	r0, [pc, #12]	; (80025b0 <ADC_IRQHandler+0x18>)
 80025a4:	f000 faa6 	bl	8002af4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	2000022c 	.word	0x2000022c
 80025b0:	20000274 	.word	0x20000274

080025b4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80025ba:	f001 fd9c 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200002bc 	.word	0x200002bc

080025c8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80025cc:	4802      	ldr	r0, [pc, #8]	; (80025d8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80025ce:	f001 fd92 	bl	80040f6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80025d2:	bf00      	nop
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	200002fc 	.word	0x200002fc

080025dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
	return 1;
 80025e0:	2301      	movs	r3, #1
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <_kill>:

int _kill(int pid, int sig)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80025f6:	f009 fa9d 	bl	800bb34 <__errno>
 80025fa:	4602      	mov	r2, r0
 80025fc:	2316      	movs	r3, #22
 80025fe:	6013      	str	r3, [r2, #0]
	return -1;
 8002600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002604:	4618      	mov	r0, r3
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <_exit>:

void _exit (int status)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002614:	f04f 31ff 	mov.w	r1, #4294967295
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f7ff ffe7 	bl	80025ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800261e:	e7fe      	b.n	800261e <_exit+0x12>

08002620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b086      	sub	sp, #24
 8002624:	af00      	add	r7, sp, #0
 8002626:	60f8      	str	r0, [r7, #12]
 8002628:	60b9      	str	r1, [r7, #8]
 800262a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]
 8002630:	e00a      	b.n	8002648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002632:	f3af 8000 	nop.w
 8002636:	4601      	mov	r1, r0
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1c5a      	adds	r2, r3, #1
 800263c:	60ba      	str	r2, [r7, #8]
 800263e:	b2ca      	uxtb	r2, r1
 8002640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3301      	adds	r3, #1
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697a      	ldr	r2, [r7, #20]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	429a      	cmp	r2, r3
 800264e:	dbf0      	blt.n	8002632 <_read+0x12>
	}

return len;
 8002650:	687b      	ldr	r3, [r7, #4]
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b086      	sub	sp, #24
 800265e:	af00      	add	r7, sp, #0
 8002660:	60f8      	str	r0, [r7, #12]
 8002662:	60b9      	str	r1, [r7, #8]
 8002664:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	e009      	b.n	8002680 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3301      	adds	r3, #1
 800267e:	617b      	str	r3, [r7, #20]
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	429a      	cmp	r2, r3
 8002686:	dbf1      	blt.n	800266c <_write+0x12>
	}
	return len;
 8002688:	687b      	ldr	r3, [r7, #4]
}
 800268a:	4618      	mov	r0, r3
 800268c:	3718      	adds	r7, #24
 800268e:	46bd      	mov	sp, r7
 8002690:	bd80      	pop	{r7, pc}

08002692 <_close>:

int _close(int file)
{
 8002692:	b480      	push	{r7}
 8002694:	b083      	sub	sp, #12
 8002696:	af00      	add	r7, sp, #0
 8002698:	6078      	str	r0, [r7, #4]
	return -1;
 800269a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269e:	4618      	mov	r0, r3
 80026a0:	370c      	adds	r7, #12
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr

080026aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026aa:	b480      	push	{r7}
 80026ac:	b083      	sub	sp, #12
 80026ae:	af00      	add	r7, sp, #0
 80026b0:	6078      	str	r0, [r7, #4]
 80026b2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026ba:	605a      	str	r2, [r3, #4]
	return 0;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	370c      	adds	r7, #12
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <_isatty>:

int _isatty(int file)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
	return 1;
 80026d2:	2301      	movs	r3, #1
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
	return 0;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
	...

080026fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002704:	4a14      	ldr	r2, [pc, #80]	; (8002758 <_sbrk+0x5c>)
 8002706:	4b15      	ldr	r3, [pc, #84]	; (800275c <_sbrk+0x60>)
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002710:	4b13      	ldr	r3, [pc, #76]	; (8002760 <_sbrk+0x64>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002718:	4b11      	ldr	r3, [pc, #68]	; (8002760 <_sbrk+0x64>)
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <_sbrk+0x68>)
 800271c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271e:	4b10      	ldr	r3, [pc, #64]	; (8002760 <_sbrk+0x64>)
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4413      	add	r3, r2
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	429a      	cmp	r2, r3
 800272a:	d207      	bcs.n	800273c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800272c:	f009 fa02 	bl	800bb34 <__errno>
 8002730:	4602      	mov	r2, r0
 8002732:	230c      	movs	r3, #12
 8002734:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002736:	f04f 33ff 	mov.w	r3, #4294967295
 800273a:	e009      	b.n	8002750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800273c:	4b08      	ldr	r3, [pc, #32]	; (8002760 <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002742:	4b07      	ldr	r3, [pc, #28]	; (8002760 <_sbrk+0x64>)
 8002744:	681a      	ldr	r2, [r3, #0]
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4413      	add	r3, r2
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <_sbrk+0x64>)
 800274c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274e:	68fb      	ldr	r3, [r7, #12]
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20020000 	.word	0x20020000
 800275c:	00000400 	.word	0x00000400
 8002760:	20000e0c 	.word	0x20000e0c
 8002764:	20000eb8 	.word	0x20000eb8

08002768 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002768:	b480      	push	{r7}
 800276a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800276c:	4b08      	ldr	r3, [pc, #32]	; (8002790 <SystemInit+0x28>)
 800276e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002772:	4a07      	ldr	r2, [pc, #28]	; (8002790 <SystemInit+0x28>)
 8002774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800277c:	4b04      	ldr	r3, [pc, #16]	; (8002790 <SystemInit+0x28>)
 800277e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002782:	609a      	str	r2, [r3, #8]
#endif
}
 8002784:	bf00      	nop
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002794:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027cc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002798:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800279a:	e003      	b.n	80027a4 <LoopCopyDataInit>

0800279c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800279c:	4b0c      	ldr	r3, [pc, #48]	; (80027d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800279e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80027a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80027a2:	3104      	adds	r1, #4

080027a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80027a4:	480b      	ldr	r0, [pc, #44]	; (80027d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80027a6:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80027a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80027aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80027ac:	d3f6      	bcc.n	800279c <CopyDataInit>
  ldr  r2, =_sbss
 80027ae:	4a0b      	ldr	r2, [pc, #44]	; (80027dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80027b0:	e002      	b.n	80027b8 <LoopFillZerobss>

080027b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80027b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80027b4:	f842 3b04 	str.w	r3, [r2], #4

080027b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80027ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80027bc:	d3f9      	bcc.n	80027b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80027be:	f7ff ffd3 	bl	8002768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027c2:	f009 f9cf 	bl	800bb64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027c6:	f7fe fe85 	bl	80014d4 <main>
  bx  lr    
 80027ca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027cc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80027d0:	080dd5d8 	.word	0x080dd5d8
  ldr  r0, =_sdata
 80027d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80027d8:	2000020c 	.word	0x2000020c
  ldr  r2, =_sbss
 80027dc:	20000210 	.word	0x20000210
  ldr  r3, = _ebss
 80027e0:	20000eb4 	.word	0x20000eb4

080027e4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027e4:	e7fe      	b.n	80027e4 <CAN1_RX0_IRQHandler>
	...

080027e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027ec:	4b0e      	ldr	r3, [pc, #56]	; (8002828 <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0d      	ldr	r2, [pc, #52]	; (8002828 <HAL_Init+0x40>)
 80027f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027f8:	4b0b      	ldr	r3, [pc, #44]	; (8002828 <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a0a      	ldr	r2, [pc, #40]	; (8002828 <HAL_Init+0x40>)
 80027fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002802:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002804:	4b08      	ldr	r3, [pc, #32]	; (8002828 <HAL_Init+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a07      	ldr	r2, [pc, #28]	; (8002828 <HAL_Init+0x40>)
 800280a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800280e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002810:	2003      	movs	r0, #3
 8002812:	f000 fdc9 	bl	80033a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002816:	2000      	movs	r0, #0
 8002818:	f000 f808 	bl	800282c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800281c:	f7ff fd58 	bl	80022d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	40023c00 	.word	0x40023c00

0800282c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b082      	sub	sp, #8
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002834:	4b12      	ldr	r3, [pc, #72]	; (8002880 <HAL_InitTick+0x54>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b12      	ldr	r3, [pc, #72]	; (8002884 <HAL_InitTick+0x58>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002842:	fbb3 f3f1 	udiv	r3, r3, r1
 8002846:	fbb2 f3f3 	udiv	r3, r2, r3
 800284a:	4618      	mov	r0, r3
 800284c:	f000 fde1 	bl	8003412 <HAL_SYSTICK_Config>
 8002850:	4603      	mov	r3, r0
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e00e      	b.n	8002878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b0f      	cmp	r3, #15
 800285e:	d80a      	bhi.n	8002876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002860:	2200      	movs	r2, #0
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	f04f 30ff 	mov.w	r0, #4294967295
 8002868:	f000 fda9 	bl	80033be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800286c:	4a06      	ldr	r2, [pc, #24]	; (8002888 <HAL_InitTick+0x5c>)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	e000      	b.n	8002878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
}
 8002878:	4618      	mov	r0, r3
 800287a:	3708      	adds	r7, #8
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	2000000c 	.word	0x2000000c
 8002884:	20000014 	.word	0x20000014
 8002888:	20000010 	.word	0x20000010

0800288c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <HAL_IncTick+0x20>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	461a      	mov	r2, r3
 8002896:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x24>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4413      	add	r3, r2
 800289c:	4a04      	ldr	r2, [pc, #16]	; (80028b0 <HAL_IncTick+0x24>)
 800289e:	6013      	str	r3, [r2, #0]
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	20000014 	.word	0x20000014
 80028b0:	20000eac 	.word	0x20000eac

080028b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  return uwTick;
 80028b8:	4b03      	ldr	r3, [pc, #12]	; (80028c8 <HAL_GetTick+0x14>)
 80028ba:	681b      	ldr	r3, [r3, #0]
}
 80028bc:	4618      	mov	r0, r3
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000eac 	.word	0x20000eac

080028cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e033      	b.n	800294a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d109      	bne.n	80028fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f7ff fd18 	bl	8002320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002902:	f003 0310 	and.w	r3, r3, #16
 8002906:	2b00      	cmp	r3, #0
 8002908:	d118      	bne.n	800293c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002912:	f023 0302 	bic.w	r3, r3, #2
 8002916:	f043 0202 	orr.w	r2, r3, #2
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 fb6c 	bl	8002ffc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f023 0303 	bic.w	r3, r3, #3
 8002932:	f043 0201 	orr.w	r2, r3, #1
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	641a      	str	r2, [r3, #64]	; 0x40
 800293a:	e001      	b.n	8002940 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002948:	7bfb      	ldrb	r3, [r7, #15]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3710      	adds	r7, #16
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800295c:	2300      	movs	r3, #0
 800295e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_ADC_Start_IT+0x1a>
 800296a:	2302      	movs	r3, #2
 800296c:	e0b0      	b.n	8002ad0 <HAL_ADC_Start_IT+0x17c>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f003 0301 	and.w	r3, r3, #1
 8002980:	2b01      	cmp	r3, #1
 8002982:	d018      	beq.n	80029b6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f042 0201 	orr.w	r2, r2, #1
 8002992:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002994:	4b51      	ldr	r3, [pc, #324]	; (8002adc <HAL_ADC_Start_IT+0x188>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_ADC_Start_IT+0x18c>)
 800299a:	fba2 2303 	umull	r2, r3, r2, r3
 800299e:	0c9a      	lsrs	r2, r3, #18
 80029a0:	4613      	mov	r3, r2
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	4413      	add	r3, r2
 80029a6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f9      	bne.n	80029aa <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	f040 8084 	bne.w	8002ace <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d007      	beq.n	80029f8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029f0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a04:	d106      	bne.n	8002a14 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0a:	f023 0206 	bic.w	r2, r3, #6
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	645a      	str	r2, [r3, #68]	; 0x44
 8002a12:	e002      	b.n	8002a1a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a22:	4b30      	ldr	r3, [pc, #192]	; (8002ae4 <HAL_ADC_Start_IT+0x190>)
 8002a24:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a2e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	6812      	ldr	r2, [r2, #0]
 8002a3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a3e:	f043 0320 	orr.w	r3, r3, #32
 8002a42:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d12a      	bne.n	8002aa6 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a24      	ldr	r2, [pc, #144]	; (8002ae8 <HAL_ADC_Start_IT+0x194>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d015      	beq.n	8002a86 <HAL_ADC_Start_IT+0x132>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a23      	ldr	r2, [pc, #140]	; (8002aec <HAL_ADC_Start_IT+0x198>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d105      	bne.n	8002a70 <HAL_ADC_Start_IT+0x11c>
 8002a64:	4b1f      	ldr	r3, [pc, #124]	; (8002ae4 <HAL_ADC_Start_IT+0x190>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f003 031f 	and.w	r3, r3, #31
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00a      	beq.n	8002a86 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <HAL_ADC_Start_IT+0x19c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d129      	bne.n	8002ace <HAL_ADC_Start_IT+0x17a>
 8002a7a:	4b1a      	ldr	r3, [pc, #104]	; (8002ae4 <HAL_ADC_Start_IT+0x190>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f003 031f 	and.w	r3, r3, #31
 8002a82:	2b0f      	cmp	r3, #15
 8002a84:	d823      	bhi.n	8002ace <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d11c      	bne.n	8002ace <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	e013      	b.n	8002ace <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a0f      	ldr	r2, [pc, #60]	; (8002ae8 <HAL_ADC_Start_IT+0x194>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d10e      	bne.n	8002ace <HAL_ADC_Start_IT+0x17a>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	689b      	ldr	r3, [r3, #8]
 8002ab6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d107      	bne.n	8002ace <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002acc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8002ace:	2300      	movs	r3, #0
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr
 8002adc:	2000000c 	.word	0x2000000c
 8002ae0:	431bde83 	.word	0x431bde83
 8002ae4:	40012300 	.word	0x40012300
 8002ae8:	40012000 	.word	0x40012000
 8002aec:	40012100 	.word	0x40012100
 8002af0:	40012200 	.word	0x40012200

08002af4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b084      	sub	sp, #16
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	2300      	movs	r3, #0
 8002b02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	bf0c      	ite	eq
 8002b12:	2301      	moveq	r3, #1
 8002b14:	2300      	movne	r3, #0
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f003 0320 	and.w	r3, r3, #32
 8002b24:	2b20      	cmp	r3, #32
 8002b26:	bf0c      	ite	eq
 8002b28:	2301      	moveq	r3, #1
 8002b2a:	2300      	movne	r3, #0
 8002b2c:	b2db      	uxtb	r3, r3
 8002b2e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d049      	beq.n	8002bca <HAL_ADC_IRQHandler+0xd6>
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d046      	beq.n	8002bca <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d105      	bne.n	8002b54 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d12b      	bne.n	8002bba <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d127      	bne.n	8002bba <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d006      	beq.n	8002b86 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d119      	bne.n	8002bba <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0220 	bic.w	r2, r2, #32
 8002b94:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d105      	bne.n	8002bba <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f043 0201 	orr.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff f92a 	bl	8001e14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f06f 0212 	mvn.w	r2, #18
 8002bc8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	bf0c      	ite	eq
 8002bd8:	2301      	moveq	r3, #1
 8002bda:	2300      	movne	r3, #0
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	2b80      	cmp	r3, #128	; 0x80
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d057      	beq.n	8002cac <HAL_ADC_IRQHandler+0x1b8>
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d054      	beq.n	8002cac <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d105      	bne.n	8002c1a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c12:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d139      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c2e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d006      	beq.n	8002c44 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689b      	ldr	r3, [r3, #8]
 8002c3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d12b      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d124      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d11d      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d119      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	f043 0201 	orr.w	r2, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 faa9 	bl	80031f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 020c 	mvn.w	r2, #12
 8002caa:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 0301 	and.w	r3, r3, #1
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	bf0c      	ite	eq
 8002cba:	2301      	moveq	r3, #1
 8002cbc:	2300      	movne	r3, #0
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ccc:	2b40      	cmp	r3, #64	; 0x40
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d017      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x21a>
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d014      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 0301 	and.w	r3, r3, #1
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d10d      	bne.n	8002d0e <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f846 	bl	8002d90 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f06f 0201 	mvn.w	r2, #1
 8002d0c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b20      	cmp	r3, #32
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d015      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x27a>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d012      	beq.n	8002d6e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	f043 0202 	orr.w	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0220 	mvn.w	r2, #32
 8002d5c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f820 	bl	8002da4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f06f 0220 	mvn.w	r2, #32
 8002d6c:	601a      	str	r2, [r3, #0]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d76:	b480      	push	{r7}
 8002d78:	b083      	sub	sp, #12
 8002d7a:	af00      	add	r7, sp, #0
 8002d7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002dac:	bf00      	nop
 8002dae:	370c      	adds	r7, #12
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr

08002db8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b085      	sub	sp, #20
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d101      	bne.n	8002dd4 <HAL_ADC_ConfigChannel+0x1c>
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	e105      	b.n	8002fe0 <HAL_ADC_ConfigChannel+0x228>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b09      	cmp	r3, #9
 8002de2:	d925      	bls.n	8002e30 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	b29b      	uxth	r3, r3
 8002df0:	461a      	mov	r2, r3
 8002df2:	4613      	mov	r3, r2
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	4413      	add	r3, r2
 8002df8:	3b1e      	subs	r3, #30
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43da      	mvns	r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	400a      	ands	r2, r1
 8002e08:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68d9      	ldr	r1, [r3, #12]
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	689a      	ldr	r2, [r3, #8]
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	005b      	lsls	r3, r3, #1
 8002e20:	4403      	add	r3, r0
 8002e22:	3b1e      	subs	r3, #30
 8002e24:	409a      	lsls	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	e022      	b.n	8002e76 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6919      	ldr	r1, [r3, #16]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	4613      	mov	r3, r2
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	4413      	add	r3, r2
 8002e44:	2207      	movs	r2, #7
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43da      	mvns	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	400a      	ands	r2, r1
 8002e52:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	6919      	ldr	r1, [r3, #16]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	4618      	mov	r0, r3
 8002e66:	4603      	mov	r3, r0
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	4403      	add	r3, r0
 8002e6c:	409a      	lsls	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	430a      	orrs	r2, r1
 8002e74:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b06      	cmp	r3, #6
 8002e7c:	d824      	bhi.n	8002ec8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	3b05      	subs	r3, #5
 8002e90:	221f      	movs	r2, #31
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	43da      	mvns	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	400a      	ands	r2, r1
 8002e9e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	4618      	mov	r0, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	685a      	ldr	r2, [r3, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3b05      	subs	r3, #5
 8002eba:	fa00 f203 	lsl.w	r2, r0, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ec6:	e04c      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	2b0c      	cmp	r3, #12
 8002ece:	d824      	bhi.n	8002f1a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4413      	add	r3, r2
 8002ee0:	3b23      	subs	r3, #35	; 0x23
 8002ee2:	221f      	movs	r2, #31
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43da      	mvns	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	400a      	ands	r2, r1
 8002ef0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4618      	mov	r0, r3
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	4413      	add	r3, r2
 8002f0a:	3b23      	subs	r3, #35	; 0x23
 8002f0c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	631a      	str	r2, [r3, #48]	; 0x30
 8002f18:	e023      	b.n	8002f62 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	4613      	mov	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4413      	add	r3, r2
 8002f2a:	3b41      	subs	r3, #65	; 0x41
 8002f2c:	221f      	movs	r2, #31
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	43da      	mvns	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	400a      	ands	r2, r1
 8002f3a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	685a      	ldr	r2, [r3, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	4413      	add	r3, r2
 8002f54:	3b41      	subs	r3, #65	; 0x41
 8002f56:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_ADC_ConfigChannel+0x234>)
 8002f64:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a21      	ldr	r2, [pc, #132]	; (8002ff0 <HAL_ADC_ConfigChannel+0x238>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d109      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1cc>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b12      	cmp	r3, #18
 8002f76:	d105      	bne.n	8002f84 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a19      	ldr	r2, [pc, #100]	; (8002ff0 <HAL_ADC_ConfigChannel+0x238>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d123      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x21e>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b10      	cmp	r3, #16
 8002f94:	d003      	beq.n	8002f9e <HAL_ADC_ConfigChannel+0x1e6>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b11      	cmp	r3, #17
 8002f9c:	d11b      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2b10      	cmp	r3, #16
 8002fb0:	d111      	bne.n	8002fd6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002fb2:	4b10      	ldr	r3, [pc, #64]	; (8002ff4 <HAL_ADC_ConfigChannel+0x23c>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a10      	ldr	r2, [pc, #64]	; (8002ff8 <HAL_ADC_ConfigChannel+0x240>)
 8002fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fbc:	0c9a      	lsrs	r2, r3, #18
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc8:	e002      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f9      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	40012300 	.word	0x40012300
 8002ff0:	40012000 	.word	0x40012000
 8002ff4:	2000000c 	.word	0x2000000c
 8002ff8:	431bde83 	.word	0x431bde83

08002ffc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003004:	4b79      	ldr	r3, [pc, #484]	; (80031ec <ADC_Init+0x1f0>)
 8003006:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	431a      	orrs	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003030:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6859      	ldr	r1, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	691b      	ldr	r3, [r3, #16]
 800303c:	021a      	lsls	r2, r3, #8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	430a      	orrs	r2, r1
 8003044:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003054:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6859      	ldr	r1, [r3, #4]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	430a      	orrs	r2, r1
 8003066:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003076:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800308e:	4a58      	ldr	r2, [pc, #352]	; (80031f0 <ADC_Init+0x1f4>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d022      	beq.n	80030da <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689a      	ldr	r2, [r3, #8]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6899      	ldr	r1, [r3, #8]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	609a      	str	r2, [r3, #8]
 80030d8:	e00f      	b.n	80030fa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f022 0202 	bic.w	r2, r2, #2
 8003108:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6899      	ldr	r1, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	7e1b      	ldrb	r3, [r3, #24]
 8003114:	005a      	lsls	r2, r3, #1
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	430a      	orrs	r2, r1
 800311c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d01b      	beq.n	8003160 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003136:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685a      	ldr	r2, [r3, #4]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003146:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6859      	ldr	r1, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	3b01      	subs	r3, #1
 8003154:	035a      	lsls	r2, r3, #13
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	430a      	orrs	r2, r1
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	e007      	b.n	8003170 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685a      	ldr	r2, [r3, #4]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800316e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800317e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	3b01      	subs	r3, #1
 800318c:	051a      	lsls	r2, r3, #20
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80031a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031b2:	025a      	lsls	r2, r3, #9
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	430a      	orrs	r2, r1
 80031ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	689a      	ldr	r2, [r3, #8]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6899      	ldr	r1, [r3, #8]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	029a      	lsls	r2, r3, #10
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	609a      	str	r2, [r3, #8]
}
 80031e0:	bf00      	nop
 80031e2:	3714      	adds	r7, #20
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	40012300 	.word	0x40012300
 80031f0:	0f000001 	.word	0x0f000001

080031f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003218:	4b0c      	ldr	r3, [pc, #48]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800321e:	68ba      	ldr	r2, [r7, #8]
 8003220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003224:	4013      	ands	r3, r2
 8003226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003230:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003234:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003238:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800323a:	4a04      	ldr	r2, [pc, #16]	; (800324c <__NVIC_SetPriorityGrouping+0x44>)
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	60d3      	str	r3, [r2, #12]
}
 8003240:	bf00      	nop
 8003242:	3714      	adds	r7, #20
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003250:	b480      	push	{r7}
 8003252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003254:	4b04      	ldr	r3, [pc, #16]	; (8003268 <__NVIC_GetPriorityGrouping+0x18>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	0a1b      	lsrs	r3, r3, #8
 800325a:	f003 0307 	and.w	r3, r3, #7
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	e000ed00 	.word	0xe000ed00

0800326c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	4603      	mov	r3, r0
 8003274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800327a:	2b00      	cmp	r3, #0
 800327c:	db0b      	blt.n	8003296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800327e:	79fb      	ldrb	r3, [r7, #7]
 8003280:	f003 021f 	and.w	r2, r3, #31
 8003284:	4907      	ldr	r1, [pc, #28]	; (80032a4 <__NVIC_EnableIRQ+0x38>)
 8003286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328a:	095b      	lsrs	r3, r3, #5
 800328c:	2001      	movs	r0, #1
 800328e:	fa00 f202 	lsl.w	r2, r0, r2
 8003292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr
 80032a2:	bf00      	nop
 80032a4:	e000e100 	.word	0xe000e100

080032a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	6039      	str	r1, [r7, #0]
 80032b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	db0a      	blt.n	80032d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	b2da      	uxtb	r2, r3
 80032c0:	490c      	ldr	r1, [pc, #48]	; (80032f4 <__NVIC_SetPriority+0x4c>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	0112      	lsls	r2, r2, #4
 80032c8:	b2d2      	uxtb	r2, r2
 80032ca:	440b      	add	r3, r1
 80032cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032d0:	e00a      	b.n	80032e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	b2da      	uxtb	r2, r3
 80032d6:	4908      	ldr	r1, [pc, #32]	; (80032f8 <__NVIC_SetPriority+0x50>)
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	3b04      	subs	r3, #4
 80032e0:	0112      	lsls	r2, r2, #4
 80032e2:	b2d2      	uxtb	r2, r2
 80032e4:	440b      	add	r3, r1
 80032e6:	761a      	strb	r2, [r3, #24]
}
 80032e8:	bf00      	nop
 80032ea:	370c      	adds	r7, #12
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	e000e100 	.word	0xe000e100
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032fc:	b480      	push	{r7}
 80032fe:	b089      	sub	sp, #36	; 0x24
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f1c3 0307 	rsb	r3, r3, #7
 8003316:	2b04      	cmp	r3, #4
 8003318:	bf28      	it	cs
 800331a:	2304      	movcs	r3, #4
 800331c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	3304      	adds	r3, #4
 8003322:	2b06      	cmp	r3, #6
 8003324:	d902      	bls.n	800332c <NVIC_EncodePriority+0x30>
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	3b03      	subs	r3, #3
 800332a:	e000      	b.n	800332e <NVIC_EncodePriority+0x32>
 800332c:	2300      	movs	r3, #0
 800332e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003330:	f04f 32ff 	mov.w	r2, #4294967295
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	fa02 f303 	lsl.w	r3, r2, r3
 800333a:	43da      	mvns	r2, r3
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	401a      	ands	r2, r3
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003344:	f04f 31ff 	mov.w	r1, #4294967295
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	fa01 f303 	lsl.w	r3, r1, r3
 800334e:	43d9      	mvns	r1, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	4313      	orrs	r3, r2
         );
}
 8003356:	4618      	mov	r0, r3
 8003358:	3724      	adds	r7, #36	; 0x24
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
	...

08003364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3b01      	subs	r3, #1
 8003370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003374:	d301      	bcc.n	800337a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003376:	2301      	movs	r3, #1
 8003378:	e00f      	b.n	800339a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800337a:	4a0a      	ldr	r2, [pc, #40]	; (80033a4 <SysTick_Config+0x40>)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	3b01      	subs	r3, #1
 8003380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003382:	210f      	movs	r1, #15
 8003384:	f04f 30ff 	mov.w	r0, #4294967295
 8003388:	f7ff ff8e 	bl	80032a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800338c:	4b05      	ldr	r3, [pc, #20]	; (80033a4 <SysTick_Config+0x40>)
 800338e:	2200      	movs	r2, #0
 8003390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003392:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <SysTick_Config+0x40>)
 8003394:	2207      	movs	r2, #7
 8003396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003398:	2300      	movs	r3, #0
}
 800339a:	4618      	mov	r0, r3
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	e000e010 	.word	0xe000e010

080033a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f7ff ff29 	bl	8003208 <__NVIC_SetPriorityGrouping>
}
 80033b6:	bf00      	nop
 80033b8:	3708      	adds	r7, #8
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033be:	b580      	push	{r7, lr}
 80033c0:	b086      	sub	sp, #24
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	4603      	mov	r3, r0
 80033c6:	60b9      	str	r1, [r7, #8]
 80033c8:	607a      	str	r2, [r7, #4]
 80033ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033d0:	f7ff ff3e 	bl	8003250 <__NVIC_GetPriorityGrouping>
 80033d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	6978      	ldr	r0, [r7, #20]
 80033dc:	f7ff ff8e 	bl	80032fc <NVIC_EncodePriority>
 80033e0:	4602      	mov	r2, r0
 80033e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033e6:	4611      	mov	r1, r2
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff5d 	bl	80032a8 <__NVIC_SetPriority>
}
 80033ee:	bf00      	nop
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	4603      	mov	r3, r0
 80033fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff ff31 	bl	800326c <__NVIC_EnableIRQ>
}
 800340a:	bf00      	nop
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}

08003412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003412:	b580      	push	{r7, lr}
 8003414:	b082      	sub	sp, #8
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f7ff ffa2 	bl	8003364 <SysTick_Config>
 8003420:	4603      	mov	r3, r0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3708      	adds	r7, #8
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
	...

0800342c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800342c:	b480      	push	{r7}
 800342e:	b089      	sub	sp, #36	; 0x24
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800343a:	2300      	movs	r3, #0
 800343c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800343e:	2300      	movs	r3, #0
 8003440:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
 8003446:	e16b      	b.n	8003720 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003448:	2201      	movs	r2, #1
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	fa02 f303 	lsl.w	r3, r2, r3
 8003450:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4013      	ands	r3, r2
 800345a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	429a      	cmp	r2, r3
 8003462:	f040 815a 	bne.w	800371a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d00b      	beq.n	8003486 <HAL_GPIO_Init+0x5a>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	2b02      	cmp	r3, #2
 8003474:	d007      	beq.n	8003486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800347a:	2b11      	cmp	r3, #17
 800347c:	d003      	beq.n	8003486 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	2b12      	cmp	r3, #18
 8003484:	d130      	bne.n	80034e8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2203      	movs	r2, #3
 8003492:	fa02 f303 	lsl.w	r3, r2, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4013      	ands	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	68da      	ldr	r2, [r3, #12]
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034bc:	2201      	movs	r2, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	43db      	mvns	r3, r3
 80034c6:	69ba      	ldr	r2, [r7, #24]
 80034c8:	4013      	ands	r3, r2
 80034ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	091b      	lsrs	r3, r3, #4
 80034d2:	f003 0201 	and.w	r2, r3, #1
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	fa02 f303 	lsl.w	r3, r2, r3
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	4313      	orrs	r3, r2
 80034e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	2203      	movs	r2, #3
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43db      	mvns	r3, r3
 80034fa:	69ba      	ldr	r2, [r7, #24]
 80034fc:	4013      	ands	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	69fb      	ldr	r3, [r7, #28]
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	fa02 f303 	lsl.w	r3, r2, r3
 800350c:	69ba      	ldr	r2, [r7, #24]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	2b02      	cmp	r3, #2
 800351e:	d003      	beq.n	8003528 <HAL_GPIO_Init+0xfc>
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b12      	cmp	r3, #18
 8003526:	d123      	bne.n	8003570 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	08da      	lsrs	r2, r3, #3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3208      	adds	r2, #8
 8003530:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003534:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	f003 0307 	and.w	r3, r3, #7
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	220f      	movs	r2, #15
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43db      	mvns	r3, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4013      	ands	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	fa02 f303 	lsl.w	r3, r2, r3
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003562:	69fb      	ldr	r3, [r7, #28]
 8003564:	08da      	lsrs	r2, r3, #3
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	3208      	adds	r2, #8
 800356a:	69b9      	ldr	r1, [r7, #24]
 800356c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f003 0203 	and.w	r2, r3, #3
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	005b      	lsls	r3, r3, #1
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	69ba      	ldr	r2, [r7, #24]
 80035a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	f000 80b4 	beq.w	800371a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035b2:	2300      	movs	r3, #0
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	4b5f      	ldr	r3, [pc, #380]	; (8003734 <HAL_GPIO_Init+0x308>)
 80035b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ba:	4a5e      	ldr	r2, [pc, #376]	; (8003734 <HAL_GPIO_Init+0x308>)
 80035bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035c0:	6453      	str	r3, [r2, #68]	; 0x44
 80035c2:	4b5c      	ldr	r3, [pc, #368]	; (8003734 <HAL_GPIO_Init+0x308>)
 80035c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ca:	60fb      	str	r3, [r7, #12]
 80035cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035ce:	4a5a      	ldr	r2, [pc, #360]	; (8003738 <HAL_GPIO_Init+0x30c>)
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	3302      	adds	r3, #2
 80035d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	220f      	movs	r2, #15
 80035e6:	fa02 f303 	lsl.w	r3, r2, r3
 80035ea:	43db      	mvns	r3, r3
 80035ec:	69ba      	ldr	r2, [r7, #24]
 80035ee:	4013      	ands	r3, r2
 80035f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a51      	ldr	r2, [pc, #324]	; (800373c <HAL_GPIO_Init+0x310>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d02b      	beq.n	8003652 <HAL_GPIO_Init+0x226>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a50      	ldr	r2, [pc, #320]	; (8003740 <HAL_GPIO_Init+0x314>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d025      	beq.n	800364e <HAL_GPIO_Init+0x222>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a4f      	ldr	r2, [pc, #316]	; (8003744 <HAL_GPIO_Init+0x318>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01f      	beq.n	800364a <HAL_GPIO_Init+0x21e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a4e      	ldr	r2, [pc, #312]	; (8003748 <HAL_GPIO_Init+0x31c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d019      	beq.n	8003646 <HAL_GPIO_Init+0x21a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a4d      	ldr	r2, [pc, #308]	; (800374c <HAL_GPIO_Init+0x320>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d013      	beq.n	8003642 <HAL_GPIO_Init+0x216>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a4c      	ldr	r2, [pc, #304]	; (8003750 <HAL_GPIO_Init+0x324>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d00d      	beq.n	800363e <HAL_GPIO_Init+0x212>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a4b      	ldr	r2, [pc, #300]	; (8003754 <HAL_GPIO_Init+0x328>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d007      	beq.n	800363a <HAL_GPIO_Init+0x20e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a4a      	ldr	r2, [pc, #296]	; (8003758 <HAL_GPIO_Init+0x32c>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d101      	bne.n	8003636 <HAL_GPIO_Init+0x20a>
 8003632:	2307      	movs	r3, #7
 8003634:	e00e      	b.n	8003654 <HAL_GPIO_Init+0x228>
 8003636:	2308      	movs	r3, #8
 8003638:	e00c      	b.n	8003654 <HAL_GPIO_Init+0x228>
 800363a:	2306      	movs	r3, #6
 800363c:	e00a      	b.n	8003654 <HAL_GPIO_Init+0x228>
 800363e:	2305      	movs	r3, #5
 8003640:	e008      	b.n	8003654 <HAL_GPIO_Init+0x228>
 8003642:	2304      	movs	r3, #4
 8003644:	e006      	b.n	8003654 <HAL_GPIO_Init+0x228>
 8003646:	2303      	movs	r3, #3
 8003648:	e004      	b.n	8003654 <HAL_GPIO_Init+0x228>
 800364a:	2302      	movs	r3, #2
 800364c:	e002      	b.n	8003654 <HAL_GPIO_Init+0x228>
 800364e:	2301      	movs	r3, #1
 8003650:	e000      	b.n	8003654 <HAL_GPIO_Init+0x228>
 8003652:	2300      	movs	r3, #0
 8003654:	69fa      	ldr	r2, [r7, #28]
 8003656:	f002 0203 	and.w	r2, r2, #3
 800365a:	0092      	lsls	r2, r2, #2
 800365c:	4093      	lsls	r3, r2
 800365e:	69ba      	ldr	r2, [r7, #24]
 8003660:	4313      	orrs	r3, r2
 8003662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003664:	4934      	ldr	r1, [pc, #208]	; (8003738 <HAL_GPIO_Init+0x30c>)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	089b      	lsrs	r3, r3, #2
 800366a:	3302      	adds	r3, #2
 800366c:	69ba      	ldr	r2, [r7, #24]
 800366e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003672:	4b3a      	ldr	r3, [pc, #232]	; (800375c <HAL_GPIO_Init+0x330>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	43db      	mvns	r3, r3
 800367c:	69ba      	ldr	r2, [r7, #24]
 800367e:	4013      	ands	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d003      	beq.n	8003696 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003696:	4a31      	ldr	r2, [pc, #196]	; (800375c <HAL_GPIO_Init+0x330>)
 8003698:	69bb      	ldr	r3, [r7, #24]
 800369a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800369c:	4b2f      	ldr	r3, [pc, #188]	; (800375c <HAL_GPIO_Init+0x330>)
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	69ba      	ldr	r2, [r7, #24]
 80036a8:	4013      	ands	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d003      	beq.n	80036c0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036c0:	4a26      	ldr	r2, [pc, #152]	; (800375c <HAL_GPIO_Init+0x330>)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036c6:	4b25      	ldr	r3, [pc, #148]	; (800375c <HAL_GPIO_Init+0x330>)
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	43db      	mvns	r3, r3
 80036d0:	69ba      	ldr	r2, [r7, #24]
 80036d2:	4013      	ands	r3, r2
 80036d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d003      	beq.n	80036ea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ea:	4a1c      	ldr	r2, [pc, #112]	; (800375c <HAL_GPIO_Init+0x330>)
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f0:	4b1a      	ldr	r3, [pc, #104]	; (800375c <HAL_GPIO_Init+0x330>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	43db      	mvns	r3, r3
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4013      	ands	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003708:	2b00      	cmp	r3, #0
 800370a:	d003      	beq.n	8003714 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003714:	4a11      	ldr	r2, [pc, #68]	; (800375c <HAL_GPIO_Init+0x330>)
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	3301      	adds	r3, #1
 800371e:	61fb      	str	r3, [r7, #28]
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	2b0f      	cmp	r3, #15
 8003724:	f67f ae90 	bls.w	8003448 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003728:	bf00      	nop
 800372a:	3724      	adds	r7, #36	; 0x24
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	40023800 	.word	0x40023800
 8003738:	40013800 	.word	0x40013800
 800373c:	40020000 	.word	0x40020000
 8003740:	40020400 	.word	0x40020400
 8003744:	40020800 	.word	0x40020800
 8003748:	40020c00 	.word	0x40020c00
 800374c:	40021000 	.word	0x40021000
 8003750:	40021400 	.word	0x40021400
 8003754:	40021800 	.word	0x40021800
 8003758:	40021c00 	.word	0x40021c00
 800375c:	40013c00 	.word	0x40013c00

08003760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	460b      	mov	r3, r1
 800376a:	807b      	strh	r3, [r7, #2]
 800376c:	4613      	mov	r3, r2
 800376e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003770:	787b      	ldrb	r3, [r7, #1]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d003      	beq.n	800377e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003776:	887a      	ldrh	r2, [r7, #2]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800377c:	e003      	b.n	8003786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800377e:	887b      	ldrh	r3, [r7, #2]
 8003780:	041a      	lsls	r2, r3, #16
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	619a      	str	r2, [r3, #24]
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
	...

08003794 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	e25b      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d075      	beq.n	800389e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b2:	4ba3      	ldr	r3, [pc, #652]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d00c      	beq.n	80037d8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037be:	4ba0      	ldr	r3, [pc, #640]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d112      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ca:	4b9d      	ldr	r3, [pc, #628]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037d8:	4b99      	ldr	r3, [pc, #612]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d05b      	beq.n	800389c <HAL_RCC_OscConfig+0x108>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d157      	bne.n	800389c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e236      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037f8:	d106      	bne.n	8003808 <HAL_RCC_OscConfig+0x74>
 80037fa:	4b91      	ldr	r3, [pc, #580]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a90      	ldr	r2, [pc, #576]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0x98>
 8003812:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a8a      	ldr	r2, [pc, #552]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a87      	ldr	r2, [pc, #540]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xb0>
 800382c:	4b84      	ldr	r3, [pc, #528]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a83      	ldr	r2, [pc, #524]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a80      	ldr	r2, [pc, #512]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003842:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7ff f832 	bl	80028b4 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003854:	f7ff f82e 	bl	80028b4 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	; 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e1fb      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b76      	ldr	r3, [pc, #472]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xc0>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7ff f81e 	bl	80028b4 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800387c:	f7ff f81a 	bl	80028b4 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	; 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1e7      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b6c      	ldr	r3, [pc, #432]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0xe8>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038aa:	4b65      	ldr	r3, [pc, #404]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038b6:	4b62      	ldr	r3, [pc, #392]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1bb      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b56      	ldr	r3, [pc, #344]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4952      	ldr	r1, [pc, #328]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	68db      	ldr	r3, [r3, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_RCC_OscConfig+0x2b0>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390a:	f7fe ffd3 	bl	80028b4 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe ffcf 	bl	80028b4 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e19c      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b46      	ldr	r3, [pc, #280]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4940      	ldr	r1, [pc, #256]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b3f      	ldr	r3, [pc, #252]	; (8003a44 <HAL_RCC_OscConfig+0x2b0>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800394c:	f7fe ffb2 	bl	80028b4 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe ffae 	bl	80028b4 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e17b      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d030      	beq.n	80039e0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d016      	beq.n	80039b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b30      	ldr	r3, [pc, #192]	; (8003a48 <HAL_RCC_OscConfig+0x2b4>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800398c:	f7fe ff92 	bl	80028b4 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe ff8e 	bl	80028b4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e15b      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80039a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x200>
 80039b2:	e015      	b.n	80039e0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <HAL_RCC_OscConfig+0x2b4>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ba:	f7fe ff7b 	bl	80028b4 <HAL_GetTick>
 80039be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c0:	e008      	b.n	80039d4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c2:	f7fe ff77 	bl	80028b4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d901      	bls.n	80039d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e144      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d4:	4b1a      	ldr	r3, [pc, #104]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80039d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039d8:	f003 0302 	and.w	r3, r3, #2
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1f0      	bne.n	80039c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0304 	and.w	r3, r3, #4
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f000 80a0 	beq.w	8003b2e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b13      	ldr	r3, [pc, #76]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 80039f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d10f      	bne.n	8003a1e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60bb      	str	r3, [r7, #8]
 8003a02:	4b0f      	ldr	r3, [pc, #60]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	4a0e      	ldr	r2, [pc, #56]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0e:	4b0c      	ldr	r3, [pc, #48]	; (8003a40 <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a16:	60bb      	str	r3, [r7, #8]
 8003a18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <HAL_RCC_OscConfig+0x2b8>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d121      	bne.n	8003a6e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <HAL_RCC_OscConfig+0x2b8>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a07      	ldr	r2, [pc, #28]	; (8003a4c <HAL_RCC_OscConfig+0x2b8>)
 8003a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a36:	f7fe ff3d 	bl	80028b4 <HAL_GetTick>
 8003a3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a3c:	e011      	b.n	8003a62 <HAL_RCC_OscConfig+0x2ce>
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800
 8003a44:	42470000 	.word	0x42470000
 8003a48:	42470e80 	.word	0x42470e80
 8003a4c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a50:	f7fe ff30 	bl	80028b4 <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e0fd      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a62:	4b81      	ldr	r3, [pc, #516]	; (8003c68 <HAL_RCC_OscConfig+0x4d4>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d0f0      	beq.n	8003a50 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d106      	bne.n	8003a84 <HAL_RCC_OscConfig+0x2f0>
 8003a76:	4b7d      	ldr	r3, [pc, #500]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7a:	4a7c      	ldr	r2, [pc, #496]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6713      	str	r3, [r2, #112]	; 0x70
 8003a82:	e01c      	b.n	8003abe <HAL_RCC_OscConfig+0x32a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b05      	cmp	r3, #5
 8003a8a:	d10c      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x312>
 8003a8c:	4b77      	ldr	r3, [pc, #476]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	4a76      	ldr	r2, [pc, #472]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a92:	f043 0304 	orr.w	r3, r3, #4
 8003a96:	6713      	str	r3, [r2, #112]	; 0x70
 8003a98:	4b74      	ldr	r3, [pc, #464]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	4a73      	ldr	r2, [pc, #460]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003a9e:	f043 0301 	orr.w	r3, r3, #1
 8003aa2:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa4:	e00b      	b.n	8003abe <HAL_RCC_OscConfig+0x32a>
 8003aa6:	4b71      	ldr	r3, [pc, #452]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aaa:	4a70      	ldr	r2, [pc, #448]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003aac:	f023 0301 	bic.w	r3, r3, #1
 8003ab0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab2:	4b6e      	ldr	r3, [pc, #440]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ab6:	4a6d      	ldr	r2, [pc, #436]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d015      	beq.n	8003af2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac6:	f7fe fef5 	bl	80028b4 <HAL_GetTick>
 8003aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003acc:	e00a      	b.n	8003ae4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ace:	f7fe fef1 	bl	80028b4 <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d901      	bls.n	8003ae4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ae0:	2303      	movs	r3, #3
 8003ae2:	e0bc      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae4:	4b61      	ldr	r3, [pc, #388]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d0ee      	beq.n	8003ace <HAL_RCC_OscConfig+0x33a>
 8003af0:	e014      	b.n	8003b1c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af2:	f7fe fedf 	bl	80028b4 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003af8:	e00a      	b.n	8003b10 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afa:	f7fe fedb 	bl	80028b4 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0a6      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b10:	4b56      	ldr	r3, [pc, #344]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1ee      	bne.n	8003afa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b22:	4b52      	ldr	r3, [pc, #328]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a51      	ldr	r2, [pc, #324]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	f000 8092 	beq.w	8003c5c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b38:	4b4c      	ldr	r3, [pc, #304]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f003 030c 	and.w	r3, r3, #12
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d05c      	beq.n	8003bfe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d141      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4c:	4b48      	ldr	r3, [pc, #288]	; (8003c70 <HAL_RCC_OscConfig+0x4dc>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b52:	f7fe feaf 	bl	80028b4 <HAL_GetTick>
 8003b56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5a:	f7fe feab 	bl	80028b4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e078      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6c:	4b3f      	ldr	r3, [pc, #252]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	69da      	ldr	r2, [r3, #28]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	019b      	lsls	r3, r3, #6
 8003b88:	431a      	orrs	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	3b01      	subs	r3, #1
 8003b92:	041b      	lsls	r3, r3, #16
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	4933      	ldr	r1, [pc, #204]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba2:	4b33      	ldr	r3, [pc, #204]	; (8003c70 <HAL_RCC_OscConfig+0x4dc>)
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ba8:	f7fe fe84 	bl	80028b4 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb0:	f7fe fe80 	bl	80028b4 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e04d      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc2:	4b2a      	ldr	r3, [pc, #168]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d0f0      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x41c>
 8003bce:	e045      	b.n	8003c5c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd0:	4b27      	ldr	r3, [pc, #156]	; (8003c70 <HAL_RCC_OscConfig+0x4dc>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7fe fe6d 	bl	80028b4 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bde:	f7fe fe69 	bl	80028b4 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e036      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf0:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d1f0      	bne.n	8003bde <HAL_RCC_OscConfig+0x44a>
 8003bfc:	e02e      	b.n	8003c5c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	699b      	ldr	r3, [r3, #24]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d101      	bne.n	8003c0a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e029      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_RCC_OscConfig+0x4d8>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d11c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d115      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c2c:	68fa      	ldr	r2, [r7, #12]
 8003c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c32:	4013      	ands	r3, r2
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d10d      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d106      	bne.n	8003c58 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d001      	beq.n	8003c5c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e000      	b.n	8003c5e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	42470060 	.word	0x42470060

08003c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0cc      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b68      	ldr	r3, [pc, #416]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 030f 	and.w	r3, r3, #15
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d90c      	bls.n	8003cb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b65      	ldr	r3, [pc, #404]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	b2d2      	uxtb	r2, r2
 8003c9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c9e:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f003 030f 	and.w	r3, r3, #15
 8003ca6:	683a      	ldr	r2, [r7, #0]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d001      	beq.n	8003cb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e0b8      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d020      	beq.n	8003cfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f003 0304 	and.w	r3, r3, #4
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d005      	beq.n	8003cd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	4a58      	ldr	r2, [pc, #352]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003cd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f003 0308 	and.w	r3, r3, #8
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d005      	beq.n	8003cec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce0:	4b53      	ldr	r3, [pc, #332]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	4a52      	ldr	r2, [pc, #328]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003ce6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003cea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cec:	4b50      	ldr	r3, [pc, #320]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	494d      	ldr	r1, [pc, #308]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0301 	and.w	r3, r3, #1
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d044      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d107      	bne.n	8003d22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d12:	4b47      	ldr	r3, [pc, #284]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d119      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e07f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d003      	beq.n	8003d32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d2e:	2b03      	cmp	r3, #3
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	4b3f      	ldr	r3, [pc, #252]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e06f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b3b      	ldr	r3, [pc, #236]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e067      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d52:	4b37      	ldr	r3, [pc, #220]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d54:	689b      	ldr	r3, [r3, #8]
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4934      	ldr	r1, [pc, #208]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe fda6 	bl	80028b4 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6c:	f7fe fda2 	bl	80028b4 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e04f      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f003 020c 	and.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d1eb      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 030f 	and.w	r3, r3, #15
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d20c      	bcs.n	8003dbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b22      	ldr	r3, [pc, #136]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003daa:	4b20      	ldr	r3, [pc, #128]	; (8003e2c <HAL_RCC_ClockConfig+0x1b8>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d001      	beq.n	8003dbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e032      	b.n	8003e22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d008      	beq.n	8003dda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	4916      	ldr	r1, [pc, #88]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d009      	beq.n	8003dfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003de6:	4b12      	ldr	r3, [pc, #72]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	691b      	ldr	r3, [r3, #16]
 8003df2:	00db      	lsls	r3, r3, #3
 8003df4:	490e      	ldr	r1, [pc, #56]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003dfa:	f000 f821 	bl	8003e40 <HAL_RCC_GetSysClockFreq>
 8003dfe:	4601      	mov	r1, r0
 8003e00:	4b0b      	ldr	r3, [pc, #44]	; (8003e30 <HAL_RCC_ClockConfig+0x1bc>)
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	091b      	lsrs	r3, r3, #4
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a0a      	ldr	r2, [pc, #40]	; (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	fa21 f303 	lsr.w	r3, r1, r3
 8003e12:	4a09      	ldr	r2, [pc, #36]	; (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fd06 	bl	800282c <HAL_InitTick>

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40023c00 	.word	0x40023c00
 8003e30:	40023800 	.word	0x40023800
 8003e34:	080dc720 	.word	0x080dc720
 8003e38:	2000000c 	.word	0x2000000c
 8003e3c:	20000010 	.word	0x20000010

08003e40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e42:	b085      	sub	sp, #20
 8003e44:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 030c 	and.w	r3, r3, #12
 8003e5e:	2b04      	cmp	r3, #4
 8003e60:	d007      	beq.n	8003e72 <HAL_RCC_GetSysClockFreq+0x32>
 8003e62:	2b08      	cmp	r3, #8
 8003e64:	d008      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x38>
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f040 80b4 	bne.w	8003fd4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e6e:	60bb      	str	r3, [r7, #8]
       break;
 8003e70:	e0b3      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e72:	4b5e      	ldr	r3, [pc, #376]	; (8003fec <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e74:	60bb      	str	r3, [r7, #8]
      break;
 8003e76:	e0b0      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e78:	4b5a      	ldr	r3, [pc, #360]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e80:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e82:	4b58      	ldr	r3, [pc, #352]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d04a      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e8e:	4b55      	ldr	r3, [pc, #340]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	099b      	lsrs	r3, r3, #6
 8003e94:	f04f 0400 	mov.w	r4, #0
 8003e98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e9c:	f04f 0200 	mov.w	r2, #0
 8003ea0:	ea03 0501 	and.w	r5, r3, r1
 8003ea4:	ea04 0602 	and.w	r6, r4, r2
 8003ea8:	4629      	mov	r1, r5
 8003eaa:	4632      	mov	r2, r6
 8003eac:	f04f 0300 	mov.w	r3, #0
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	0154      	lsls	r4, r2, #5
 8003eb6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003eba:	014b      	lsls	r3, r1, #5
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4622      	mov	r2, r4
 8003ec0:	1b49      	subs	r1, r1, r5
 8003ec2:	eb62 0206 	sbc.w	r2, r2, r6
 8003ec6:	f04f 0300 	mov.w	r3, #0
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	0194      	lsls	r4, r2, #6
 8003ed0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003ed4:	018b      	lsls	r3, r1, #6
 8003ed6:	1a5b      	subs	r3, r3, r1
 8003ed8:	eb64 0402 	sbc.w	r4, r4, r2
 8003edc:	f04f 0100 	mov.w	r1, #0
 8003ee0:	f04f 0200 	mov.w	r2, #0
 8003ee4:	00e2      	lsls	r2, r4, #3
 8003ee6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003eea:	00d9      	lsls	r1, r3, #3
 8003eec:	460b      	mov	r3, r1
 8003eee:	4614      	mov	r4, r2
 8003ef0:	195b      	adds	r3, r3, r5
 8003ef2:	eb44 0406 	adc.w	r4, r4, r6
 8003ef6:	f04f 0100 	mov.w	r1, #0
 8003efa:	f04f 0200 	mov.w	r2, #0
 8003efe:	0262      	lsls	r2, r4, #9
 8003f00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003f04:	0259      	lsls	r1, r3, #9
 8003f06:	460b      	mov	r3, r1
 8003f08:	4614      	mov	r4, r2
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	4621      	mov	r1, r4
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f04f 0400 	mov.w	r4, #0
 8003f14:	461a      	mov	r2, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	f7fc fea6 	bl	8000c68 <__aeabi_uldivmod>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	460c      	mov	r4, r1
 8003f20:	60fb      	str	r3, [r7, #12]
 8003f22:	e049      	b.n	8003fb8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f24:	4b2f      	ldr	r3, [pc, #188]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	099b      	lsrs	r3, r3, #6
 8003f2a:	f04f 0400 	mov.w	r4, #0
 8003f2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003f32:	f04f 0200 	mov.w	r2, #0
 8003f36:	ea03 0501 	and.w	r5, r3, r1
 8003f3a:	ea04 0602 	and.w	r6, r4, r2
 8003f3e:	4629      	mov	r1, r5
 8003f40:	4632      	mov	r2, r6
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	0154      	lsls	r4, r2, #5
 8003f4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003f50:	014b      	lsls	r3, r1, #5
 8003f52:	4619      	mov	r1, r3
 8003f54:	4622      	mov	r2, r4
 8003f56:	1b49      	subs	r1, r1, r5
 8003f58:	eb62 0206 	sbc.w	r2, r2, r6
 8003f5c:	f04f 0300 	mov.w	r3, #0
 8003f60:	f04f 0400 	mov.w	r4, #0
 8003f64:	0194      	lsls	r4, r2, #6
 8003f66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f6a:	018b      	lsls	r3, r1, #6
 8003f6c:	1a5b      	subs	r3, r3, r1
 8003f6e:	eb64 0402 	sbc.w	r4, r4, r2
 8003f72:	f04f 0100 	mov.w	r1, #0
 8003f76:	f04f 0200 	mov.w	r2, #0
 8003f7a:	00e2      	lsls	r2, r4, #3
 8003f7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f80:	00d9      	lsls	r1, r3, #3
 8003f82:	460b      	mov	r3, r1
 8003f84:	4614      	mov	r4, r2
 8003f86:	195b      	adds	r3, r3, r5
 8003f88:	eb44 0406 	adc.w	r4, r4, r6
 8003f8c:	f04f 0100 	mov.w	r1, #0
 8003f90:	f04f 0200 	mov.w	r2, #0
 8003f94:	02a2      	lsls	r2, r4, #10
 8003f96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f9a:	0299      	lsls	r1, r3, #10
 8003f9c:	460b      	mov	r3, r1
 8003f9e:	4614      	mov	r4, r2
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f04f 0400 	mov.w	r4, #0
 8003faa:	461a      	mov	r2, r3
 8003fac:	4623      	mov	r3, r4
 8003fae:	f7fc fe5b 	bl	8000c68 <__aeabi_uldivmod>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	460c      	mov	r4, r1
 8003fb6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003fb8:	4b0a      	ldr	r3, [pc, #40]	; (8003fe4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	0c1b      	lsrs	r3, r3, #16
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fd0:	60bb      	str	r3, [r7, #8]
      break;
 8003fd2:	e002      	b.n	8003fda <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003fd4:	4b04      	ldr	r3, [pc, #16]	; (8003fe8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003fd6:	60bb      	str	r3, [r7, #8]
      break;
 8003fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fda:	68bb      	ldr	r3, [r7, #8]
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003fe4:	40023800 	.word	0x40023800
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	007a1200 	.word	0x007a1200

08003ff0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ff4:	4b03      	ldr	r3, [pc, #12]	; (8004004 <HAL_RCC_GetHCLKFreq+0x14>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop
 8004004:	2000000c 	.word	0x2000000c

08004008 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800400c:	f7ff fff0 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004010:	4601      	mov	r1, r0
 8004012:	4b05      	ldr	r3, [pc, #20]	; (8004028 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	0a9b      	lsrs	r3, r3, #10
 8004018:	f003 0307 	and.w	r3, r3, #7
 800401c:	4a03      	ldr	r2, [pc, #12]	; (800402c <HAL_RCC_GetPCLK1Freq+0x24>)
 800401e:	5cd3      	ldrb	r3, [r2, r3]
 8004020:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004024:	4618      	mov	r0, r3
 8004026:	bd80      	pop	{r7, pc}
 8004028:	40023800 	.word	0x40023800
 800402c:	080dc730 	.word	0x080dc730

08004030 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004034:	f7ff ffdc 	bl	8003ff0 <HAL_RCC_GetHCLKFreq>
 8004038:	4601      	mov	r1, r0
 800403a:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCC_GetPCLK2Freq+0x20>)
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	0b5b      	lsrs	r3, r3, #13
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	4a03      	ldr	r2, [pc, #12]	; (8004054 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004046:	5cd3      	ldrb	r3, [r2, r3]
 8004048:	fa21 f303 	lsr.w	r3, r1, r3
}
 800404c:	4618      	mov	r0, r3
 800404e:	bd80      	pop	{r7, pc}
 8004050:	40023800 	.word	0x40023800
 8004054:	080dc730 	.word	0x080dc730

08004058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e01d      	b.n	80040a6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fe f9d2 	bl	8002428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2202      	movs	r2, #2
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f000 fa14 	bl	80044c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3708      	adds	r7, #8
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040ae:	b480      	push	{r7}
 80040b0:	b085      	sub	sp, #20
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68da      	ldr	r2, [r3, #12]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0201 	orr.w	r2, r2, #1
 80040c4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	f003 0307 	and.w	r3, r3, #7
 80040d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2b06      	cmp	r3, #6
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f042 0201 	orr.w	r2, r2, #1
 80040e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3714      	adds	r7, #20
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b082      	sub	sp, #8
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691b      	ldr	r3, [r3, #16]
 8004104:	f003 0302 	and.w	r3, r3, #2
 8004108:	2b02      	cmp	r3, #2
 800410a:	d122      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	d11b      	bne.n	8004152 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f06f 0202 	mvn.w	r2, #2
 8004122:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	f003 0303 	and.w	r3, r3, #3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 f9a5 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 800413e:	e005      	b.n	800414c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f997 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f000 f9a8 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d122      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	f003 0304 	and.w	r3, r3, #4
 800416a:	2b04      	cmp	r3, #4
 800416c:	d11b      	bne.n	80041a6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f06f 0204 	mvn.w	r2, #4
 8004176:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004188:	2b00      	cmp	r3, #0
 800418a:	d003      	beq.n	8004194 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 f97b 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 8004192:	e005      	b.n	80041a0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f96d 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f97e 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b08      	cmp	r3, #8
 80041b2:	d122      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11b      	bne.n	80041fa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f06f 0208 	mvn.w	r2, #8
 80041ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2204      	movs	r2, #4
 80041d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f003 0303 	and.w	r3, r3, #3
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d003      	beq.n	80041e8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f951 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 80041e6:	e005      	b.n	80041f4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f000 f943 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 f954 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	f003 0310 	and.w	r3, r3, #16
 8004204:	2b10      	cmp	r3, #16
 8004206:	d122      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68db      	ldr	r3, [r3, #12]
 800420e:	f003 0310 	and.w	r3, r3, #16
 8004212:	2b10      	cmp	r3, #16
 8004214:	d11b      	bne.n	800424e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f06f 0210 	mvn.w	r2, #16
 800421e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2208      	movs	r2, #8
 8004224:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	69db      	ldr	r3, [r3, #28]
 800422c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 f927 	bl	8004488 <HAL_TIM_IC_CaptureCallback>
 800423a:	e005      	b.n	8004248 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f000 f919 	bl	8004474 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 f92a 	bl	800449c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b01      	cmp	r3, #1
 800425a:	d10e      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b01      	cmp	r3, #1
 8004268:	d107      	bne.n	800427a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f06f 0201 	mvn.w	r2, #1
 8004272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7fd fe17 	bl	8001ea8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b80      	cmp	r3, #128	; 0x80
 8004286:	d10e      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68db      	ldr	r3, [r3, #12]
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b80      	cmp	r3, #128	; 0x80
 8004294:	d107      	bne.n	80042a6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800429e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	f000 facf 	bl	8004844 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042b0:	2b40      	cmp	r3, #64	; 0x40
 80042b2:	d10e      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	68db      	ldr	r3, [r3, #12]
 80042ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042be:	2b40      	cmp	r3, #64	; 0x40
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f000 f8ef 	bl	80044b0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f003 0320 	and.w	r3, r3, #32
 80042dc:	2b20      	cmp	r3, #32
 80042de:	d10e      	bne.n	80042fe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f003 0320 	and.w	r3, r3, #32
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f06f 0220 	mvn.w	r2, #32
 80042f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f000 fa99 	bl	8004830 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042fe:	bf00      	nop
 8004300:	3708      	adds	r7, #8
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004316:	2b01      	cmp	r3, #1
 8004318:	d101      	bne.n	800431e <HAL_TIM_ConfigClockSource+0x18>
 800431a:	2302      	movs	r3, #2
 800431c:	e0a6      	b.n	800446c <HAL_TIM_ConfigClockSource+0x166>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2201      	movs	r2, #1
 8004322:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2202      	movs	r2, #2
 800432a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800433c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004344:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68fa      	ldr	r2, [r7, #12]
 800434c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b40      	cmp	r3, #64	; 0x40
 8004354:	d067      	beq.n	8004426 <HAL_TIM_ConfigClockSource+0x120>
 8004356:	2b40      	cmp	r3, #64	; 0x40
 8004358:	d80b      	bhi.n	8004372 <HAL_TIM_ConfigClockSource+0x6c>
 800435a:	2b10      	cmp	r3, #16
 800435c:	d073      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x140>
 800435e:	2b10      	cmp	r3, #16
 8004360:	d802      	bhi.n	8004368 <HAL_TIM_ConfigClockSource+0x62>
 8004362:	2b00      	cmp	r3, #0
 8004364:	d06f      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004366:	e078      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004368:	2b20      	cmp	r3, #32
 800436a:	d06c      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x140>
 800436c:	2b30      	cmp	r3, #48	; 0x30
 800436e:	d06a      	beq.n	8004446 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004370:	e073      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004372:	2b70      	cmp	r3, #112	; 0x70
 8004374:	d00d      	beq.n	8004392 <HAL_TIM_ConfigClockSource+0x8c>
 8004376:	2b70      	cmp	r3, #112	; 0x70
 8004378:	d804      	bhi.n	8004384 <HAL_TIM_ConfigClockSource+0x7e>
 800437a:	2b50      	cmp	r3, #80	; 0x50
 800437c:	d033      	beq.n	80043e6 <HAL_TIM_ConfigClockSource+0xe0>
 800437e:	2b60      	cmp	r3, #96	; 0x60
 8004380:	d041      	beq.n	8004406 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004382:	e06a      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004388:	d066      	beq.n	8004458 <HAL_TIM_ConfigClockSource+0x152>
 800438a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800438e:	d017      	beq.n	80043c0 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004390:	e063      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	6899      	ldr	r1, [r3, #8]
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f000 f9a9 	bl	80046f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	609a      	str	r2, [r3, #8]
      break;
 80043be:	e04c      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6818      	ldr	r0, [r3, #0]
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	6899      	ldr	r1, [r3, #8]
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f000 f992 	bl	80046f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043e2:	609a      	str	r2, [r3, #8]
      break;
 80043e4:	e039      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6818      	ldr	r0, [r3, #0]
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	461a      	mov	r2, r3
 80043f4:	f000 f906 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2150      	movs	r1, #80	; 0x50
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 f95f 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004404:	e029      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6818      	ldr	r0, [r3, #0]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	461a      	mov	r2, r3
 8004414:	f000 f925 	bl	8004662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	2160      	movs	r1, #96	; 0x60
 800441e:	4618      	mov	r0, r3
 8004420:	f000 f94f 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004424:	e019      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6859      	ldr	r1, [r3, #4]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	461a      	mov	r2, r3
 8004434:	f000 f8e6 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2140      	movs	r1, #64	; 0x40
 800443e:	4618      	mov	r0, r3
 8004440:	f000 f93f 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004444:	e009      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4619      	mov	r1, r3
 8004450:	4610      	mov	r0, r2
 8004452:	f000 f936 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004456:	e000      	b.n	800445a <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004458:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800446a:	2300      	movs	r3, #0
}
 800446c:	4618      	mov	r0, r3
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	4a40      	ldr	r2, [pc, #256]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d013      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e2:	d00f      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	4a3d      	ldr	r2, [pc, #244]	; (80045dc <TIM_Base_SetConfig+0x118>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d00b      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a3c      	ldr	r2, [pc, #240]	; (80045e0 <TIM_Base_SetConfig+0x11c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d007      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	4a3b      	ldr	r2, [pc, #236]	; (80045e4 <TIM_Base_SetConfig+0x120>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d003      	beq.n	8004504 <TIM_Base_SetConfig+0x40>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a3a      	ldr	r2, [pc, #232]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d108      	bne.n	8004516 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	4313      	orrs	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4a2f      	ldr	r2, [pc, #188]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d02b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d027      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	4a2c      	ldr	r2, [pc, #176]	; (80045dc <TIM_Base_SetConfig+0x118>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d023      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	4a2b      	ldr	r2, [pc, #172]	; (80045e0 <TIM_Base_SetConfig+0x11c>)
 8004532:	4293      	cmp	r3, r2
 8004534:	d01f      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	4a2a      	ldr	r2, [pc, #168]	; (80045e4 <TIM_Base_SetConfig+0x120>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d01b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d017      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a28      	ldr	r2, [pc, #160]	; (80045ec <TIM_Base_SetConfig+0x128>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a27      	ldr	r2, [pc, #156]	; (80045f0 <TIM_Base_SetConfig+0x12c>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00f      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a26      	ldr	r2, [pc, #152]	; (80045f4 <TIM_Base_SetConfig+0x130>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d00b      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a25      	ldr	r2, [pc, #148]	; (80045f8 <TIM_Base_SetConfig+0x134>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d007      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	4a24      	ldr	r2, [pc, #144]	; (80045fc <TIM_Base_SetConfig+0x138>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d003      	beq.n	8004576 <TIM_Base_SetConfig+0xb2>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	4a23      	ldr	r2, [pc, #140]	; (8004600 <TIM_Base_SetConfig+0x13c>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d108      	bne.n	8004588 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	4313      	orrs	r3, r2
 8004586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68fa      	ldr	r2, [r7, #12]
 800459a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <TIM_Base_SetConfig+0x114>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d003      	beq.n	80045bc <TIM_Base_SetConfig+0xf8>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <TIM_Base_SetConfig+0x124>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d103      	bne.n	80045c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	615a      	str	r2, [r3, #20]
}
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
 80045d6:	bf00      	nop
 80045d8:	40010000 	.word	0x40010000
 80045dc:	40000400 	.word	0x40000400
 80045e0:	40000800 	.word	0x40000800
 80045e4:	40000c00 	.word	0x40000c00
 80045e8:	40010400 	.word	0x40010400
 80045ec:	40014000 	.word	0x40014000
 80045f0:	40014400 	.word	0x40014400
 80045f4:	40014800 	.word	0x40014800
 80045f8:	40001800 	.word	0x40001800
 80045fc:	40001c00 	.word	0x40001c00
 8004600:	40002000 	.word	0x40002000

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 030a 	bic.w	r3, r3, #10
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f043 0307 	orr.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	431a      	orrs	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004748:	2b01      	cmp	r3, #1
 800474a:	d101      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800474c:	2302      	movs	r3, #2
 800474e:	e05a      	b.n	8004806 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2201      	movs	r2, #1
 8004754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004776:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68fa      	ldr	r2, [r7, #12]
 8004788:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a21      	ldr	r2, [pc, #132]	; (8004814 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d022      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800479c:	d01d      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d018      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1b      	ldr	r2, [pc, #108]	; (800481c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00e      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d009      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a17      	ldr	r2, [pc, #92]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d004      	beq.n	80047da <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a15      	ldr	r2, [pc, #84]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d10c      	bne.n	80047f4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047e0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	68ba      	ldr	r2, [r7, #8]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40010400 	.word	0x40010400
 8004828:	40014000 	.word	0x40014000
 800482c:	40001800 	.word	0x40001800

08004830 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004838:	bf00      	nop
 800483a:	370c      	adds	r7, #12
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004844:	b480      	push	{r7}
 8004846:	b083      	sub	sp, #12
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800484c:	bf00      	nop
 800484e:	370c      	adds	r7, #12
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d101      	bne.n	800486a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	e03f      	b.n	80048ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b00      	cmp	r3, #0
 8004874:	d106      	bne.n	8004884 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fe18 	bl	80024b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2224      	movs	r2, #36	; 0x24
 8004888:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800489a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f90b 	bl	8004ab8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691a      	ldr	r2, [r3, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	695a      	ldr	r2, [r3, #20]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2220      	movs	r2, #32
 80048dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2220      	movs	r2, #32
 80048e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80048e8:	2300      	movs	r3, #0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3708      	adds	r7, #8
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b088      	sub	sp, #32
 80048f6:	af02      	add	r7, sp, #8
 80048f8:	60f8      	str	r0, [r7, #12]
 80048fa:	60b9      	str	r1, [r7, #8]
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	4613      	mov	r3, r2
 8004900:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004902:	2300      	movs	r3, #0
 8004904:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b20      	cmp	r3, #32
 8004910:	f040 8083 	bne.w	8004a1a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Transmit+0x2e>
 800491a:	88fb      	ldrh	r3, [r7, #6]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d101      	bne.n	8004924 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e07b      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800492a:	2b01      	cmp	r3, #1
 800492c:	d101      	bne.n	8004932 <HAL_UART_Transmit+0x40>
 800492e:	2302      	movs	r3, #2
 8004930:	e074      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2200      	movs	r2, #0
 800493e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2221      	movs	r2, #33	; 0x21
 8004944:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004948:	f7fd ffb4 	bl	80028b4 <HAL_GetTick>
 800494c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	88fa      	ldrh	r2, [r7, #6]
 8004958:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004962:	e042      	b.n	80049ea <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004968:	b29b      	uxth	r3, r3
 800496a:	3b01      	subs	r3, #1
 800496c:	b29a      	uxth	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d122      	bne.n	80049c2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	9300      	str	r3, [sp, #0]
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	2200      	movs	r2, #0
 8004984:	2180      	movs	r1, #128	; 0x80
 8004986:	68f8      	ldr	r0, [r7, #12]
 8004988:	f000 f84c 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 800498c:	4603      	mov	r3, r0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d001      	beq.n	8004996 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e042      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	881b      	ldrh	r3, [r3, #0]
 800499e:	461a      	mov	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049a8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d103      	bne.n	80049ba <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3302      	adds	r3, #2
 80049b6:	60bb      	str	r3, [r7, #8]
 80049b8:	e017      	b.n	80049ea <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	3301      	adds	r3, #1
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	e013      	b.n	80049ea <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	9300      	str	r3, [sp, #0]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2200      	movs	r2, #0
 80049ca:	2180      	movs	r1, #128	; 0x80
 80049cc:	68f8      	ldr	r0, [r7, #12]
 80049ce:	f000 f829 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d001      	beq.n	80049dc <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80049d8:	2303      	movs	r3, #3
 80049da:	e01f      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	60ba      	str	r2, [r7, #8]
 80049e2:	781a      	ldrb	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d1b7      	bne.n	8004964 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	9300      	str	r3, [sp, #0]
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2200      	movs	r2, #0
 80049fc:	2140      	movs	r1, #64	; 0x40
 80049fe:	68f8      	ldr	r0, [r7, #12]
 8004a00:	f000 f810 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8004a04:	4603      	mov	r3, r0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d001      	beq.n	8004a0e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e006      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2220      	movs	r2, #32
 8004a12:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004a16:	2300      	movs	r3, #0
 8004a18:	e000      	b.n	8004a1c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004a1a:	2302      	movs	r3, #2
  }
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3718      	adds	r7, #24
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	e02c      	b.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d028      	beq.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a44:	f7fd ff36 	bl	80028b4 <HAL_GetTick>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	69ba      	ldr	r2, [r7, #24]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d21d      	bcs.n	8004a90 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68da      	ldr	r2, [r3, #12]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004a62:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	695a      	ldr	r2, [r3, #20]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f022 0201 	bic.w	r2, r2, #1
 8004a72:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e00f      	b.n	8004ab0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	4013      	ands	r3, r2
 8004a9a:	68ba      	ldr	r2, [r7, #8]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	bf0c      	ite	eq
 8004aa0:	2301      	moveq	r3, #1
 8004aa2:	2300      	movne	r3, #0
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	79fb      	ldrb	r3, [r7, #7]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d0c3      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004aae:	2300      	movs	r3, #0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3710      	adds	r7, #16
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	b085      	sub	sp, #20
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	68da      	ldr	r2, [r3, #12]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689a      	ldr	r2, [r3, #8]
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	431a      	orrs	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	69db      	ldr	r3, [r3, #28]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004afa:	f023 030c 	bic.w	r3, r3, #12
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	68f9      	ldr	r1, [r7, #12]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699a      	ldr	r2, [r3, #24]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b26:	f040 818b 	bne.w	8004e40 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4ac1      	ldr	r2, [pc, #772]	; (8004e34 <UART_SetConfig+0x37c>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d005      	beq.n	8004b40 <UART_SetConfig+0x88>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	4abf      	ldr	r2, [pc, #764]	; (8004e38 <UART_SetConfig+0x380>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	f040 80bd 	bne.w	8004cba <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004b40:	f7ff fa76 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8004b44:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	461d      	mov	r5, r3
 8004b4a:	f04f 0600 	mov.w	r6, #0
 8004b4e:	46a8      	mov	r8, r5
 8004b50:	46b1      	mov	r9, r6
 8004b52:	eb18 0308 	adds.w	r3, r8, r8
 8004b56:	eb49 0409 	adc.w	r4, r9, r9
 8004b5a:	4698      	mov	r8, r3
 8004b5c:	46a1      	mov	r9, r4
 8004b5e:	eb18 0805 	adds.w	r8, r8, r5
 8004b62:	eb49 0906 	adc.w	r9, r9, r6
 8004b66:	f04f 0100 	mov.w	r1, #0
 8004b6a:	f04f 0200 	mov.w	r2, #0
 8004b6e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004b72:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004b76:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004b7a:	4688      	mov	r8, r1
 8004b7c:	4691      	mov	r9, r2
 8004b7e:	eb18 0005 	adds.w	r0, r8, r5
 8004b82:	eb49 0106 	adc.w	r1, r9, r6
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	461d      	mov	r5, r3
 8004b8c:	f04f 0600 	mov.w	r6, #0
 8004b90:	196b      	adds	r3, r5, r5
 8004b92:	eb46 0406 	adc.w	r4, r6, r6
 8004b96:	461a      	mov	r2, r3
 8004b98:	4623      	mov	r3, r4
 8004b9a:	f7fc f865 	bl	8000c68 <__aeabi_uldivmod>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	4ba5      	ldr	r3, [pc, #660]	; (8004e3c <UART_SetConfig+0x384>)
 8004ba6:	fba3 2302 	umull	r2, r3, r3, r2
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	461d      	mov	r5, r3
 8004bb4:	f04f 0600 	mov.w	r6, #0
 8004bb8:	46a9      	mov	r9, r5
 8004bba:	46b2      	mov	sl, r6
 8004bbc:	eb19 0309 	adds.w	r3, r9, r9
 8004bc0:	eb4a 040a 	adc.w	r4, sl, sl
 8004bc4:	4699      	mov	r9, r3
 8004bc6:	46a2      	mov	sl, r4
 8004bc8:	eb19 0905 	adds.w	r9, r9, r5
 8004bcc:	eb4a 0a06 	adc.w	sl, sl, r6
 8004bd0:	f04f 0100 	mov.w	r1, #0
 8004bd4:	f04f 0200 	mov.w	r2, #0
 8004bd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004bdc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004be0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004be4:	4689      	mov	r9, r1
 8004be6:	4692      	mov	sl, r2
 8004be8:	eb19 0005 	adds.w	r0, r9, r5
 8004bec:	eb4a 0106 	adc.w	r1, sl, r6
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	461d      	mov	r5, r3
 8004bf6:	f04f 0600 	mov.w	r6, #0
 8004bfa:	196b      	adds	r3, r5, r5
 8004bfc:	eb46 0406 	adc.w	r4, r6, r6
 8004c00:	461a      	mov	r2, r3
 8004c02:	4623      	mov	r3, r4
 8004c04:	f7fc f830 	bl	8000c68 <__aeabi_uldivmod>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	461a      	mov	r2, r3
 8004c0e:	4b8b      	ldr	r3, [pc, #556]	; (8004e3c <UART_SetConfig+0x384>)
 8004c10:	fba3 1302 	umull	r1, r3, r3, r2
 8004c14:	095b      	lsrs	r3, r3, #5
 8004c16:	2164      	movs	r1, #100	; 0x64
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	00db      	lsls	r3, r3, #3
 8004c20:	3332      	adds	r3, #50	; 0x32
 8004c22:	4a86      	ldr	r2, [pc, #536]	; (8004e3c <UART_SetConfig+0x384>)
 8004c24:	fba2 2303 	umull	r2, r3, r2, r3
 8004c28:	095b      	lsrs	r3, r3, #5
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c30:	4498      	add	r8, r3
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	461d      	mov	r5, r3
 8004c36:	f04f 0600 	mov.w	r6, #0
 8004c3a:	46a9      	mov	r9, r5
 8004c3c:	46b2      	mov	sl, r6
 8004c3e:	eb19 0309 	adds.w	r3, r9, r9
 8004c42:	eb4a 040a 	adc.w	r4, sl, sl
 8004c46:	4699      	mov	r9, r3
 8004c48:	46a2      	mov	sl, r4
 8004c4a:	eb19 0905 	adds.w	r9, r9, r5
 8004c4e:	eb4a 0a06 	adc.w	sl, sl, r6
 8004c52:	f04f 0100 	mov.w	r1, #0
 8004c56:	f04f 0200 	mov.w	r2, #0
 8004c5a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004c5e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004c62:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004c66:	4689      	mov	r9, r1
 8004c68:	4692      	mov	sl, r2
 8004c6a:	eb19 0005 	adds.w	r0, r9, r5
 8004c6e:	eb4a 0106 	adc.w	r1, sl, r6
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	461d      	mov	r5, r3
 8004c78:	f04f 0600 	mov.w	r6, #0
 8004c7c:	196b      	adds	r3, r5, r5
 8004c7e:	eb46 0406 	adc.w	r4, r6, r6
 8004c82:	461a      	mov	r2, r3
 8004c84:	4623      	mov	r3, r4
 8004c86:	f7fb ffef 	bl	8000c68 <__aeabi_uldivmod>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	461a      	mov	r2, r3
 8004c90:	4b6a      	ldr	r3, [pc, #424]	; (8004e3c <UART_SetConfig+0x384>)
 8004c92:	fba3 1302 	umull	r1, r3, r3, r2
 8004c96:	095b      	lsrs	r3, r3, #5
 8004c98:	2164      	movs	r1, #100	; 0x64
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	00db      	lsls	r3, r3, #3
 8004ca2:	3332      	adds	r3, #50	; 0x32
 8004ca4:	4a65      	ldr	r2, [pc, #404]	; (8004e3c <UART_SetConfig+0x384>)
 8004ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8004caa:	095b      	lsrs	r3, r3, #5
 8004cac:	f003 0207 	and.w	r2, r3, #7
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4442      	add	r2, r8
 8004cb6:	609a      	str	r2, [r3, #8]
 8004cb8:	e26f      	b.n	800519a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7ff f9a5 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8004cbe:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	461d      	mov	r5, r3
 8004cc4:	f04f 0600 	mov.w	r6, #0
 8004cc8:	46a8      	mov	r8, r5
 8004cca:	46b1      	mov	r9, r6
 8004ccc:	eb18 0308 	adds.w	r3, r8, r8
 8004cd0:	eb49 0409 	adc.w	r4, r9, r9
 8004cd4:	4698      	mov	r8, r3
 8004cd6:	46a1      	mov	r9, r4
 8004cd8:	eb18 0805 	adds.w	r8, r8, r5
 8004cdc:	eb49 0906 	adc.w	r9, r9, r6
 8004ce0:	f04f 0100 	mov.w	r1, #0
 8004ce4:	f04f 0200 	mov.w	r2, #0
 8004ce8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004cec:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004cf0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004cf4:	4688      	mov	r8, r1
 8004cf6:	4691      	mov	r9, r2
 8004cf8:	eb18 0005 	adds.w	r0, r8, r5
 8004cfc:	eb49 0106 	adc.w	r1, r9, r6
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	461d      	mov	r5, r3
 8004d06:	f04f 0600 	mov.w	r6, #0
 8004d0a:	196b      	adds	r3, r5, r5
 8004d0c:	eb46 0406 	adc.w	r4, r6, r6
 8004d10:	461a      	mov	r2, r3
 8004d12:	4623      	mov	r3, r4
 8004d14:	f7fb ffa8 	bl	8000c68 <__aeabi_uldivmod>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	460c      	mov	r4, r1
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <UART_SetConfig+0x384>)
 8004d20:	fba3 2302 	umull	r2, r3, r3, r2
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	461d      	mov	r5, r3
 8004d2e:	f04f 0600 	mov.w	r6, #0
 8004d32:	46a9      	mov	r9, r5
 8004d34:	46b2      	mov	sl, r6
 8004d36:	eb19 0309 	adds.w	r3, r9, r9
 8004d3a:	eb4a 040a 	adc.w	r4, sl, sl
 8004d3e:	4699      	mov	r9, r3
 8004d40:	46a2      	mov	sl, r4
 8004d42:	eb19 0905 	adds.w	r9, r9, r5
 8004d46:	eb4a 0a06 	adc.w	sl, sl, r6
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	f04f 0200 	mov.w	r2, #0
 8004d52:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d56:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004d5a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004d5e:	4689      	mov	r9, r1
 8004d60:	4692      	mov	sl, r2
 8004d62:	eb19 0005 	adds.w	r0, r9, r5
 8004d66:	eb4a 0106 	adc.w	r1, sl, r6
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	461d      	mov	r5, r3
 8004d70:	f04f 0600 	mov.w	r6, #0
 8004d74:	196b      	adds	r3, r5, r5
 8004d76:	eb46 0406 	adc.w	r4, r6, r6
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4623      	mov	r3, r4
 8004d7e:	f7fb ff73 	bl	8000c68 <__aeabi_uldivmod>
 8004d82:	4603      	mov	r3, r0
 8004d84:	460c      	mov	r4, r1
 8004d86:	461a      	mov	r2, r3
 8004d88:	4b2c      	ldr	r3, [pc, #176]	; (8004e3c <UART_SetConfig+0x384>)
 8004d8a:	fba3 1302 	umull	r1, r3, r3, r2
 8004d8e:	095b      	lsrs	r3, r3, #5
 8004d90:	2164      	movs	r1, #100	; 0x64
 8004d92:	fb01 f303 	mul.w	r3, r1, r3
 8004d96:	1ad3      	subs	r3, r2, r3
 8004d98:	00db      	lsls	r3, r3, #3
 8004d9a:	3332      	adds	r3, #50	; 0x32
 8004d9c:	4a27      	ldr	r2, [pc, #156]	; (8004e3c <UART_SetConfig+0x384>)
 8004d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	005b      	lsls	r3, r3, #1
 8004da6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004daa:	4498      	add	r8, r3
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	461d      	mov	r5, r3
 8004db0:	f04f 0600 	mov.w	r6, #0
 8004db4:	46a9      	mov	r9, r5
 8004db6:	46b2      	mov	sl, r6
 8004db8:	eb19 0309 	adds.w	r3, r9, r9
 8004dbc:	eb4a 040a 	adc.w	r4, sl, sl
 8004dc0:	4699      	mov	r9, r3
 8004dc2:	46a2      	mov	sl, r4
 8004dc4:	eb19 0905 	adds.w	r9, r9, r5
 8004dc8:	eb4a 0a06 	adc.w	sl, sl, r6
 8004dcc:	f04f 0100 	mov.w	r1, #0
 8004dd0:	f04f 0200 	mov.w	r2, #0
 8004dd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004ddc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004de0:	4689      	mov	r9, r1
 8004de2:	4692      	mov	sl, r2
 8004de4:	eb19 0005 	adds.w	r0, r9, r5
 8004de8:	eb4a 0106 	adc.w	r1, sl, r6
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	461d      	mov	r5, r3
 8004df2:	f04f 0600 	mov.w	r6, #0
 8004df6:	196b      	adds	r3, r5, r5
 8004df8:	eb46 0406 	adc.w	r4, r6, r6
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	4623      	mov	r3, r4
 8004e00:	f7fb ff32 	bl	8000c68 <__aeabi_uldivmod>
 8004e04:	4603      	mov	r3, r0
 8004e06:	460c      	mov	r4, r1
 8004e08:	461a      	mov	r2, r3
 8004e0a:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <UART_SetConfig+0x384>)
 8004e0c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e10:	095b      	lsrs	r3, r3, #5
 8004e12:	2164      	movs	r1, #100	; 0x64
 8004e14:	fb01 f303 	mul.w	r3, r1, r3
 8004e18:	1ad3      	subs	r3, r2, r3
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	3332      	adds	r3, #50	; 0x32
 8004e1e:	4a07      	ldr	r2, [pc, #28]	; (8004e3c <UART_SetConfig+0x384>)
 8004e20:	fba2 2303 	umull	r2, r3, r2, r3
 8004e24:	095b      	lsrs	r3, r3, #5
 8004e26:	f003 0207 	and.w	r2, r3, #7
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4442      	add	r2, r8
 8004e30:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004e32:	e1b2      	b.n	800519a <UART_SetConfig+0x6e2>
 8004e34:	40011000 	.word	0x40011000
 8004e38:	40011400 	.word	0x40011400
 8004e3c:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4ad7      	ldr	r2, [pc, #860]	; (80051a4 <UART_SetConfig+0x6ec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d005      	beq.n	8004e56 <UART_SetConfig+0x39e>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4ad6      	ldr	r2, [pc, #856]	; (80051a8 <UART_SetConfig+0x6f0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	f040 80d1 	bne.w	8004ff8 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e56:	f7ff f8eb 	bl	8004030 <HAL_RCC_GetPCLK2Freq>
 8004e5a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	469a      	mov	sl, r3
 8004e60:	f04f 0b00 	mov.w	fp, #0
 8004e64:	46d0      	mov	r8, sl
 8004e66:	46d9      	mov	r9, fp
 8004e68:	eb18 0308 	adds.w	r3, r8, r8
 8004e6c:	eb49 0409 	adc.w	r4, r9, r9
 8004e70:	4698      	mov	r8, r3
 8004e72:	46a1      	mov	r9, r4
 8004e74:	eb18 080a 	adds.w	r8, r8, sl
 8004e78:	eb49 090b 	adc.w	r9, r9, fp
 8004e7c:	f04f 0100 	mov.w	r1, #0
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8004e88:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004e8c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004e90:	4688      	mov	r8, r1
 8004e92:	4691      	mov	r9, r2
 8004e94:	eb1a 0508 	adds.w	r5, sl, r8
 8004e98:	eb4b 0609 	adc.w	r6, fp, r9
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0200 	mov.w	r2, #0
 8004ea6:	f04f 0300 	mov.w	r3, #0
 8004eaa:	f04f 0400 	mov.w	r4, #0
 8004eae:	0094      	lsls	r4, r2, #2
 8004eb0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004eb4:	008b      	lsls	r3, r1, #2
 8004eb6:	461a      	mov	r2, r3
 8004eb8:	4623      	mov	r3, r4
 8004eba:	4628      	mov	r0, r5
 8004ebc:	4631      	mov	r1, r6
 8004ebe:	f7fb fed3 	bl	8000c68 <__aeabi_uldivmod>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	4bb8      	ldr	r3, [pc, #736]	; (80051ac <UART_SetConfig+0x6f4>)
 8004eca:	fba3 2302 	umull	r2, r3, r3, r2
 8004ece:	095b      	lsrs	r3, r3, #5
 8004ed0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	469b      	mov	fp, r3
 8004ed8:	f04f 0c00 	mov.w	ip, #0
 8004edc:	46d9      	mov	r9, fp
 8004ede:	46e2      	mov	sl, ip
 8004ee0:	eb19 0309 	adds.w	r3, r9, r9
 8004ee4:	eb4a 040a 	adc.w	r4, sl, sl
 8004ee8:	4699      	mov	r9, r3
 8004eea:	46a2      	mov	sl, r4
 8004eec:	eb19 090b 	adds.w	r9, r9, fp
 8004ef0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004ef4:	f04f 0100 	mov.w	r1, #0
 8004ef8:	f04f 0200 	mov.w	r2, #0
 8004efc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f00:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f04:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f08:	4689      	mov	r9, r1
 8004f0a:	4692      	mov	sl, r2
 8004f0c:	eb1b 0509 	adds.w	r5, fp, r9
 8004f10:	eb4c 060a 	adc.w	r6, ip, sl
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	4619      	mov	r1, r3
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	f04f 0400 	mov.w	r4, #0
 8004f26:	0094      	lsls	r4, r2, #2
 8004f28:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004f2c:	008b      	lsls	r3, r1, #2
 8004f2e:	461a      	mov	r2, r3
 8004f30:	4623      	mov	r3, r4
 8004f32:	4628      	mov	r0, r5
 8004f34:	4631      	mov	r1, r6
 8004f36:	f7fb fe97 	bl	8000c68 <__aeabi_uldivmod>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	460c      	mov	r4, r1
 8004f3e:	461a      	mov	r2, r3
 8004f40:	4b9a      	ldr	r3, [pc, #616]	; (80051ac <UART_SetConfig+0x6f4>)
 8004f42:	fba3 1302 	umull	r1, r3, r3, r2
 8004f46:	095b      	lsrs	r3, r3, #5
 8004f48:	2164      	movs	r1, #100	; 0x64
 8004f4a:	fb01 f303 	mul.w	r3, r1, r3
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	011b      	lsls	r3, r3, #4
 8004f52:	3332      	adds	r3, #50	; 0x32
 8004f54:	4a95      	ldr	r2, [pc, #596]	; (80051ac <UART_SetConfig+0x6f4>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	095b      	lsrs	r3, r3, #5
 8004f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f60:	4498      	add	r8, r3
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	469b      	mov	fp, r3
 8004f66:	f04f 0c00 	mov.w	ip, #0
 8004f6a:	46d9      	mov	r9, fp
 8004f6c:	46e2      	mov	sl, ip
 8004f6e:	eb19 0309 	adds.w	r3, r9, r9
 8004f72:	eb4a 040a 	adc.w	r4, sl, sl
 8004f76:	4699      	mov	r9, r3
 8004f78:	46a2      	mov	sl, r4
 8004f7a:	eb19 090b 	adds.w	r9, r9, fp
 8004f7e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	f04f 0200 	mov.w	r2, #0
 8004f8a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f8e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004f92:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8004f96:	4689      	mov	r9, r1
 8004f98:	4692      	mov	sl, r2
 8004f9a:	eb1b 0509 	adds.w	r5, fp, r9
 8004f9e:	eb4c 060a 	adc.w	r6, ip, sl
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	4619      	mov	r1, r3
 8004fa8:	f04f 0200 	mov.w	r2, #0
 8004fac:	f04f 0300 	mov.w	r3, #0
 8004fb0:	f04f 0400 	mov.w	r4, #0
 8004fb4:	0094      	lsls	r4, r2, #2
 8004fb6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004fba:	008b      	lsls	r3, r1, #2
 8004fbc:	461a      	mov	r2, r3
 8004fbe:	4623      	mov	r3, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	f7fb fe50 	bl	8000c68 <__aeabi_uldivmod>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	461a      	mov	r2, r3
 8004fce:	4b77      	ldr	r3, [pc, #476]	; (80051ac <UART_SetConfig+0x6f4>)
 8004fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	2164      	movs	r1, #100	; 0x64
 8004fd8:	fb01 f303 	mul.w	r3, r1, r3
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	3332      	adds	r3, #50	; 0x32
 8004fe2:	4a72      	ldr	r2, [pc, #456]	; (80051ac <UART_SetConfig+0x6f4>)
 8004fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	f003 020f 	and.w	r2, r3, #15
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4442      	add	r2, r8
 8004ff4:	609a      	str	r2, [r3, #8]
 8004ff6:	e0d0      	b.n	800519a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004ff8:	f7ff f806 	bl	8004008 <HAL_RCC_GetPCLK1Freq>
 8004ffc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	469a      	mov	sl, r3
 8005002:	f04f 0b00 	mov.w	fp, #0
 8005006:	46d0      	mov	r8, sl
 8005008:	46d9      	mov	r9, fp
 800500a:	eb18 0308 	adds.w	r3, r8, r8
 800500e:	eb49 0409 	adc.w	r4, r9, r9
 8005012:	4698      	mov	r8, r3
 8005014:	46a1      	mov	r9, r4
 8005016:	eb18 080a 	adds.w	r8, r8, sl
 800501a:	eb49 090b 	adc.w	r9, r9, fp
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	f04f 0200 	mov.w	r2, #0
 8005026:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800502a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800502e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005032:	4688      	mov	r8, r1
 8005034:	4691      	mov	r9, r2
 8005036:	eb1a 0508 	adds.w	r5, sl, r8
 800503a:	eb4b 0609 	adc.w	r6, fp, r9
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	4619      	mov	r1, r3
 8005044:	f04f 0200 	mov.w	r2, #0
 8005048:	f04f 0300 	mov.w	r3, #0
 800504c:	f04f 0400 	mov.w	r4, #0
 8005050:	0094      	lsls	r4, r2, #2
 8005052:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005056:	008b      	lsls	r3, r1, #2
 8005058:	461a      	mov	r2, r3
 800505a:	4623      	mov	r3, r4
 800505c:	4628      	mov	r0, r5
 800505e:	4631      	mov	r1, r6
 8005060:	f7fb fe02 	bl	8000c68 <__aeabi_uldivmod>
 8005064:	4603      	mov	r3, r0
 8005066:	460c      	mov	r4, r1
 8005068:	461a      	mov	r2, r3
 800506a:	4b50      	ldr	r3, [pc, #320]	; (80051ac <UART_SetConfig+0x6f4>)
 800506c:	fba3 2302 	umull	r2, r3, r3, r2
 8005070:	095b      	lsrs	r3, r3, #5
 8005072:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	469b      	mov	fp, r3
 800507a:	f04f 0c00 	mov.w	ip, #0
 800507e:	46d9      	mov	r9, fp
 8005080:	46e2      	mov	sl, ip
 8005082:	eb19 0309 	adds.w	r3, r9, r9
 8005086:	eb4a 040a 	adc.w	r4, sl, sl
 800508a:	4699      	mov	r9, r3
 800508c:	46a2      	mov	sl, r4
 800508e:	eb19 090b 	adds.w	r9, r9, fp
 8005092:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005096:	f04f 0100 	mov.w	r1, #0
 800509a:	f04f 0200 	mov.w	r2, #0
 800509e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80050a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80050aa:	4689      	mov	r9, r1
 80050ac:	4692      	mov	sl, r2
 80050ae:	eb1b 0509 	adds.w	r5, fp, r9
 80050b2:	eb4c 060a 	adc.w	r6, ip, sl
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	4619      	mov	r1, r3
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	f04f 0400 	mov.w	r4, #0
 80050c8:	0094      	lsls	r4, r2, #2
 80050ca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80050ce:	008b      	lsls	r3, r1, #2
 80050d0:	461a      	mov	r2, r3
 80050d2:	4623      	mov	r3, r4
 80050d4:	4628      	mov	r0, r5
 80050d6:	4631      	mov	r1, r6
 80050d8:	f7fb fdc6 	bl	8000c68 <__aeabi_uldivmod>
 80050dc:	4603      	mov	r3, r0
 80050de:	460c      	mov	r4, r1
 80050e0:	461a      	mov	r2, r3
 80050e2:	4b32      	ldr	r3, [pc, #200]	; (80051ac <UART_SetConfig+0x6f4>)
 80050e4:	fba3 1302 	umull	r1, r3, r3, r2
 80050e8:	095b      	lsrs	r3, r3, #5
 80050ea:	2164      	movs	r1, #100	; 0x64
 80050ec:	fb01 f303 	mul.w	r3, r1, r3
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	011b      	lsls	r3, r3, #4
 80050f4:	3332      	adds	r3, #50	; 0x32
 80050f6:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <UART_SetConfig+0x6f4>)
 80050f8:	fba2 2303 	umull	r2, r3, r2, r3
 80050fc:	095b      	lsrs	r3, r3, #5
 80050fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005102:	4498      	add	r8, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	469b      	mov	fp, r3
 8005108:	f04f 0c00 	mov.w	ip, #0
 800510c:	46d9      	mov	r9, fp
 800510e:	46e2      	mov	sl, ip
 8005110:	eb19 0309 	adds.w	r3, r9, r9
 8005114:	eb4a 040a 	adc.w	r4, sl, sl
 8005118:	4699      	mov	r9, r3
 800511a:	46a2      	mov	sl, r4
 800511c:	eb19 090b 	adds.w	r9, r9, fp
 8005120:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005124:	f04f 0100 	mov.w	r1, #0
 8005128:	f04f 0200 	mov.w	r2, #0
 800512c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005130:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005134:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005138:	4689      	mov	r9, r1
 800513a:	4692      	mov	sl, r2
 800513c:	eb1b 0509 	adds.w	r5, fp, r9
 8005140:	eb4c 060a 	adc.w	r6, ip, sl
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4619      	mov	r1, r3
 800514a:	f04f 0200 	mov.w	r2, #0
 800514e:	f04f 0300 	mov.w	r3, #0
 8005152:	f04f 0400 	mov.w	r4, #0
 8005156:	0094      	lsls	r4, r2, #2
 8005158:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800515c:	008b      	lsls	r3, r1, #2
 800515e:	461a      	mov	r2, r3
 8005160:	4623      	mov	r3, r4
 8005162:	4628      	mov	r0, r5
 8005164:	4631      	mov	r1, r6
 8005166:	f7fb fd7f 	bl	8000c68 <__aeabi_uldivmod>
 800516a:	4603      	mov	r3, r0
 800516c:	460c      	mov	r4, r1
 800516e:	461a      	mov	r2, r3
 8005170:	4b0e      	ldr	r3, [pc, #56]	; (80051ac <UART_SetConfig+0x6f4>)
 8005172:	fba3 1302 	umull	r1, r3, r3, r2
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2164      	movs	r1, #100	; 0x64
 800517a:	fb01 f303 	mul.w	r3, r1, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	011b      	lsls	r3, r3, #4
 8005182:	3332      	adds	r3, #50	; 0x32
 8005184:	4a09      	ldr	r2, [pc, #36]	; (80051ac <UART_SetConfig+0x6f4>)
 8005186:	fba2 2303 	umull	r2, r3, r2, r3
 800518a:	095b      	lsrs	r3, r3, #5
 800518c:	f003 020f 	and.w	r2, r3, #15
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4442      	add	r2, r8
 8005196:	609a      	str	r2, [r3, #8]
}
 8005198:	e7ff      	b.n	800519a <UART_SetConfig+0x6e2>
 800519a:	bf00      	nop
 800519c:	3714      	adds	r7, #20
 800519e:	46bd      	mov	sp, r7
 80051a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a4:	40011000 	.word	0x40011000
 80051a8:	40011400 	.word	0x40011400
 80051ac:	51eb851f 	.word	0x51eb851f

080051b0 <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3301      	adds	r3, #1
 80051bc:	009b      	lsls	r3, r3, #2
}
 80051be:	4618      	mov	r0, r3
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80051d6:	79fb      	ldrb	r3, [r7, #7]
 80051d8:	2b0b      	cmp	r3, #11
 80051da:	d833      	bhi.n	8005244 <TfLiteTypeGetName+0x78>
 80051dc:	a201      	add	r2, pc, #4	; (adr r2, 80051e4 <TfLiteTypeGetName+0x18>)
 80051de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e2:	bf00      	nop
 80051e4:	08005215 	.word	0x08005215
 80051e8:	08005219 	.word	0x08005219
 80051ec:	08005221 	.word	0x08005221
 80051f0:	08005225 	.word	0x08005225
 80051f4:	0800522d 	.word	0x0800522d
 80051f8:	08005239 	.word	0x08005239
 80051fc:	08005231 	.word	0x08005231
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005235 	.word	0x08005235
 8005208:	08005229 	.word	0x08005229
 800520c:	0800523d 	.word	0x0800523d
 8005210:	08005241 	.word	0x08005241
    case kTfLiteNoType:
      return "NOTYPE";
 8005214:	4b0f      	ldr	r3, [pc, #60]	; (8005254 <TfLiteTypeGetName+0x88>)
 8005216:	e016      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 8005218:	4b0f      	ldr	r3, [pc, #60]	; (8005258 <TfLiteTypeGetName+0x8c>)
 800521a:	e014      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800521c:	4b0f      	ldr	r3, [pc, #60]	; (800525c <TfLiteTypeGetName+0x90>)
 800521e:	e012      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 8005220:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <TfLiteTypeGetName+0x94>)
 8005222:	e010      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 8005224:	4b0f      	ldr	r3, [pc, #60]	; (8005264 <TfLiteTypeGetName+0x98>)
 8005226:	e00e      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 8005228:	4b0f      	ldr	r3, [pc, #60]	; (8005268 <TfLiteTypeGetName+0x9c>)
 800522a:	e00c      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800522c:	4b0f      	ldr	r3, [pc, #60]	; (800526c <TfLiteTypeGetName+0xa0>)
 800522e:	e00a      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 8005230:	4b0f      	ldr	r3, [pc, #60]	; (8005270 <TfLiteTypeGetName+0xa4>)
 8005232:	e008      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 8005234:	4b0f      	ldr	r3, [pc, #60]	; (8005274 <TfLiteTypeGetName+0xa8>)
 8005236:	e006      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <TfLiteTypeGetName+0xac>)
 800523a:	e004      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800523c:	4b0f      	ldr	r3, [pc, #60]	; (800527c <TfLiteTypeGetName+0xb0>)
 800523e:	e002      	b.n	8005246 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 8005240:	4b0f      	ldr	r3, [pc, #60]	; (8005280 <TfLiteTypeGetName+0xb4>)
 8005242:	e000      	b.n	8005246 <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 8005244:	4b0f      	ldr	r3, [pc, #60]	; (8005284 <TfLiteTypeGetName+0xb8>)
}
 8005246:	4618      	mov	r0, r3
 8005248:	370c      	adds	r7, #12
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop
 8005254:	0800e960 	.word	0x0800e960
 8005258:	0800e968 	.word	0x0800e968
 800525c:	0800e970 	.word	0x0800e970
 8005260:	0800e978 	.word	0x0800e978
 8005264:	0800e980 	.word	0x0800e980
 8005268:	0800e988 	.word	0x0800e988
 800526c:	0800e990 	.word	0x0800e990
 8005270:	0800e998 	.word	0x0800e998
 8005274:	0800e9a0 	.word	0x0800e9a0
 8005278:	0800e9ac 	.word	0x0800e9ac
 800527c:	0800e9b4 	.word	0x0800e9b4
 8005280:	0800e9bc 	.word	0x0800e9bc
 8005284:	0800e9c4 	.word	0x0800e9c4

08005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 8005288:	b40e      	push	{r1, r2, r3}
 800528a:	b580      	push	{r7, lr}
 800528c:	b085      	sub	sp, #20
 800528e:	af00      	add	r7, sp, #0
 8005290:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8005292:	f107 0320 	add.w	r3, r7, #32
 8005296:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3308      	adds	r3, #8
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68ba      	ldr	r2, [r7, #8]
 80052a2:	69f9      	ldr	r1, [r7, #28]
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4798      	blx	r3
 80052a8:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80052aa:	68fb      	ldr	r3, [r7, #12]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052b6:	b003      	add	sp, #12
 80052b8:	4770      	bx	lr

080052ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80052ba:	b40c      	push	{r2, r3}
 80052bc:	b580      	push	{r7, lr}
 80052be:	b084      	sub	sp, #16
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 80052c6:	f107 031c 	add.w	r3, r7, #28
 80052ca:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3308      	adds	r3, #8
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	69b9      	ldr	r1, [r7, #24]
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	4798      	blx	r3
 80052dc:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	3710      	adds	r7, #16
 80052e4:	46bd      	mov	sp, r7
 80052e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052ea:	b002      	add	sp, #8
 80052ec:	4770      	bx	lr

080052ee <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
 80052f6:	6039      	str	r1, [r7, #0]
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	370c      	adds	r7, #12
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 8005306:	b580      	push	{r7, lr}
 8005308:	b082      	sub	sp, #8
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2200      	movs	r2, #0
 8005312:	2104      	movs	r1, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f000 fa54 	bl	80057c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800531a:	4603      	mov	r3, r0
 800531c:	b2db      	uxtb	r3, r3
  }
 800531e:	4618      	mov	r0, r3
 8005320:	3708      	adds	r7, #8
 8005322:	46bd      	mov	sp, r7
 8005324:	bd80      	pop	{r7, pc}

08005326 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 8005326:	b580      	push	{r7, lr}
 8005328:	b082      	sub	sp, #8
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2200      	movs	r2, #0
 8005332:	2106      	movs	r1, #6
 8005334:	4618      	mov	r0, r3
 8005336:	f000 fa44 	bl	80057c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800533a:	4603      	mov	r3, r0
 800533c:	b2db      	uxtb	r3, r3
  }
 800533e:	4618      	mov	r0, r3
 8005340:	3708      	adds	r7, #8
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}

08005346 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 8005346:	b580      	push	{r7, lr}
 8005348:	b082      	sub	sp, #8
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	2108      	movs	r1, #8
 8005354:	4618      	mov	r0, r3
 8005356:	f000 f9d7 	bl	8005708 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800535a:	4603      	mov	r3, r0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bf14      	ite	ne
 8005360:	2301      	movne	r3, #1
 8005362:	2300      	moveq	r3, #0
 8005364:	b2db      	uxtb	r3, r3
  }
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 800536e:	b580      	push	{r7, lr}
 8005370:	b082      	sub	sp, #8
 8005372:	af00      	add	r7, sp, #0
 8005374:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2200      	movs	r2, #0
 800537a:	210a      	movs	r1, #10
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f9c3 	bl	8005708 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	bf14      	ite	ne
 8005388:	2301      	movne	r3, #1
 800538a:	2300      	moveq	r3, #0
 800538c:	b2db      	uxtb	r3, r3
  }
 800538e:	4618      	mov	r0, r3
 8005390:	3708      	adds	r7, #8
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 8005396:	b580      	push	{r7, lr}
 8005398:	b082      	sub	sp, #8
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	210a      	movs	r1, #10
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 f9af 	bl	8005708 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80053aa:	4603      	mov	r3, r0
  }
 80053ac:	4618      	mov	r0, r3
 80053ae:	3708      	adds	r7, #8
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	210c      	movs	r1, #12
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 f9c0 	bl	8005746 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80053c6:	4603      	mov	r3, r0
  }
 80053c8:	4618      	mov	r0, r3
 80053ca:	3708      	adds	r7, #8
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b082      	sub	sp, #8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ffdc 	bl	8005396 <_ZNK6tflite8Operator20builtin_options_typeEv>
 80053de:	4603      	mov	r3, r0
 80053e0:	2b08      	cmp	r3, #8
 80053e2:	d104      	bne.n	80053ee <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff ffe5 	bl	80053b4 <_ZNK6tflite8Operator15builtin_optionsEv>
 80053ea:	4603      	mov	r3, r0
 80053ec:	e000      	b.n	80053f0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 80053ee:	2300      	movs	r3, #0
  }
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	683a      	ldr	r2, [r7, #0]
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4618      	mov	r0, r3
 800540c:	370c      	adds	r7, #12
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 8005416:	b580      	push	{r7, lr}
 8005418:	b082      	sub	sp, #8
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	3304      	adds	r3, #4
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	6839      	ldr	r1, [r7, #0]
 8005430:	4610      	mov	r0, r2
 8005432:	4798      	blx	r3
 8005434:	bf00      	nop
 8005436:	3708      	adds	r7, #8
 8005438:	46bd      	mov	sp, r7
 800543a:	bd80      	pop	{r7, pc}

0800543c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	683a      	ldr	r2, [r7, #0]
 800544a:	601a      	str	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4618      	mov	r0, r3
 8005450:	370c      	adds	r7, #12
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr

0800545a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	60f8      	str	r0, [r7, #12]
 8005462:	60b9      	str	r1, [r7, #8]
 8005464:	607a      	str	r2, [r7, #4]
 8005466:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 800546e:	f006 fb35 	bl	800badc <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 8005478:	f006 fb30 	bl	800badc <abort>
  TFLITE_DCHECK(allocator != nullptr);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d101      	bne.n	8005486 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8005482:	f006 fb2b 	bl	800badc <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 800548c:	f006 fb26 	bl	800badc <abort>
}
 8005490:	bf00      	nop
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	2b05      	cmp	r3, #5
 80054a6:	d81b      	bhi.n	80054e0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 80054a8:	a201      	add	r2, pc, #4	; (adr r2, 80054b0 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054c9 	.word	0x080054c9
 80054b4:	080054cd 	.word	0x080054cd
 80054b8:	080054d1 	.word	0x080054d1
 80054bc:	080054d5 	.word	0x080054d5
 80054c0:	080054d9 	.word	0x080054d9
 80054c4:	080054dd 	.word	0x080054dd
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80054c8:	2300      	movs	r3, #0
 80054ca:	e00a      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e008      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80054d0:	2302      	movs	r3, #2
 80054d2:	e006      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e004      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80054d8:	2304      	movs	r3, #4
 80054da:	e002      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80054dc:	2305      	movs	r3, #5
 80054de:	e000      	b.n	80054e2 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80054e0:	2300      	movs	r3, #0
}
 80054e2:	4618      	mov	r0, r3
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop

080054f0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}

}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b084      	sub	sp, #16
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	607a      	str	r2, [r7, #4]
 80054fc:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b0a      	cmp	r3, #10
 8005502:	d850      	bhi.n	80055a6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xb6>
 8005504:	a201      	add	r2, pc, #4	; (adr r2, 800550c <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005543 	.word	0x08005543
 8005510:	08005539 	.word	0x08005539
 8005514:	08005561 	.word	0x08005561
 8005518:	0800556b 	.word	0x0800556b
 800551c:	0800557f 	.word	0x0800557f
 8005520:	08005589 	.word	0x08005589
 8005524:	08005593 	.word	0x08005593
 8005528:	08005557 	.word	0x08005557
 800552c:	0800559d 	.word	0x0800559d
 8005530:	08005575 	.word	0x08005575
 8005534:	0800554d 	.word	0x0800554d
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	220a      	movs	r2, #10
 800553c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800553e:	2300      	movs	r3, #0
 8005540:	e03b      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	2201      	movs	r2, #1
 8005546:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005548:	2300      	movs	r3, #0
 800554a:	e036      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	220b      	movs	r2, #11
 8005550:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005552:	2300      	movs	r3, #0
 8005554:	e031      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2207      	movs	r2, #7
 800555a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800555c:	2300      	movs	r3, #0
 800555e:	e02c      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2202      	movs	r2, #2
 8005564:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005566:	2300      	movs	r3, #0
 8005568:	e027      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	2203      	movs	r2, #3
 800556e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005570:	2300      	movs	r3, #0
 8005572:	e022      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2209      	movs	r2, #9
 8005578:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800557a:	2300      	movs	r3, #0
 800557c:	e01d      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	2204      	movs	r2, #4
 8005582:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005584:	2300      	movs	r3, #0
 8005586:	e018      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_STRING:
      *type = kTfLiteString;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2205      	movs	r2, #5
 800558c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800558e:	2300      	movs	r3, #0
 8005590:	e013      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	2206      	movs	r2, #6
 8005596:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8005598:	2300      	movs	r3, #0
 800559a:	e00e      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	2208      	movs	r2, #8
 80055a0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80055a2:	2300      	movs	r3, #0
 80055a4:	e009      	b.n	80055ba <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xca>
    default:
      *type = kTfLiteNoType;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2200      	movs	r2, #0
 80055aa:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	461a      	mov	r2, r3
 80055b0:	4904      	ldr	r1, [pc, #16]	; (80055c4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd4>)
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f7ff fe68 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80055b8:	2301      	movs	r3, #1
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3710      	adds	r7, #16
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
 80055c2:	bf00      	nop
 80055c4:	0800ea5c 	.word	0x0800ea5c

080055c8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op, BuiltinOperator,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80055c8:	b5b0      	push	{r4, r5, r7, lr}
 80055ca:	b08a      	sub	sp, #40	; 0x28
 80055cc:	af02      	add	r7, sp, #8
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	607a      	str	r2, [r7, #4]
 80055d2:	603b      	str	r3, [r7, #0]
 80055d4:	460b      	mov	r3, r1
 80055d6:	72fb      	strb	r3, [r7, #11]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80055d8:	6879      	ldr	r1, [r7, #4]
 80055da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055dc:	683a      	ldr	r2, [r7, #0]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f7ff ff3b 	bl	800545a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 80055e4:	f107 0318 	add.w	r3, r7, #24
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff26 	bl	800543c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 80055f0:	f107 0310 	add.w	r3, r7, #16
 80055f4:	f107 0218 	add.w	r2, r7, #24
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 f936 	bl	800586c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 8005600:	f107 0310 	add.w	r3, r7, #16
 8005604:	2100      	movs	r1, #0
 8005606:	4618      	mov	r0, r3
 8005608:	f000 f96d 	bl	80058e6 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800560c:	4603      	mov	r3, r0
 800560e:	f083 0301 	eor.w	r3, r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	2b00      	cmp	r3, #0
 8005616:	d00c      	beq.n	8005632 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x6a>
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	6879      	ldr	r1, [r7, #4]
 800561c:	4b36      	ldr	r3, [pc, #216]	; (80056f8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 800561e:	9301      	str	r3, [sp, #4]
 8005620:	f240 130b 	movw	r3, #267	; 0x10b
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	4b35      	ldr	r3, [pc, #212]	; (80056fc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8005628:	4a35      	ldr	r2, [pc, #212]	; (8005700 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 800562a:	f7ff fe46 	bl	80052ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800562e:	2401      	movs	r4, #1
 8005630:	e057      	b.n	80056e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f7ff fecc 	bl	80053d0 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8005638:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d047      	beq.n	80056d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 8005640:	69f8      	ldr	r0, [r7, #28]
 8005642:	f7ff fe60 	bl	8005306 <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8005646:	4603      	mov	r3, r0
 8005648:	461d      	mov	r5, r3
    params->activation =
 800564a:	f107 0310 	add.w	r3, r7, #16
 800564e:	4618      	mov	r0, r3
 8005650:	f000 f956 	bl	8005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005654:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8005656:	4628      	mov	r0, r5
 8005658:	f7ff ff1e 	bl	8005498 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800565c:	4603      	mov	r3, r0
    params->activation =
 800565e:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 8005660:	f107 0310 	add.w	r3, r7, #16
 8005664:	4618      	mov	r0, r3
 8005666:	f000 f94b 	bl	8005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800566a:	4604      	mov	r4, r0
 800566c:	69f8      	ldr	r0, [r7, #28]
 800566e:	f7ff fe6a 	bl	8005346 <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8005672:	4603      	mov	r3, r0
 8005674:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8005676:	f107 0310 	add.w	r3, r7, #16
 800567a:	4618      	mov	r0, r3
 800567c:	f000 f940 	bl	8005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8005680:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 8005682:	69f8      	ldr	r0, [r7, #28]
 8005684:	f7ff fe73 	bl	800536e <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 8005688:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 800568a:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 800568c:	69f8      	ldr	r0, [r7, #28]
 800568e:	f7ff fe4a 	bl	8005326 <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 8005692:	4603      	mov	r3, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	d002      	beq.n	800569e <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd6>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d009      	beq.n	80056b0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe8>
 800569c:	e011      	b.n	80056c2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xfa>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 800569e:	f107 0310 	add.w	r3, r7, #16
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 f92c 	bl	8005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2200      	movs	r2, #0
 80056ac:	705a      	strb	r2, [r3, #1]
        break;
 80056ae:	e00f      	b.n	80056d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 80056b0:	f107 0310 	add.w	r3, r7, #16
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 f923 	bl	8005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80056ba:	4603      	mov	r3, r0
 80056bc:	2201      	movs	r2, #1
 80056be:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 80056c0:	e006      	b.n	80056d0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x108>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	490f      	ldr	r1, [pc, #60]	; (8005704 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x13c>)
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fdde 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 80056cc:	2401      	movs	r4, #1
 80056ce:	e008      	b.n	80056e2 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorENS_15BuiltinOperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x11a>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80056d0:	f107 0310 	add.w	r3, r7, #16
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f91f 	bl	8005918 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80056da:	4602      	mov	r2, r0
 80056dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056de:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80056e0:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 80056e2:	f107 0310 	add.w	r3, r7, #16
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f8de 	bl	80058a8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 80056ec:	4623      	mov	r3, r4
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3720      	adds	r7, #32
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bdb0      	pop	{r4, r5, r7, pc}
 80056f6:	bf00      	nop
 80056f8:	0800eae0 	.word	0x0800eae0
 80056fc:	0800ea80 	.word	0x0800ea80
 8005700:	0800eac8 	.word	0x0800eac8
 8005704:	0800eaf4 	.word	0x0800eaf4

08005708 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
 8005710:	460b      	mov	r3, r1
 8005712:	807b      	strh	r3, [r7, #2]
 8005714:	4613      	mov	r3, r2
 8005716:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8005718:	887b      	ldrh	r3, [r7, #2]
 800571a:	4619      	mov	r1, r3
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fb fce9 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005722:	4603      	mov	r3, r0
 8005724:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005726:	89fb      	ldrh	r3, [r7, #14]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d007      	beq.n	800573c <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	89fb      	ldrh	r3, [r7, #14]
 8005730:	4413      	add	r3, r2
 8005732:	4618      	mov	r0, r3
 8005734:	f000 f910 	bl	8005958 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8005738:	4603      	mov	r3, r0
 800573a:	e000      	b.n	800573e <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 800573c:	787b      	ldrb	r3, [r7, #1]
  }
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
 800574e:	460b      	mov	r3, r1
 8005750:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8005752:	887b      	ldrh	r3, [r7, #2]
 8005754:	4619      	mov	r1, r3
 8005756:	6878      	ldr	r0, [r7, #4]
 8005758:	f000 f90c 	bl	8005974 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 800575c:	4603      	mov	r3, r0
  }
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8005766:	b580      	push	{r7, lr}
 8005768:	b086      	sub	sp, #24
 800576a:	af00      	add	r7, sp, #0
 800576c:	60f8      	str	r0, [r7, #12]
 800576e:	460b      	mov	r3, r1
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8005774:	897b      	ldrh	r3, [r7, #10]
 8005776:	4619      	mov	r1, r3
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f7fb fcbb 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800577e:	4603      	mov	r3, r0
 8005780:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8005782:	8afb      	ldrh	r3, [r7, #22]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d007      	beq.n	8005798 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	8afb      	ldrh	r3, [r7, #22]
 800578c:	4413      	add	r3, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f7fc fbc7 	bl	8001f22 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 8005794:	4603      	mov	r3, r0
 8005796:	e000      	b.n	800579a <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 8005798:	687b      	ldr	r3, [r7, #4]
  }
 800579a:	4618      	mov	r0, r3
 800579c:	3718      	adds	r7, #24
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}

080057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	460b      	mov	r3, r1
 80057ac:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80057ae:	887b      	ldrh	r3, [r7, #2]
 80057b0:	4619      	mov	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f8fe 	bl	80059b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80057b8:	4603      	mov	r3, r0
  }
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
 80057ca:	460b      	mov	r3, r1
 80057cc:	807b      	strh	r3, [r7, #2]
 80057ce:	4613      	mov	r3, r2
 80057d0:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 80057d2:	887b      	ldrh	r3, [r7, #2]
 80057d4:	4619      	mov	r1, r3
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f7fb fc8c 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80057dc:	4603      	mov	r3, r0
 80057de:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80057e0:	89fb      	ldrh	r3, [r7, #14]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d007      	beq.n	80057f6 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	89fb      	ldrh	r3, [r7, #14]
 80057ea:	4413      	add	r3, r2
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 f901 	bl	80059f4 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 80057f2:	4603      	mov	r3, r0
 80057f4:	e001      	b.n	80057fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 80057f6:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8005802:	b580      	push	{r7, lr}
 8005804:	b082      	sub	sp, #8
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fc fb60 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8005814:	4603      	mov	r3, r0
 8005816:	4618      	mov	r0, r3
 8005818:	3708      	adds	r7, #8
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8005820:	b580      	push	{r7, lr}
 8005822:	b082      	sub	sp, #8
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f7ff ffe9 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005830:	4602      	mov	r2, r0
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	4293      	cmp	r3, r2
 8005836:	d306      	bcc.n	8005846 <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8005838:	4b09      	ldr	r3, [pc, #36]	; (8005860 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 800583a:	4a0a      	ldr	r2, [pc, #40]	; (8005864 <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 800583c:	f240 1101 	movw	r1, #257	; 0x101
 8005840:	4809      	ldr	r0, [pc, #36]	; (8005868 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8005842:	f006 f953 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f8f5 	bl	8005a36 <_ZNK11flatbuffers6VectorIlE4DataEv>
 800584c:	4603      	mov	r3, r0
 800584e:	6839      	ldr	r1, [r7, #0]
 8005850:	4618      	mov	r0, r3
 8005852:	f000 f8de 	bl	8005a12 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8005856:	4603      	mov	r3, r0
  }
 8005858:	4618      	mov	r0, r3
 800585a:	3708      	adds	r7, #8
 800585c:	46bd      	mov	sp, r7
 800585e:	bd80      	pop	{r7, pc}
 8005860:	0800eb9c 	.word	0x0800eb9c
 8005864:	080dc738 	.word	0x080dc738
 8005868:	0800eba8 	.word	0x0800eba8

0800586c <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b085      	sub	sp, #20
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f8fd 	bl	8005a7a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8005880:	4604      	mov	r4, r0
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	f107 030c 	add.w	r3, r7, #12
 800588a:	4611      	mov	r1, r2
 800588c:	4618      	mov	r0, r3
 800588e:	f7ff fdb3 	bl	80053f8 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8005892:	f107 030c 	add.w	r3, r7, #12
 8005896:	461a      	mov	r2, r3
 8005898:	4621      	mov	r1, r4
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f90e 	bl	8005abc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	3714      	adds	r7, #20
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd90      	pop	{r4, r7, pc}

080058a8 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f91e 	bl	8005af4 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 80058b8:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d009      	beq.n	80058d6 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f000 f923 	bl	8005b0e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 80058c8:	4602      	mov	r2, r0
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4619      	mov	r1, r3
 80058d0:	4610      	mov	r0, r2
 80058d2:	f7ff fda0 	bl	8005416 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2200      	movs	r2, #0
 80058da:	601a      	str	r2, [r3, #0]
      }
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b082      	sub	sp, #8
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f000 f92f 	bl	8005b54 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 80058f6:	4603      	mov	r3, r0
 80058f8:	4618      	mov	r0, r3
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
	return get();
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 f934 	bl	8005b76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 800590e:	4603      	mov	r3, r0
      }
 8005910:	4618      	mov	r0, r3
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f000 f928 	bl	8005b76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005926:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4618      	mov	r0, r3
 800592c:	f000 f8e2 	bl	8005af4 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005930:	4602      	mov	r2, r0
 8005932:	2300      	movs	r3, #0
 8005934:	6013      	str	r3, [r2, #0]
	return __p;
 8005936:	68fb      	ldr	r3, [r7, #12]
      }
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	4603      	mov	r3, r0
 8005948:	71fb      	strb	r3, [r7, #7]
    return t;
 800594a:	79fb      	ldrb	r3, [r7, #7]
}
 800594c:	4618      	mov	r0, r3
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff ffeb 	bl	8005940 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 800596a:	4603      	mov	r3, r0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3708      	adds	r7, #8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8005980:	887b      	ldrh	r3, [r7, #2]
 8005982:	4619      	mov	r1, r3
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f7fb fbb5 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800598a:	4603      	mov	r3, r0
 800598c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800598e:	687a      	ldr	r2, [r7, #4]
 8005990:	89fb      	ldrh	r3, [r7, #14]
 8005992:	4413      	add	r3, r2
 8005994:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005996:	89fb      	ldrh	r3, [r7, #14]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d006      	beq.n	80059aa <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 800599c:	68b8      	ldr	r0, [r7, #8]
 800599e:	f7fc fab2 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80059a2:	4602      	mov	r2, r0
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4413      	add	r3, r2
                        : nullptr;
 80059a8:	e000      	b.n	80059ac <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80059aa:	2300      	movs	r3, #0
  }
 80059ac:	4618      	mov	r0, r3
 80059ae:	3710      	adds	r7, #16
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	460b      	mov	r3, r1
 80059be:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80059c0:	887b      	ldrh	r3, [r7, #2]
 80059c2:	4619      	mov	r1, r3
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f7fb fb95 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80059ca:	4603      	mov	r3, r0
 80059cc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80059ce:	687a      	ldr	r2, [r7, #4]
 80059d0:	89fb      	ldrh	r3, [r7, #14]
 80059d2:	4413      	add	r3, r2
 80059d4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80059d6:	89fb      	ldrh	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 80059dc:	68b8      	ldr	r0, [r7, #8]
 80059de:	f7fc fa92 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80059e2:	4602      	mov	r2, r0
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4413      	add	r3, r2
                        : nullptr;
 80059e8:	e000      	b.n	80059ec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80059ea:	2300      	movs	r3, #0
  }
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f993 3000 	ldrsb.w	r3, [r3]
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f8c4 	bl	8005b90 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8005a08:	4603      	mov	r3, r0
}
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}

08005a12 <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8005a12:	b580      	push	{r7, lr}
 8005a14:	b082      	sub	sp, #8
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
 8005a1a:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	4413      	add	r3, r2
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7fc fb06 	bl	8002038 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8005a2c:	4603      	mov	r3, r0
  }
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}

08005a36 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8005a36:	b480      	push	{r7}
 8005a38:	b083      	sub	sp, #12
 8005a3a:	af00      	add	r7, sp, #0
 8005a3c:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	3304      	adds	r3, #4
  }
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005a4e:	b480      	push	{r7}
 8005a50:	b083      	sub	sp, #12
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8005a7a:	b580      	push	{r7, lr}
 8005a7c:	b084      	sub	sp, #16
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	2104      	movs	r1, #4
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	4798      	blx	r3
 8005a90:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	4619      	mov	r1, r3
 8005a96:	2004      	movs	r0, #4
 8005a98:	f7ff fc29 	bl	80052ee <_ZnwjPv>
 8005a9c:	4603      	mov	r3, r0
  }
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8005aa6:	b480      	push	{r7}
 8005aa8:	b083      	sub	sp, #12
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	370c      	adds	r7, #12
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aba:	4770      	bx	lr

08005abc <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8005abc:	b5b0      	push	{r4, r5, r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 8005ac8:	68fc      	ldr	r4, [r7, #12]
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f7ff ffe9 	bl	8005aa6 <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	681d      	ldr	r5, [r3, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f7ff ffb8 	bl	8005a4e <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8005ade:	4603      	mov	r3, r0
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	4629      	mov	r1, r5
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 f81f 	bl	8005b28 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bdb0      	pop	{r4, r5, r7, pc}

08005af4 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b082      	sub	sp, #8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f862 	bl	8005bc8 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005b04:	4603      	mov	r3, r0
 8005b06:	4618      	mov	r0, r3
 8005b08:	3708      	adds	r7, #8
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bd80      	pop	{r7, pc}

08005b0e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	b082      	sub	sp, #8
 8005b12:	af00      	add	r7, sp, #0
 8005b14:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f000 f862 	bl	8005be2 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8005b1e:	4603      	mov	r3, r0
 8005b20:	4618      	mov	r0, r3
 8005b22:	3708      	adds	r7, #8
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8005b28:	b590      	push	{r4, r7, lr}
 8005b2a:	b085      	sub	sp, #20
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8005b34:	68fc      	ldr	r4, [r7, #12]
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7ff ff94 	bl	8005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	f107 0308 	add.w	r3, r7, #8
 8005b42:	4619      	mov	r1, r3
 8005b44:	4620      	mov	r0, r4
 8005b46:	f000 f864 	bl	8005c12 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd90      	pop	{r4, r7, pc}

08005b54 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f80a 	bl	8005b76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	bf14      	ite	ne
 8005b68:	2301      	movne	r3, #1
 8005b6a:	2300      	moveq	r3, #0
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f000 f85f 	bl	8005c44 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8005b86:	4603      	mov	r3, r0
 8005b88:	4618      	mov	r0, r3
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005b90:	b480      	push	{r7}
 8005b92:	b083      	sub	sp, #12
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	71fb      	strb	r3, [r7, #7]
    return t;
 8005b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	370c      	adds	r7, #12
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8005baa:	b480      	push	{r7}
 8005bac:	b083      	sub	sp, #12
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	ee07 3a90 	vmov	s15, r3
}
 8005bba:	eeb0 0a67 	vmov.f32	s0, s15
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 f844 	bl	8005c60 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	4618      	mov	r0, r3
 8005bdc:	3708      	adds	r7, #8
 8005bde:	46bd      	mov	sp, r7
 8005be0:	bd80      	pop	{r7, pc}

08005be2 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f000 f843 	bl	8005c78 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3708      	adds	r7, #8
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}

08005bfc <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4618      	mov	r0, r3
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8005c12:	b5b0      	push	{r4, r5, r7, lr}
 8005c14:	b084      	sub	sp, #16
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8005c1e:	68fc      	ldr	r4, [r7, #12]
 8005c20:	68b8      	ldr	r0, [r7, #8]
 8005c22:	f7ff ffeb 	bl	8005bfc <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005c26:	4605      	mov	r5, r0
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f7ff ff1b 	bl	8005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	461a      	mov	r2, r3
 8005c32:	4629      	mov	r1, r5
 8005c34:	4620      	mov	r0, r4
 8005c36:	f000 f82c 	bl	8005c92 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bdb0      	pop	{r4, r5, r7, pc}

08005c44 <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f000 f83d 	bl	8005cce <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8005c54:	4603      	mov	r3, r0
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}

08005c60 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005c60:	b580      	push	{r7, lr}
 8005c62:	b082      	sub	sp, #8
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 f85c 	bl	8005d26 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4618      	mov	r0, r3
 8005c72:	3708      	adds	r7, #8
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bd80      	pop	{r7, pc}

08005c78 <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 f830 	bl	8005ce8 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8005c92:	b590      	push	{r4, r7, lr}
 8005c94:	b085      	sub	sp, #20
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	60f8      	str	r0, [r7, #12]
 8005c9a:	60b9      	str	r1, [r7, #8]
 8005c9c:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8005c9e:	68fc      	ldr	r4, [r7, #12]
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f7ff fedf 	bl	8005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	4619      	mov	r1, r3
 8005caa:	4620      	mov	r0, r4
 8005cac:	f000 f828 	bl	8005d00 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	1d1c      	adds	r4, r3, #4
 8005cb4:	68b8      	ldr	r0, [r7, #8]
 8005cb6:	f7ff ffa1 	bl	8005bfc <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	f000 f83f 	bl	8005d42 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3714      	adds	r7, #20
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}

08005cce <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b082      	sub	sp, #8
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 f843 	bl	8005d64 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b082      	sub	sp, #8
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f843 	bl	8005d7c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8005d00:	b590      	push	{r4, r7, lr}
 8005d02:	b083      	sub	sp, #12
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8005d0a:	687c      	ldr	r4, [r7, #4]
 8005d0c:	6838      	ldr	r0, [r7, #0]
 8005d0e:	f7ff fea9 	bl	8005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005d12:	4603      	mov	r3, r0
 8005d14:	4619      	mov	r1, r3
 8005d16:	4620      	mov	r0, r4
 8005d18:	f000 f83d 	bl	8005d96 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4618      	mov	r0, r3
 8005d20:	370c      	adds	r7, #12
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}

08005d26 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b082      	sub	sp, #8
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 f840 	bl	8005db8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005d42:	b580      	push	{r7, lr}
 8005d44:	b082      	sub	sp, #8
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
 8005d4a:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005d4c:	6838      	ldr	r0, [r7, #0]
 8005d4e:	f7ff ff55 	bl	8005bfc <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8005d52:	4603      	mov	r3, r0
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	601a      	str	r2, [r3, #0]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	f000 f82e 	bl	8005dce <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4618      	mov	r0, r3
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b082      	sub	sp, #8
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 f82f 	bl	8005dea <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	4618      	mov	r0, r3
 8005d90:	3708      	adds	r7, #8
 8005d92:	46bd      	mov	sp, r7
 8005d94:	bd80      	pop	{r7, pc}

08005d96 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
 8005d9e:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8005da0:	6838      	ldr	r0, [r7, #0]
 8005da2:	f7ff fe5f 	bl	8005a64 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8005da6:	4602      	mov	r2, r0
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6812      	ldr	r2, [r2, #0]
 8005dac:	601a      	str	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	4618      	mov	r0, r3
 8005db2:	3708      	adds	r7, #8
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}

08005db8 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	370c      	adds	r7, #12
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8005dce:	b580      	push	{r7, lr}
 8005dd0:	b082      	sub	sp, #8
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	3304      	adds	r3, #4
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f000 f810 	bl	8005e00 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005de0:	4603      	mov	r3, r0
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005dea:	b480      	push	{r7}
 8005dec:	b083      	sub	sp, #12
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	6078      	str	r0, [r7, #4]
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	370c      	adds	r7, #12
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr

08005e16 <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b082      	sub	sp, #8
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 f8d9 	bl	8005fd8 <_ZNK11flatbuffers6VectorIcE4DataEv>
 8005e26:	4603      	mov	r3, r0
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3708      	adds	r7, #8
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005e30:	b480      	push	{r7}
 8005e32:	af00      	add	r7, sp, #0
  return names;
 8005e34:	4b02      	ldr	r3, [pc, #8]	; (8005e40 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	080dc808 	.word	0x080dc808

08005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b084      	sub	sp, #16
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BATCH_MATMUL)) return "";
 8005e4e:	2300      	movs	r3, #0
 8005e50:	72bb      	strb	r3, [r7, #10]
 8005e52:	237e      	movs	r3, #126	; 0x7e
 8005e54:	72fb      	strb	r3, [r7, #11]
 8005e56:	f107 020b 	add.w	r2, r7, #11
 8005e5a:	f107 010a 	add.w	r1, r7, #10
 8005e5e:	1dfb      	adds	r3, r7, #7
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 f8c5 	bl	8005ff0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d001      	beq.n	8005e70 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8005e6c:	4b07      	ldr	r3, [pc, #28]	; (8005e8c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8005e6e:	e008      	b.n	8005e82 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005e70:	79fb      	ldrb	r3, [r7, #7]
 8005e72:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 8005e74:	f7ff ffdc 	bl	8005e30 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 8005e78:	4602      	mov	r2, r0
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	681b      	ldr	r3, [r3, #0]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	0800f1f0 	.word	0x0800f1f0

08005e90 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int8_t>(VT_BUILTIN_CODE, 0));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	2104      	movs	r1, #4
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	f7ff fc8f 	bl	80057c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	b2db      	uxtb	r3, r3
  }
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3708      	adds	r7, #8
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b082      	sub	sp, #8
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2106      	movs	r1, #6
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f000 f8b2 	bl	8006026 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005ec2:	4603      	mov	r3, r0
  }
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3708      	adds	r7, #8
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	2108      	movs	r1, #8
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7ff fc43 	bl	8005766 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005ee0:	4603      	mov	r3, r0
  }
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3708      	adds	r7, #8
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
	...

08005eec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b088      	sub	sp, #32
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	60f8      	str	r0, [r7, #12]
 8005ef4:	60b9      	str	r1, [r7, #8]
 8005ef6:	607a      	str	r2, [r7, #4]
 8005ef8:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8005efa:	2300      	movs	r3, #0
 8005efc:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2200      	movs	r2, #0
 8005f02:	601a      	str	r2, [r3, #0]
  auto builtin_code = opcode->builtin_code();
 8005f04:	68f8      	ldr	r0, [r7, #12]
 8005f06:	f7ff ffc3 	bl	8005e90 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8005f0e:	68f8      	ldr	r0, [r7, #12]
 8005f10:	f7ff ffdc 	bl	8005ecc <_ZNK6tflite12OperatorCode7versionEv>
 8005f14:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 8005f16:	7fbb      	ldrb	r3, [r7, #30]
 8005f18:	2b7e      	cmp	r3, #126	; 0x7e
 8005f1a:	d908      	bls.n	8005f2e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8005f1c:	7fbb      	ldrb	r3, [r7, #30]
 8005f1e:	461a      	mov	r2, r3
 8005f20:	492a      	ldr	r1, [pc, #168]	; (8005fcc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f7ff f9b0 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	77fb      	strb	r3, [r7, #31]
 8005f2c:	e048      	b.n	8005fc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005f2e:	7fbb      	ldrb	r3, [r7, #30]
 8005f30:	2b20      	cmp	r3, #32
 8005f32:	d01a      	beq.n	8005f6a <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	7fb9      	ldrb	r1, [r7, #30]
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	68b8      	ldr	r0, [r7, #8]
 8005f40:	4798      	blx	r3
 8005f42:	4602      	mov	r2, r0
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d137      	bne.n	8005fc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8005f50:	7fbb      	ldrb	r3, [r7, #30]
 8005f52:	4618      	mov	r0, r3
 8005f54:	f7ff ff76 	bl	8005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	491c      	ldr	r1, [pc, #112]	; (8005fd0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8005f5e:	6878      	ldr	r0, [r7, #4]
 8005f60:	f7ff f992 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 8005f64:	2301      	movs	r3, #1
 8005f66:	77fb      	strb	r3, [r7, #31]
 8005f68:	e02a      	b.n	8005fc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7ff ffa0 	bl	8005eb0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005f70:	4603      	mov	r3, r0
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	bf0c      	ite	eq
 8005f76:	2301      	moveq	r3, #1
 8005f78:	2300      	movne	r3, #0
 8005f7a:	b2db      	uxtb	r3, r3
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d006      	beq.n	8005f8e <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8005f80:	4914      	ldr	r1, [pc, #80]	; (8005fd4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7ff f980 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	77fb      	strb	r3, [r7, #31]
 8005f8c:	e018      	b.n	8005fc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	f7ff ff8e 	bl	8005eb0 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005f94:	4603      	mov	r3, r0
 8005f96:	4618      	mov	r0, r3
 8005f98:	f7ff ff3d 	bl	8005e16 <_ZNK11flatbuffers6String5c_strEv>
 8005f9c:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69ba      	ldr	r2, [r7, #24]
 8005fa8:	6979      	ldr	r1, [r7, #20]
 8005faa:	68b8      	ldr	r0, [r7, #8]
 8005fac:	4798      	blx	r3
 8005fae:	4602      	mov	r2, r0
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d101      	bne.n	8005fc0 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 8005fc0:	7ffb      	ldrb	r3, [r7, #31]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3720      	adds	r7, #32
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	0800f1f4 	.word	0x0800f1f4
 8005fd0:	0800f248 	.word	0x0800f248
 8005fd4:	0800f280 	.word	0x0800f280

08005fd8 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 8005fd8:	b480      	push	{r7}
 8005fda:	b083      	sub	sp, #12
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	3304      	adds	r3, #4
  }
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	370c      	adds	r7, #12
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr

08005ff0 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	60b9      	str	r1, [r7, #8]
 8005ffa:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	429a      	cmp	r2, r3
 8006006:	d305      	bcc.n	8006014 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	781a      	ldrb	r2, [r3, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d201      	bcs.n	8006018 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 8006014:	2301      	movs	r3, #1
 8006016:	e000      	b.n	800601a <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8006026:	b580      	push	{r7, lr}
 8006028:	b082      	sub	sp, #8
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
 800602e:	460b      	mov	r3, r1
 8006030:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8006032:	887b      	ldrh	r3, [r7, #2]
 8006034:	4619      	mov	r1, r3
 8006036:	6878      	ldr	r0, [r7, #4]
 8006038:	f000 f805 	bl	8006046 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 800603c:	4603      	mov	r3, r0
  }
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}

08006046 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8006046:	b580      	push	{r7, lr}
 8006048:	b084      	sub	sp, #16
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	460b      	mov	r3, r1
 8006050:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8006052:	887b      	ldrh	r3, [r7, #2]
 8006054:	4619      	mov	r1, r3
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f7fb f84c 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800605c:	4603      	mov	r3, r0
 800605e:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	89fb      	ldrh	r3, [r7, #14]
 8006064:	4413      	add	r3, r2
 8006066:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d006      	beq.n	800607c <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 800606e:	68b8      	ldr	r0, [r7, #8]
 8006070:	f7fb ff49 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8006074:	4602      	mov	r2, r0
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	4413      	add	r3, r2
                        : nullptr;
 800607a:	e000      	b.n	800607e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800607c:	2300      	movs	r3, #0
  }
 800607e:	4618      	mov	r0, r3
 8006080:	3710      	adds	r7, #16
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>:

#include "tensorflow/lite/c/common.h"

namespace tflite {

TfLiteStatus ResetVariableTensor(TfLiteTensor* tensor) {
 8006086:	b480      	push	{r7}
 8006088:	b087      	sub	sp, #28
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  if (!tensor->is_variable) {
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006094:	f083 0301 	eor.w	r3, r3, #1
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x1c>
    return kTfLiteOk;
 800609e:	2300      	movs	r3, #0
 80060a0:	e01e      	b.n	80060e0 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x5a>
  }
  // TODO(b/115961645): Implement - If a variable tensor has a buffer, reset it
  // to the value of the buffer.
  int value = 0;
 80060a2:	2300      	movs	r3, #0
 80060a4:	617b      	str	r3, [r7, #20]
  if (tensor->type == kTfLiteInt8) {
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	781b      	ldrb	r3, [r3, #0]
 80060aa:	2b09      	cmp	r3, #9
 80060ac:	d102      	bne.n	80060b4 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x2e>
    value = tensor->params.zero_point;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	617b      	str	r3, [r7, #20]
#if __ANDROID__ || defined(__x86_64__) || defined(__i386__) || \
    defined(__i386) || defined(__x86__) || defined(__X86__) || \
    defined(_X86_) || defined(_M_IX86) || defined(_M_X64)
  memset(tensor->data.raw, value, tensor->bytes);
#else
  char* raw_ptr = tensor->data.raw;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80060ba:	2300      	movs	r3, #0
 80060bc:	60fb      	str	r3, [r7, #12]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	699b      	ldr	r3, [r3, #24]
 80060c2:	68fa      	ldr	r2, [r7, #12]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d20a      	bcs.n	80060de <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x58>
    *raw_ptr = value;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	701a      	strb	r2, [r3, #0]
    raw_ptr++;
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	3301      	adds	r3, #1
 80060d4:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < tensor->bytes; ++i) {
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	e7ef      	b.n	80060be <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor+0x38>
  }
#endif
  return kTfLiteOk;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b082      	sub	sp, #8
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80060f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80060fa:	f005 fcc9 	bl	800ba90 <roundf>
 80060fe:	eef0 7a40 	vmov.f32	s15, s0
 8006102:	eeb0 0a67 	vmov.f32	s0, s15
 8006106:	3708      	adds	r7, #8
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}

0800610c <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800610c:	b480      	push	{r7}
 800610e:	af00      	add	r7, sp, #0
 8006110:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006114:	4618      	mov	r0, r3
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 8006120:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8006124:	b088      	sub	sp, #32
 8006126:	af00      	add	r7, sp, #0
 8006128:	ed87 0b02 	vstr	d0, [r7, #8]
 800612c:	6078      	str	r0, [r7, #4]
 800612e:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800613c:	f7fa fcd4 	bl	8000ae8 <__aeabi_dcmpeq>
 8006140:	4603      	mov	r3, r0
 8006142:	2b00      	cmp	r3, #0
 8006144:	d006      	beq.n	8006154 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	2200      	movs	r2, #0
 8006150:	601a      	str	r2, [r3, #0]
 8006152:	e06a      	b.n	800622a <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 8006154:	6838      	ldr	r0, [r7, #0]
 8006156:	ed97 0b02 	vldr	d0, [r7, #8]
 800615a:	f005 fc19 	bl	800b990 <frexp>
 800615e:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8006162:	f04f 0200 	mov.w	r2, #0
 8006166:	4b33      	ldr	r3, [pc, #204]	; (8006234 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8006168:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800616c:	f7fa fa54 	bl	8000618 <__aeabi_dmul>
 8006170:	4603      	mov	r3, r0
 8006172:	460c      	mov	r4, r1
 8006174:	ec44 3b17 	vmov	d7, r3, r4
 8006178:	eeb0 0a47 	vmov.f32	s0, s14
 800617c:	eef0 0a67 	vmov.f32	s1, s15
 8006180:	f000 f88c 	bl	800629c <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8006184:	ec54 3b10 	vmov	r3, r4, d0
 8006188:	4618      	mov	r0, r3
 800618a:	4621      	mov	r1, r4
 800618c:	f7fa fd84 	bl	8000c98 <__aeabi_d2lz>
 8006190:	4603      	mov	r3, r0
 8006192:	460c      	mov	r4, r1
 8006194:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8006198:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800619c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80061a0:	f04f 0200 	mov.w	r2, #0
 80061a4:	4299      	cmp	r1, r3
 80061a6:	eb72 0304 	sbcs.w	r3, r2, r4
 80061aa:	da01      	bge.n	80061b0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 80061ac:	f005 fc96 	bl	800badc <abort>
  if (q_fixed == (1ll << 31)) {
 80061b0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061b4:	2c00      	cmp	r4, #0
 80061b6:	bf08      	it	eq
 80061b8:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 80061bc:	d114      	bne.n	80061e8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 80061be:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 80061c2:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 80061c6:	4611      	mov	r1, r2
 80061c8:	f04f 0200 	mov.w	r2, #0
 80061cc:	eb1b 0301 	adds.w	r3, fp, r1
 80061d0:	eb4c 0402 	adc.w	r4, ip, r2
 80061d4:	1064      	asrs	r4, r4, #1
 80061d6:	ea4f 0333 	mov.w	r3, r3, rrx
 80061da:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	1c5a      	adds	r2, r3, #1
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 80061e8:	f7ff ff90 	bl	800610c <_ZNSt14numeric_limitsIlE3maxEv>
 80061ec:	4603      	mov	r3, r0
 80061ee:	4619      	mov	r1, r3
 80061f0:	ea4f 72e1 	mov.w	r2, r1, asr #31
 80061f4:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80061f8:	4299      	cmp	r1, r3
 80061fa:	eb72 0304 	sbcs.w	r3, r2, r4
 80061fe:	da01      	bge.n	8006204 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 8006200:	f005 fc6c 	bl	800badc <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f113 0f1f 	cmn.w	r3, #31
 800620c:	da08      	bge.n	8006220 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2200      	movs	r2, #0
 8006212:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 8006220:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8006224:	461a      	mov	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	601a      	str	r2, [r3, #0]
}
 800622a:	3720      	adds	r7, #32
 800622c:	46bd      	mov	sp, r7
 800622e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8006232:	bf00      	nop
 8006234:	41e00000 	.word	0x41e00000

08006238 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	ed93 7a00 	vldr	s14, [r3]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	edd3 7a00 	vldr	s15, [r3]
 800624e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006256:	d501      	bpl.n	800625c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	e000      	b.n	800625e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800625c:	687b      	ldr	r3, [r7, #4]
    }
 800625e:	4618      	mov	r0, r3
 8006260:	370c      	adds	r7, #12
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr

0800626a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800626a:	b480      	push	{r7}
 800626c:	b083      	sub	sp, #12
 800626e:	af00      	add	r7, sp, #0
 8006270:	6078      	str	r0, [r7, #4]
 8006272:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	ed93 7a00 	vldr	s14, [r3]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	edd3 7a00 	vldr	s15, [r3]
 8006280:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8006284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006288:	d501      	bpl.n	800628e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	e000      	b.n	8006290 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800628e:	687b      	ldr	r3, [r7, #4]
    }
 8006290:	4618      	mov	r0, r3
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	ed87 0b00 	vstr	d0, [r7]
 80062a6:	ed97 0b00 	vldr	d0, [r7]
 80062aa:	f005 fba7 	bl	800b9fc <round>
 80062ae:	eeb0 7a40 	vmov.f32	s14, s0
 80062b2:	eef0 7a60 	vmov.f32	s15, s1
 80062b6:	eeb0 0a47 	vmov.f32	s0, s14
 80062ba:	eef0 0a67 	vmov.f32	s1, s15
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80062ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80062d2:	f7ff ff0b 	bl	80060ec <_ZSt5roundf>
 80062d6:	eef0 7a40 	vmov.f32	s15, s0
 80062da:	eeb0 0a67 	vmov.f32	s0, s15
 80062de:	3708      	adds	r7, #8
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}

080062e4 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 80062e4:	b480      	push	{r7}
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 80062ec:	4618      	mov	r0, r3
 80062ee:	46bd      	mov	sp, r7
 80062f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f4:	4770      	bx	lr

080062f6 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 80062f6:	b480      	push	{r7}
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	237f      	movs	r3, #127	; 0x7f
 80062fc:	4618      	mov	r0, r3
 80062fe:	46bd      	mov	sp, r7
 8006300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006304:	4770      	bx	lr

08006306 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 8006306:	b480      	push	{r7}
 8006308:	af00      	add	r7, sp, #0
 800630a:	2300      	movs	r3, #0
 800630c:	4618      	mov	r0, r3
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 8006316:	b480      	push	{r7}
 8006318:	af00      	add	r7, sp, #0
 800631a:	23ff      	movs	r3, #255	; 0xff
 800631c:	4618      	mov	r0, r3
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800632e:	4618      	mov	r0, r3
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr
 8006338:	ffff8000 	.word	0xffff8000

0800633c <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800633c:	b480      	push	{r7}
 800633e:	af00      	add	r7, sp, #0
 8006340:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006344:	4618      	mov	r0, r3
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800634e:	b490      	push	{r4, r7}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	ed87 0b00 	vstr	d0, [r7]
 8006358:	683b      	ldr	r3, [r7, #0]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8006360:	ec44 3b17 	vmov	d7, r3, r4
 8006364:	eeb0 0a47 	vmov.f32	s0, s14
 8006368:	eef0 0a67 	vmov.f32	s1, s15
 800636c:	3708      	adds	r7, #8
 800636e:	46bd      	mov	sp, r7
 8006370:	bc90      	pop	{r4, r7}
 8006372:	4770      	bx	lr
 8006374:	0000      	movs	r0, r0
	...

08006378 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8006378:	b5b0      	push	{r4, r5, r7, lr}
 800637a:	b08e      	sub	sp, #56	; 0x38
 800637c:	af02      	add	r7, sp, #8
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	4618      	mov	r0, r3
 800638c:	f7fa f8ec 	bl	8000568 <__aeabi_f2d>
 8006390:	4604      	mov	r4, r0
 8006392:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	4618      	mov	r0, r3
 800639a:	f7fa f8e5 	bl	8000568 <__aeabi_f2d>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 80063a2:	4620      	mov	r0, r4
 80063a4:	4629      	mov	r1, r5
 80063a6:	f7fa f937 	bl	8000618 <__aeabi_dmul>
 80063aa:	4603      	mov	r3, r0
 80063ac:	460c      	mov	r4, r1
 80063ae:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d04a      	beq.n	800644e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	4618      	mov	r0, r3
 80063be:	f7fa f8d3 	bl	8000568 <__aeabi_f2d>
 80063c2:	4603      	mov	r3, r0
 80063c4:	460c      	mov	r4, r1
 80063c6:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 80063ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80063d2:	f7f9 ff69 	bl	80002a8 <__aeabi_dsub>
 80063d6:	4603      	mov	r3, r0
 80063d8:	460c      	mov	r4, r1
 80063da:	ec44 3b17 	vmov	d7, r3, r4
 80063de:	eeb0 0a47 	vmov.f32	s0, s14
 80063e2:	eef0 0a67 	vmov.f32	s1, s15
 80063e6:	f7ff ffb2 	bl	800634e <_ZSt3absd>
 80063ea:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80063ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f0:	68db      	ldr	r3, [r3, #12]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fa f8b8 	bl	8000568 <__aeabi_f2d>
 80063f8:	4603      	mov	r3, r0
 80063fa:	460c      	mov	r4, r1
 80063fc:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 8006400:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006404:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8006408:	f7fa fa30 	bl	800086c <__aeabi_ddiv>
 800640c:	4603      	mov	r3, r0
 800640e:	460c      	mov	r4, r1
 8006410:	4618      	mov	r0, r3
 8006412:	4621      	mov	r1, r4
 8006414:	2301      	movs	r3, #1
 8006416:	461c      	mov	r4, r3
 8006418:	a316      	add	r3, pc, #88	; (adr r3, 8006474 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f7fa fb77 	bl	8000b10 <__aeabi_dcmple>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 8006428:	2300      	movs	r3, #0
 800642a:	461c      	mov	r4, r3
 800642c:	b2e3      	uxtb	r3, r4
 800642e:	f083 0301 	eor.w	r3, r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00a      	beq.n	800644e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	695c      	ldr	r4, [r3, #20]
 800643c:	68f8      	ldr	r0, [r7, #12]
 800643e:	4b0a      	ldr	r3, [pc, #40]	; (8006468 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf0>)
 8006440:	9300      	str	r3, [sp, #0]
 8006442:	239a      	movs	r3, #154	; 0x9a
 8006444:	4a09      	ldr	r2, [pc, #36]	; (800646c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf4>)
 8006446:	490a      	ldr	r1, [pc, #40]	; (8006470 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8006448:	47a0      	blx	r4
 800644a:	2301      	movs	r3, #1
 800644c:	e008      	b.n	8006460 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xe8>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800644e:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8006450:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006452:	9300      	str	r3, [sp, #0]
 8006454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	f000 f80f 	bl	800647c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3730      	adds	r7, #48	; 0x30
 8006464:	46bd      	mov	sp, r7
 8006466:	bdb0      	pop	{r4, r5, r7, pc}
 8006468:	0800f478 	.word	0x0800f478
 800646c:	0800f2b8 	.word	0x0800f2b8
 8006470:	0800f364 	.word	0x0800f364
 8006474:	47ae147b 	.word	0x47ae147b
 8006478:	3f947ae1 	.word	0x3f947ae1

0800647c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800647c:	b590      	push	{r4, r7, lr}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af02      	add	r7, sp, #8
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
 8006488:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	ed93 7a03 	vldr	s14, [r3, #12]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	edd3 7a03 	vldr	s15, [r3, #12]
 8006496:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800649a:	ee17 0a90 	vmov	r0, s15
 800649e:	f7fa f863 	bl	8000568 <__aeabi_f2d>
 80064a2:	4603      	mov	r3, r0
 80064a4:	460c      	mov	r4, r1
 80064a6:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 80064aa:	2301      	movs	r3, #1
 80064ac:	461c      	mov	r4, r3
 80064ae:	f04f 0200 	mov.w	r2, #0
 80064b2:	f04f 0300 	mov.w	r3, #0
 80064b6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80064ba:	f7fa fb33 	bl	8000b24 <__aeabi_dcmpge>
 80064be:	4603      	mov	r3, r0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d101      	bne.n	80064c8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 80064c4:	2300      	movs	r3, #0
 80064c6:	461c      	mov	r4, r3
 80064c8:	b2e3      	uxtb	r3, r4
 80064ca:	f083 0301 	eor.w	r3, r3, #1
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	695c      	ldr	r4, [r3, #20]
 80064d8:	68f8      	ldr	r0, [r7, #12]
 80064da:	4b0f      	ldr	r3, [pc, #60]	; (8006518 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	23a7      	movs	r3, #167	; 0xa7
 80064e0:	4a0e      	ldr	r2, [pc, #56]	; (800651c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80064e2:	490f      	ldr	r1, [pc, #60]	; (8006520 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80064e4:	47a0      	blx	r4
 80064e6:	2301      	movs	r3, #1
 80064e8:	e012      	b.n	8006510 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x94>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	68db      	ldr	r3, [r3, #12]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fa f83a 	bl	8000568 <__aeabi_f2d>
 80064f4:	4603      	mov	r3, r0
 80064f6:	460c      	mov	r4, r1
 80064f8:	461a      	mov	r2, r3
 80064fa:	4623      	mov	r3, r4
 80064fc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8006500:	f7fa f9b4 	bl	800086c <__aeabi_ddiv>
 8006504:	4603      	mov	r3, r0
 8006506:	460c      	mov	r4, r1
 8006508:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800650a:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	371c      	adds	r7, #28
 8006514:	46bd      	mov	sp, r7
 8006516:	bd90      	pop	{r4, r7, pc}
 8006518:	0800f49c 	.word	0x0800f49c
 800651c:	0800f2b8 	.word	0x0800f2b8
 8006520:	0800f364 	.word	0x0800f364

08006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8006524:	b580      	push	{r7, lr}
 8006526:	b082      	sub	sp, #8
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	ed87 0a00 	vstr	s0, [r7]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8006536:	ed97 7a00 	vldr	s14, [r7]
 800653a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800653e:	eeb0 0a66 	vmov.f32	s0, s13
 8006542:	f7ff febf 	bl	80062c4 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8006546:	eef0 7a40 	vmov.f32	s15, s0
 800654a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800654e:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	685b      	ldr	r3, [r3, #4]
  };
 8006556:	4413      	add	r3, r2
 8006558:	4618      	mov	r0, r3
 800655a:	3708      	adds	r7, #8
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 8006560:	b580      	push	{r7, lr}
 8006562:	b08e      	sub	sp, #56	; 0x38
 8006564:	af00      	add	r7, sp, #0
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4603      	mov	r3, r0
 800656e:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691b      	ldr	r3, [r3, #16]
 800657a:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800657c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657e:	617b      	str	r3, [r7, #20]
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d118      	bne.n	80065bc <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800658a:	f107 0314 	add.w	r3, r7, #20
 800658e:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8006684 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 8006592:	4618      	mov	r0, r3
 8006594:	f7ff ffc6 	bl	8006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006598:	4603      	mov	r3, r0
 800659a:	61fb      	str	r3, [r7, #28]
 800659c:	f107 021c 	add.w	r2, r7, #28
 80065a0:	f107 0308 	add.w	r3, r7, #8
 80065a4:	4611      	mov	r1, r2
 80065a6:	4618      	mov	r0, r3
 80065a8:	f000 f8d6 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 80065ac:	4603      	mov	r3, r0
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065b2:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80065b8:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 80065ba:	e05f      	b.n	800667c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 80065bc:	7bfb      	ldrb	r3, [r7, #15]
 80065be:	2b03      	cmp	r3, #3
 80065c0:	d129      	bne.n	8006616 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 80065c2:	f107 0314 	add.w	r3, r7, #20
 80065c6:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8006684 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7ff ffaa 	bl	8006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80065d0:	4603      	mov	r3, r0
 80065d2:	623b      	str	r3, [r7, #32]
 80065d4:	f107 0220 	add.w	r2, r7, #32
 80065d8:	f107 0308 	add.w	r3, r7, #8
 80065dc:	4611      	mov	r1, r2
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 f8ba 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 80065e4:	4603      	mov	r3, r0
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065ea:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80065ec:	f107 0314 	add.w	r3, r7, #20
 80065f0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80065f4:	4618      	mov	r0, r3
 80065f6:	f7ff ff95 	bl	8006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80065fa:	4603      	mov	r3, r0
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
 80065fe:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8006602:	1d3b      	adds	r3, r7, #4
 8006604:	4611      	mov	r1, r2
 8006606:	4618      	mov	r0, r3
 8006608:	f000 f892 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 800660c:	4603      	mov	r3, r0
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006612:	601a      	str	r2, [r3, #0]
}
 8006614:	e032      	b.n	800667c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 8006616:	7bfb      	ldrb	r3, [r7, #15]
 8006618:	2b02      	cmp	r3, #2
 800661a:	d129      	bne.n	8006670 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800661c:	f107 0314 	add.w	r3, r7, #20
 8006620:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff ff7d 	bl	8006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800662a:	4603      	mov	r3, r0
 800662c:	62bb      	str	r3, [r7, #40]	; 0x28
 800662e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8006632:	f107 0308 	add.w	r3, r7, #8
 8006636:	4611      	mov	r1, r2
 8006638:	4618      	mov	r0, r3
 800663a:	f000 f88d 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 800663e:	4603      	mov	r3, r0
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006644:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8006646:	f107 0314 	add.w	r3, r7, #20
 800664a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800664e:	4618      	mov	r0, r3
 8006650:	f7ff ff68 	bl	8006524 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8006654:	4603      	mov	r3, r0
 8006656:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006658:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800665c:	1d3b      	adds	r3, r7, #4
 800665e:	4611      	mov	r1, r2
 8006660:	4618      	mov	r0, r3
 8006662:	f000 f865 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 8006666:	4603      	mov	r3, r0
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800666c:	601a      	str	r2, [r3, #0]
}
 800666e:	e005      	b.n	800667c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 8006670:	68ba      	ldr	r2, [r7, #8]
 8006672:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006674:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800667a:	601a      	str	r2, [r3, #0]
}
 800667c:	bf00      	nop
 800667e:	3738      	adds	r7, #56	; 0x38
 8006680:	46bd      	mov	sp, r7
 8006682:	bd80      	pop	{r7, pc}
 8006684:	00000000 	.word	0x00000000

08006688 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8006688:	b590      	push	{r4, r7, lr}
 800668a:	b089      	sub	sp, #36	; 0x24
 800668c:	af02      	add	r7, sp, #8
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	607a      	str	r2, [r7, #4]
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	460b      	mov	r3, r1
 8006696:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800669c:	2300      	movs	r3, #0
 800669e:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	2b03      	cmp	r3, #3
 80066a6:	d108      	bne.n	80066ba <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 80066a8:	f7ff fe2d 	bl	8006306 <_ZNSt14numeric_limitsIhE3minEv>
 80066ac:	4603      	mov	r3, r0
 80066ae:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 80066b0:	f7ff fe31 	bl	8006316 <_ZNSt14numeric_limitsIhE3maxEv>
 80066b4:	4603      	mov	r3, r0
 80066b6:	613b      	str	r3, [r7, #16]
 80066b8:	e024      	b.n	8006704 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	2b09      	cmp	r3, #9
 80066c0:	d108      	bne.n	80066d4 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 80066c2:	f7ff fe0f 	bl	80062e4 <_ZNSt14numeric_limitsIaE3minEv>
 80066c6:	4603      	mov	r3, r0
 80066c8:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80066ca:	f7ff fe14 	bl	80062f6 <_ZNSt14numeric_limitsIaE3maxEv>
 80066ce:	4603      	mov	r3, r0
 80066d0:	613b      	str	r3, [r7, #16]
 80066d2:	e017      	b.n	8006704 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	2b07      	cmp	r3, #7
 80066da:	d108      	bne.n	80066ee <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80066dc:	f7ff fe24 	bl	8006328 <_ZNSt14numeric_limitsIsE3minEv>
 80066e0:	4603      	mov	r3, r0
 80066e2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80066e4:	f7ff fe2a 	bl	800633c <_ZNSt14numeric_limitsIsE3maxEv>
 80066e8:	4603      	mov	r3, r0
 80066ea:	613b      	str	r3, [r7, #16]
 80066ec:	e00a      	b.n	8006704 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	695c      	ldr	r4, [r3, #20]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80066f6:	9300      	str	r3, [sp, #0]
 80066f8:	23da      	movs	r3, #218	; 0xda
 80066fa:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80066fc:	490b      	ldr	r1, [pc, #44]	; (800672c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80066fe:	47a0      	blx	r4
 8006700:	2301      	movs	r3, #1
 8006702:	e00a      	b.n	800671a <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 8006704:	7af8      	ldrb	r0, [r7, #11]
 8006706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006708:	9301      	str	r3, [sp, #4]
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	693a      	ldr	r2, [r7, #16]
 8006712:	6979      	ldr	r1, [r7, #20]
 8006714:	f7ff ff24 	bl	8006560 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 8006718:	2300      	movs	r3, #0
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	bd90      	pop	{r4, r7, pc}
 8006722:	bf00      	nop
 8006724:	0800f4b8 	.word	0x0800f4b8
 8006728:	0800f2b8 	.word	0x0800f2b8
 800672c:	0800f364 	.word	0x0800f364

08006730 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8006730:	b480      	push	{r7}
 8006732:	b083      	sub	sp, #12
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	429a      	cmp	r2, r3
 8006744:	da01      	bge.n	800674a <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	e000      	b.n	800674c <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800674a:	687b      	ldr	r3, [r7, #4]
    }
 800674c:	4618      	mov	r0, r3
 800674e:	370c      	adds	r7, #12
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr

08006758 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	429a      	cmp	r2, r3
 800676c:	da01      	bge.n	8006772 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	e000      	b.n	8006774 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8006772:	687b      	ldr	r3, [r7, #4]
    }
 8006774:	4618      	mov	r0, r3
 8006776:	370c      	adds	r7, #12
 8006778:	46bd      	mov	sp, r7
 800677a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677e:	4770      	bx	lr

08006780 <DebugLog>:

//#include <cstdio>
//
//extern "C" void DebugLog(const char* s) { fprintf(stderr, "%s", s); }

extern "C" void __attribute__((weak)) DebugLog(const char* s) {
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  // To be implemented by user
}
 8006788:	bf00      	nop
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2104      	movs	r1, #4
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7fe fffe 	bl	80057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80067a6:	4603      	mov	r3, r0
  }
 80067a8:	4618      	mov	r0, r3
 80067aa:	3708      	adds	r7, #8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	2106      	movs	r1, #6
 80067be:	4618      	mov	r0, r3
 80067c0:	f7fe ffff 	bl	80057c2 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 80067c4:	4603      	mov	r3, r0
 80067c6:	b2db      	uxtb	r3, r3
  }
 80067c8:	4618      	mov	r0, r3
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/core/api/flatbuffer_conversions.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 80067d0:	b480      	push	{r7}
 80067d2:	b085      	sub	sp, #20
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 80067de:	683a      	ldr	r2, [r7, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	4413      	add	r3, r2
 80067e4:	1e5a      	subs	r2, r3, #1
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ec:	683a      	ldr	r2, [r7, #0]
 80067ee:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 80067f2:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 80067f4:	68bb      	ldr	r3, [r7, #8]
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8006802:	b480      	push	{r7}
 8006804:	b085      	sub	sp, #20
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
 800680a:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	fbb2 f3f3 	udiv	r3, r2, r3
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 800681e:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8006820:	68bb      	ldr	r3, [r7, #8]
}
 8006822:	4618      	mov	r0, r3
 8006824:	3714      	adds	r7, #20
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 800682e:	b480      	push	{r7}
 8006830:	b085      	sub	sp, #20
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
 8006836:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4413      	add	r3, r2
 800683e:	1e5a      	subs	r2, r3, #1
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	fbb2 f2f3 	udiv	r2, r2, r3
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	fb02 f303 	mul.w	r3, r2, r3
 800684c:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 800684e:	68fb      	ldr	r3, [r7, #12]
}
 8006850:	4618      	mov	r0, r3
 8006852:	3714      	adds	r7, #20
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size,
                              ErrorReporter* reporter) {
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	607a      	str	r2, [r7, #4]
 8006868:	73fb      	strb	r3, [r7, #15]
  switch (type) {
 800686a:	7bfb      	ldrb	r3, [r7, #15]
 800686c:	3b01      	subs	r3, #1
 800686e:	2b08      	cmp	r3, #8
 8006870:	d834      	bhi.n	80068dc <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x80>
 8006872:	a201      	add	r2, pc, #4	; (adr r2, 8006878 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x1c>)
 8006874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006878:	0800689d 	.word	0x0800689d
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068b5 	.word	0x080068b5
 8006884:	080068c5 	.word	0x080068c5
 8006888:	080068dd 	.word	0x080068dd
 800688c:	080068cd 	.word	0x080068cd
 8006890:	080068a5 	.word	0x080068a5
 8006894:	080068d5 	.word	0x080068d5
 8006898:	080068bd 	.word	0x080068bd
    case kTfLiteFloat32:
      *size = sizeof(float);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	2204      	movs	r2, #4
 80068a0:	601a      	str	r2, [r3, #0]
      break;
 80068a2:	e027      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2202      	movs	r2, #2
 80068a8:	601a      	str	r2, [r3, #0]
      break;
 80068aa:	e023      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 80068ac:	68bb      	ldr	r3, [r7, #8]
 80068ae:	2204      	movs	r2, #4
 80068b0:	601a      	str	r2, [r3, #0]
      break;
 80068b2:	e01f      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
      break;
 80068ba:	e01b      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 80068bc:	68bb      	ldr	r3, [r7, #8]
 80068be:	2201      	movs	r2, #1
 80068c0:	601a      	str	r2, [r3, #0]
      break;
 80068c2:	e017      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	2208      	movs	r2, #8
 80068c8:	601a      	str	r2, [r3, #0]
      break;
 80068ca:	e013      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteBool:
      *size = sizeof(bool);
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	2201      	movs	r2, #1
 80068d0:	601a      	str	r2, [r3, #0]
      break;
 80068d2:	e00f      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 80068d4:	68bb      	ldr	r3, [r7, #8]
 80068d6:	2208      	movs	r2, #8
 80068d8:	601a      	str	r2, [r3, #0]
      break;
 80068da:	e00b      	b.n	80068f4 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x98>
    default:
      reporter->Report("Type %s (%d) not is not supported",
 80068dc:	7bfb      	ldrb	r3, [r7, #15]
 80068de:	4618      	mov	r0, r3
 80068e0:	f7fe fc74 	bl	80051cc <TfLiteTypeGetName>
 80068e4:	4602      	mov	r2, r0
 80068e6:	7bfb      	ldrb	r3, [r7, #15]
 80068e8:	4905      	ldr	r1, [pc, #20]	; (8006900 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0xa4>)
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f7fe fccc 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                       TfLiteTypeGetName(type), type);
      return kTfLiteError;
 80068f0:	2301      	movs	r3, #1
 80068f2:	e000      	b.n	80068f6 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE+0x9a>
  }
  return kTfLiteOk;
 80068f4:	2300      	movs	r3, #0
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
 80068fe:	bf00      	nop
 8006900:	0800f548 	.word	0x0800f548

08006904 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8006904:	b580      	push	{r7, lr}
 8006906:	b088      	sub	sp, #32
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
 8006910:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8006912:	2301      	movs	r3, #1
 8006914:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff ff3c 	bl	8006794 <_ZNK6tflite6Tensor5shapeEv>
 800691c:	4603      	mov	r3, r0
 800691e:	2b00      	cmp	r3, #0
 8006920:	bf14      	ite	ne
 8006922:	2301      	movne	r3, #1
 8006924:	2300      	moveq	r3, #0
 8006926:	b2db      	uxtb	r3, r3
 8006928:	2b00      	cmp	r3, #0
 800692a:	d022      	beq.n	8006972 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800692c:	2300      	movs	r3, #0
 800692e:	61bb      	str	r3, [r7, #24]
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f7ff ff2f 	bl	8006794 <_ZNK6tflite6Tensor5shapeEv>
 8006936:	4603      	mov	r3, r0
 8006938:	4618      	mov	r0, r3
 800693a:	f000 f845 	bl	80069c8 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 800693e:	4602      	mov	r2, r0
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	4293      	cmp	r3, r2
 8006944:	bf34      	ite	cc
 8006946:	2301      	movcc	r3, #1
 8006948:	2300      	movcs	r3, #0
 800694a:	b2db      	uxtb	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d010      	beq.n	8006972 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff ff1f 	bl	8006794 <_ZNK6tflite6Tensor5shapeEv>
 8006956:	4603      	mov	r3, r0
 8006958:	69b9      	ldr	r1, [r7, #24]
 800695a:	4618      	mov	r0, r3
 800695c:	f7fe ff60 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006960:	4602      	mov	r2, r0
 8006962:	69fb      	ldr	r3, [r7, #28]
 8006964:	fb02 f303 	mul.w	r3, r2, r3
 8006968:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	3301      	adds	r3, #1
 800696e:	61bb      	str	r3, [r7, #24]
 8006970:	e7de      	b.n	8006930 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f7ff ff1c 	bl	80067b0 <_ZNK6tflite6Tensor4typeEv>
 8006978:	4603      	mov	r3, r0
 800697a:	4618      	mov	r0, r3
 800697c:	f107 0315 	add.w	r3, r7, #21
 8006980:	683a      	ldr	r2, [r7, #0]
 8006982:	4619      	mov	r1, r3
 8006984:	f7fe fdb4 	bl	80054f0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]
 800698c:	7dfb      	ldrb	r3, [r7, #23]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8006992:	7dfb      	ldrb	r3, [r7, #23]
 8006994:	e014      	b.n	80069c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(
 8006996:	7d7b      	ldrb	r3, [r7, #21]
 8006998:	683a      	ldr	r2, [r7, #0]
 800699a:	6879      	ldr	r1, [r7, #4]
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff ff5d 	bl	800685c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePjPNS_13ErrorReporterE>
 80069a2:	4603      	mov	r3, r0
 80069a4:	75bb      	strb	r3, [r7, #22]
 80069a6:	7dbb      	ldrb	r3, [r7, #22]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d001      	beq.n	80069b0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xac>
 80069ac:	7dbb      	ldrb	r3, [r7, #22]
 80069ae:	e007      	b.n	80069c0 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xbc>
      TfLiteTypeSizeOf(tf_lite_type, type_size, error_reporter));
  *bytes = element_count * (*type_size);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	fb02 f203 	mul.w	r2, r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3720      	adds	r7, #32
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f7fe ff16 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 80069d6:	4603      	mov	r3, r0
 80069d8:	4618      	mov	r0, r3
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}

080069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b082      	sub	sp, #8
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2108      	movs	r1, #8
 80069ec:	4618      	mov	r0, r3
 80069ee:	f001 fc8b 	bl	8008308 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 80069f2:	4603      	mov	r3, r0
  }
 80069f4:	4618      	mov	r0, r3
 80069f6:	3708      	adds	r7, #8
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	210a      	movs	r1, #10
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 fc8d 	bl	8008328 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8006a0e:	4603      	mov	r3, r0
  }
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	2110      	movs	r1, #16
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe fe9d 	bl	8005766 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8006a2c:	4603      	mov	r3, r0
  }
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	2108      	movs	r1, #8
 8006a44:	4618      	mov	r0, r3
 8006a46:	f7fb fa7a 	bl	8001f3e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006a4a:	4603      	mov	r3, r0
  }
 8006a4c:	4618      	mov	r0, r3
 8006a4e:	3708      	adds	r7, #8
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}

08006a54 <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b082      	sub	sp, #8
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	210c      	movs	r1, #12
 8006a60:	4618      	mov	r0, r3
 8006a62:	f001 fc71 	bl	8008348 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8006a66:	4603      	mov	r3, r0
  }
 8006a68:	4618      	mov	r0, r3
 8006a6a:	3708      	adds	r7, #8
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	bd80      	pop	{r7, pc}

08006a70 <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	210e      	movs	r1, #14
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7fe fe42 	bl	8005708 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	bf14      	ite	ne
 8006a8a:	2301      	movne	r3, #1
 8006a8c:	2300      	moveq	r3, #0
 8006a8e:	b2db      	uxtb	r3, r3
  }
 8006a90:	4618      	mov	r0, r3
 8006a92:	3708      	adds	r7, #8
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}

08006a98 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b082      	sub	sp, #8
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	2104      	movs	r1, #4
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7fb fa49 	bl	8001f3e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006aac:	4603      	mov	r3, r0
  }
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3708      	adds	r7, #8
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b082      	sub	sp, #8
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2106      	movs	r1, #6
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	f7fe fe6d 	bl	80057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006ac8:	4603      	mov	r3, r0
  }
 8006aca:	4618      	mov	r0, r3
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006ad2:	b580      	push	{r7, lr}
 8006ad4:	b082      	sub	sp, #8
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2108      	movs	r1, #8
 8006ade:	4618      	mov	r0, r3
 8006ae0:	f7fe fe5f 	bl	80057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006ae4:	4603      	mov	r3, r0
  }
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3708      	adds	r7, #8
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}

08006aee <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8006aee:	b580      	push	{r7, lr}
 8006af0:	b082      	sub	sp, #8
 8006af2:	af00      	add	r7, sp, #0
 8006af4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	210e      	movs	r1, #14
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 fbf4 	bl	80082e8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8006b00:	4603      	mov	r3, r0
  }
 8006b02:	4618      	mov	r0, r3
 8006b04:	3708      	adds	r7, #8
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}

08006b0a <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8006b0a:	b580      	push	{r7, lr}
 8006b0c:	b082      	sub	sp, #8
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2104      	movs	r1, #4
 8006b16:	4618      	mov	r0, r3
 8006b18:	f001 fc26 	bl	8008368 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8006b1c:	4603      	mov	r3, r0
  }
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3708      	adds	r7, #8
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}

08006b26 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8006b26:	b580      	push	{r7, lr}
 8006b28:	b082      	sub	sp, #8
 8006b2a:	af00      	add	r7, sp, #0
 8006b2c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2106      	movs	r1, #6
 8006b32:	4618      	mov	r0, r3
 8006b34:	f7fe fe35 	bl	80057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006b38:	4603      	mov	r3, r0
  }
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b082      	sub	sp, #8
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2108      	movs	r1, #8
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f7fe fe27 	bl	80057a2 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006b54:	4603      	mov	r3, r0
  }
 8006b56:	4618      	mov	r0, r3
 8006b58:	3708      	adds	r7, #8
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}

08006b5e <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b082      	sub	sp, #8
 8006b62:	af00      	add	r7, sp, #0
 8006b64:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	210a      	movs	r1, #10
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f001 fc0c 	bl	8008388 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8006b70:	4603      	mov	r3, r0
  }
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}

08006b7a <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b082      	sub	sp, #8
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2104      	movs	r1, #4
 8006b86:	4618      	mov	r0, r3
 8006b88:	f001 fbae 	bl	80082e8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8006b8c:	4603      	mov	r3, r0
  }
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}

08006b96 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8006b96:	b580      	push	{r7, lr}
 8006b98:	b082      	sub	sp, #8
 8006b9a:	af00      	add	r7, sp, #0
 8006b9c:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2104      	movs	r1, #4
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f7ff fa3f 	bl	8006026 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8006ba8:	4603      	mov	r3, r0
  }
 8006baa:	4618      	mov	r0, r3
 8006bac:	3708      	adds	r7, #8
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	bd80      	pop	{r7, pc}

08006bb2 <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 8006bb2:	b580      	push	{r7, lr}
 8006bb4:	b082      	sub	sp, #8
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	2106      	movs	r1, #6
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	f7fb f9bc 	bl	8001f3e <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006bc6:	4603      	mov	r3, r0
  }
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}

08006bd0 <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b082      	sub	sp, #8
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2106      	movs	r1, #6
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f001 fbe3 	bl	80083a8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8006be2:	4603      	mov	r3, r0
  }
 8006be4:	4618      	mov	r0, r3
 8006be6:	3708      	adds	r7, #8
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}

08006bec <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2108      	movs	r1, #8
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f001 fbe5 	bl	80083c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8006bfe:	4603      	mov	r3, r0
  }
 8006c00:	4618      	mov	r0, r3
 8006c02:	3708      	adds	r7, #8
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	210c      	movs	r1, #12
 8006c14:	4618      	mov	r0, r3
 8006c16:	f001 fbe7 	bl	80083e8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8006c1a:	4603      	mov	r3, r0
  }
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3708      	adds	r7, #8
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}

08006c24 <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2110      	movs	r1, #16
 8006c30:	4618      	mov	r0, r3
 8006c32:	f001 fbe9 	bl	8008408 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8006c36:	4603      	mov	r3, r0
  }
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3708      	adds	r7, #8
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}

08006c40 <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	4a04      	ldr	r2, [pc, #16]	; (8006c5c <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	601a      	str	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr
 8006c5c:	080dca6c 	.word	0x080dca6c

08006c60 <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b082      	sub	sp, #8
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6878      	ldr	r0, [r7, #4]
 8006c6a:	f7ff ffe9 	bl	8006c40 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8006c6e:	2104      	movs	r1, #4
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f004 fe4e 	bl	800b912 <_ZdlPvj>
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4618      	mov	r0, r3
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}

08006c80 <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	4a04      	ldr	r2, [pc, #16]	; (8006c9c <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	601a      	str	r2, [r3, #0]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr
 8006c9c:	080dca6c 	.word	0x080dca6c

08006ca0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
// the flexible array element to be initialized.
const TfLiteIntArray kZeroLengthIntArray = {0};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4618      	mov	r0, r3
 8006cae:	f7ff ffe7 	bl	8006c80 <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 8006cb2:	4a05      	ldr	r2, [pc, #20]	; (8006cc8 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	683a      	ldr	r2, [r7, #0]
 8006cbc:	605a      	str	r2, [r3, #4]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	080dca2c 	.word	0x080dca2c

08006ccc <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b084      	sub	sp, #16
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	60f8      	str	r0, [r7, #12]
 8006cd4:	60b9      	str	r1, [r7, #8]
 8006cd6:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6858      	ldr	r0, [r3, #4]
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	330c      	adds	r3, #12
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	687a      	ldr	r2, [r7, #4]
 8006ce8:	68b9      	ldr	r1, [r7, #8]
 8006cea:	4798      	blx	r3
 8006cec:	4603      	mov	r3, r0
  }
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3710      	adds	r7, #16
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}

08006cf6 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 8006cf6:	b480      	push	{r7}
 8006cf8:	b083      	sub	sp, #12
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
 8006cfe:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(ErrorReporter* reporter,
 8006d0c:	b480      	push	{r7}
 8006d0e:	b085      	sub	sp, #20
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	60b9      	str	r1, [r7, #8]
 8006d16:	607a      	str	r2, [r7, #4]
                        SimpleMemoryAllocator* allocator)
      : reporter_(reporter), allocator_(allocator) {}
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	601a      	str	r2, [r3, #0]
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	605a      	str	r2, [r3, #4]
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	609a      	str	r2, [r3, #8]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	60da      	str	r2, [r3, #12]
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	611a      	str	r2, [r3, #16]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3714      	adds	r7, #20
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>:

  // Initializes the builder by allocating AllocationInfo array from the
  // simple memory allocator.
  TfLiteStatus Init(size_t tensor_count, size_t scratch_buffer_count) {
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
    tensor_count_ = tensor_count;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	68ba      	ldr	r2, [r7, #8]
 8006d54:	609a      	str	r2, [r3, #8]
    buffer_count_ = scratch_buffer_count;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	687a      	ldr	r2, [r7, #4]
 8006d5a:	60da      	str	r2, [r3, #12]
    return Allocate();
 8006d5c:	68f8      	ldr	r0, [r7, #12]
 8006d5e:	f000 f821 	bl	8006da4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>
 8006d62:	4603      	mov	r3, r0
  }
 8006d64:	4618      	mov	r0, r3
 8006d66:	3710      	adds	r7, #16
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>:

  // Add allocation information for the scratch buffers.
  TfLiteStatus AddScratchBuffers(internal::ScratchBufferHandle* buffer_handles);

  // Returns a pointer to the built AllocationInfo array.
  const AllocationInfo* Finish() const { return info_; }
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>:
  size_t Size() const { return tensor_count_ + buffer_count_; }
 8006d84:	b480      	push	{r7}
 8006d86:	b083      	sub	sp, #12
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	689a      	ldr	r2, [r3, #8]
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	370c      	adds	r7, #12
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv>:
  size_t tensor_count_ = 0;
  size_t buffer_count_ = 0;
  AllocationInfo* info_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::Allocate() {
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b084      	sub	sp, #16
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]
  size_t bytes = sizeof(AllocationInfo) * Size();
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff ffe9 	bl	8006d84 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 8006db2:	4602      	mov	r2, r0
 8006db4:	4613      	mov	r3, r2
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	4413      	add	r3, r2
 8006dba:	00db      	lsls	r3, r3, #3
 8006dbc:	60fb      	str	r3, [r7, #12]
  info_ = reinterpret_cast<AllocationInfo*>(
      allocator_->AllocateFromTail(bytes, alignof(AllocationInfo)));
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6858      	ldr	r0, [r3, #4]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	330c      	adds	r3, #12
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	2204      	movs	r2, #4
 8006dce:	68f9      	ldr	r1, [r7, #12]
 8006dd0:	4798      	blx	r3
 8006dd2:	4602      	mov	r2, r0
  info_ = reinterpret_cast<AllocationInfo*>(
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	611a      	str	r2, [r3, #16]
  if (info_ == nullptr) {
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d108      	bne.n	8006df2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x4e>
    TF_LITE_REPORT_ERROR(
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68fa      	ldr	r2, [r7, #12]
 8006de6:	4905      	ldr	r1, [pc, #20]	; (8006dfc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x58>)
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe fa4d 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e000      	b.n	8006df4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder8AllocateEv+0x50>
  }
  return kTfLiteOk;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3710      	adds	r7, #16
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	0800fd04 	.word	0x0800fd04

08006e00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>:

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteTensor* runtime_tensors) {
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b09a      	sub	sp, #104	; 0x68
 8006e04:	af02      	add	r7, sp, #8
 8006e06:	60f8      	str	r0, [r7, #12]
 8006e08:	60b9      	str	r1, [r7, #8]
 8006e0a:	607a      	str	r2, [r7, #4]
 8006e0c:	603b      	str	r3, [r7, #0]
  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006e0e:	2300      	movs	r3, #0
 8006e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	689b      	ldr	r3, [r3, #8]
 8006e16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d24f      	bcs.n	8006ebc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xbc>
    AllocationInfo* current = &info_[i];
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	6919      	ldr	r1, [r3, #16]
 8006e20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e22:	4613      	mov	r3, r2
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	4413      	add	r3, r2
 8006e28:	00db      	lsls	r3, r3, #3
 8006e2a:	440b      	add	r3, r1
 8006e2c:	643b      	str	r3, [r7, #64]	; 0x40
    // TfLiteTensor.uint8 field is deprecated so use .data field instead.
    current->output_ptr = &(runtime_tensors[i].data.data);
 8006e2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e30:	019b      	lsls	r3, r3, #6
 8006e32:	683a      	ldr	r2, [r7, #0]
 8006e34:	4413      	add	r3, r2
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e3a:	605a      	str	r2, [r3, #4]
    current->bytes = runtime_tensors[i].bytes;
 8006e3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e3e:	019b      	lsls	r3, r3, #6
 8006e40:	683a      	ldr	r2, [r7, #0]
 8006e42:	4413      	add	r3, r2
 8006e44:	699a      	ldr	r2, [r3, #24]
 8006e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e48:	601a      	str	r2, [r3, #0]
    current->first_created = -1;
 8006e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e50:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8006e52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e54:	f04f 32ff 	mov.w	r2, #4294967295
 8006e58:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8006e5a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e5c:	019b      	lsls	r3, r3, #6
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	4413      	add	r3, r2
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d113      	bne.n	8006e90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x90>
                                (!subgraph->tensors()->Get(i)->is_variable());
 8006e68:	68b8      	ldr	r0, [r7, #8]
 8006e6a:	f7ff fe4e 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8006e72:	4618      	mov	r0, r3
 8006e74:	f001 fb60 	bl	8008538 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	f7ff fdf8 	bl	8006a70 <_ZNK6tflite6Tensor11is_variableEv>
 8006e80:	4603      	mov	r3, r0
 8006e82:	f083 0301 	eor.w	r3, r3, #1
 8006e86:	b2db      	uxtb	r3, r3
    current->needs_allocating = (runtime_tensors[i].data.data == nullptr) &&
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x90>
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	e000      	b.n	8006e92 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x92>
 8006e90:	2200      	movs	r2, #0
 8006e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e94:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d007      	beq.n	8006eac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xac>
      current->offline_offset = offline_offsets[i];
 8006e9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e9e:	009b      	lsls	r3, r3, #2
 8006ea0:	687a      	ldr	r2, [r7, #4]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	681a      	ldr	r2, [r3, #0]
 8006ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea8:	611a      	str	r2, [r3, #16]
 8006eaa:	e003      	b.n	8006eb4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xb4>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 8006eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006eae:	f04f 32ff 	mov.w	r2, #4294967295
 8006eb2:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006eb4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006eba:	e7aa      	b.n	8006e12 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x12>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	65bb      	str	r3, [r7, #88]	; 0x58
 8006ec0:	68b8      	ldr	r0, [r7, #8]
 8006ec2:	f7ff fe30 	bl	8006b26 <_ZNK6tflite8SubGraph6inputsEv>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f7fe fc9a 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	bf34      	ite	cc
 8006ed6:	2301      	movcc	r3, #1
 8006ed8:	2300      	movcs	r3, #0
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d018      	beq.n	8006f12 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x112>
    const int tensor_index = subgraph->inputs()->Get(i);
 8006ee0:	68b8      	ldr	r0, [r7, #8]
 8006ee2:	f7ff fe20 	bl	8006b26 <_ZNK6tflite8SubGraph6inputsEv>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7fe fc98 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006ef0:	61b8      	str	r0, [r7, #24]
    AllocationInfo* current = &info_[tensor_index];
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6919      	ldr	r1, [r3, #16]
 8006ef6:	69ba      	ldr	r2, [r7, #24]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	4413      	add	r3, r2
 8006efe:	00db      	lsls	r3, r3, #3
 8006f00:	440b      	add	r3, r1
 8006f02:	617b      	str	r3, [r7, #20]
    current->first_created = 0;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	2200      	movs	r2, #0
 8006f08:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006f0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f10:	e7d6      	b.n	8006ec0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0xc0>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8006f12:	2300      	movs	r3, #0
 8006f14:	657b      	str	r3, [r7, #84]	; 0x54
 8006f16:	68b8      	ldr	r0, [r7, #8]
 8006f18:	f7ff fe13 	bl	8006b42 <_ZNK6tflite8SubGraph7outputsEv>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f7fe fc6f 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006f24:	4602      	mov	r2, r0
 8006f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	bf34      	ite	cc
 8006f2c:	2301      	movcc	r3, #1
 8006f2e:	2300      	movcs	r3, #0
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d021      	beq.n	8006f7a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x17a>
    const int tensor_index = subgraph->outputs()->Get(i);
 8006f36:	68b8      	ldr	r0, [r7, #8]
 8006f38:	f7ff fe03 	bl	8006b42 <_ZNK6tflite8SubGraph7outputsEv>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7fe fc6d 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006f46:	6238      	str	r0, [r7, #32]
    AllocationInfo* current = &info_[tensor_index];
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6919      	ldr	r1, [r3, #16]
 8006f4c:	6a3a      	ldr	r2, [r7, #32]
 8006f4e:	4613      	mov	r3, r2
 8006f50:	005b      	lsls	r3, r3, #1
 8006f52:	4413      	add	r3, r2
 8006f54:	00db      	lsls	r3, r3, #3
 8006f56:	440b      	add	r3, r1
 8006f58:	61fb      	str	r3, [r7, #28]
    current->last_used = subgraph->operators()->size() - 1;
 8006f5a:	68b8      	ldr	r0, [r7, #8]
 8006f5c:	f7ff fdff 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8006f60:	4603      	mov	r3, r0
 8006f62:	4618      	mov	r0, r3
 8006f64:	f001 fb0e 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	3b01      	subs	r3, #1
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	69fb      	ldr	r3, [r7, #28]
 8006f70:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8006f72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f74:	3301      	adds	r3, #1
 8006f76:	657b      	str	r3, [r7, #84]	; 0x54
 8006f78:	e7cd      	b.n	8006f16 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x116>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 8006f7a:	68b8      	ldr	r0, [r7, #8]
 8006f7c:	f7ff fdef 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8006f80:	4603      	mov	r3, r0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f001 fafe 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	db77      	blt.n	8007084 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x284>
    const auto* op = subgraph->operators()->Get(i);
 8006f94:	68b8      	ldr	r0, [r7, #8]
 8006f96:	f7ff fde2 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f001 fafd 	bl	80085a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8006fa6:	63f8      	str	r0, [r7, #60]	; 0x3c
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006fa8:	2300      	movs	r3, #0
 8006faa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006fac:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fae:	f7ff fd82 	bl	8006ab6 <_ZNK6tflite8Operator6inputsEv>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f7fe fc24 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	bf34      	ite	cc
 8006fc2:	2301      	movcc	r3, #1
 8006fc4:	2300      	movcs	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d022      	beq.n	8007012 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x212>
      const int tensor_index = op->inputs()->Get(n);
 8006fcc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006fce:	f7ff fd72 	bl	8006ab6 <_ZNK6tflite8Operator6inputsEv>
 8006fd2:	4603      	mov	r3, r0
 8006fd4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fc22 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006fdc:	6338      	str	r0, [r7, #48]	; 0x30
      AllocationInfo* current = &info_[tensor_index];
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	6919      	ldr	r1, [r3, #16]
 8006fe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	005b      	lsls	r3, r3, #1
 8006fe8:	4413      	add	r3, r2
 8006fea:	00db      	lsls	r3, r3, #3
 8006fec:	440b      	add	r3, r1
 8006fee:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (((current->last_used == -1) || (current->last_used < i))) {
 8006ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ff2:	68db      	ldr	r3, [r3, #12]
 8006ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff8:	d004      	beq.n	8007004 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x204>
 8006ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007000:	429a      	cmp	r2, r3
 8007002:	dd02      	ble.n	800700a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x20a>
        current->last_used = i;
 8007004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007006:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007008:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 800700a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800700c:	3301      	adds	r3, #1
 800700e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007010:	e7cc      	b.n	8006fac <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x1ac>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007012:	2300      	movs	r3, #0
 8007014:	64bb      	str	r3, [r7, #72]	; 0x48
 8007016:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007018:	f7ff fd5b 	bl	8006ad2 <_ZNK6tflite8Operator7outputsEv>
 800701c:	4603      	mov	r3, r0
 800701e:	4618      	mov	r0, r3
 8007020:	f7fe fbef 	bl	8005802 <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8007024:	4602      	mov	r2, r0
 8007026:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007028:	4293      	cmp	r3, r2
 800702a:	bf34      	ite	cc
 800702c:	2301      	movcc	r3, #1
 800702e:	2300      	movcs	r3, #0
 8007030:	b2db      	uxtb	r3, r3
 8007032:	2b00      	cmp	r3, #0
 8007034:	d022      	beq.n	800707c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x27c>
      const int tensor_index = op->outputs()->Get(n);
 8007036:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007038:	f7ff fd4b 	bl	8006ad2 <_ZNK6tflite8Operator7outputsEv>
 800703c:	4603      	mov	r3, r0
 800703e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe fbed 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8007046:	63b8      	str	r0, [r7, #56]	; 0x38
      AllocationInfo* current = &info_[tensor_index];
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	6919      	ldr	r1, [r3, #16]
 800704c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800704e:	4613      	mov	r3, r2
 8007050:	005b      	lsls	r3, r3, #1
 8007052:	4413      	add	r3, r2
 8007054:	00db      	lsls	r3, r3, #3
 8007056:	440b      	add	r3, r1
 8007058:	637b      	str	r3, [r7, #52]	; 0x34
      if ((current->first_created == -1) || (current->first_created > i)) {
 800705a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007062:	d004      	beq.n	800706e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x26e>
 8007064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800706a:	429a      	cmp	r2, r3
 800706c:	da02      	bge.n	8007074 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x274>
        current->first_created = i;
 800706e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007070:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007072:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8007074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007076:	3301      	adds	r3, #1
 8007078:	64bb      	str	r3, [r7, #72]	; 0x48
 800707a:	e7cc      	b.n	8007016 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x216>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 800707c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800707e:	3b01      	subs	r3, #1
 8007080:	653b      	str	r3, [r7, #80]	; 0x50
 8007082:	e784      	b.n	8006f8e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x18e>
      }
    }
  }

  // Work out which tensors need to be allocated.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8007084:	2300      	movs	r3, #0
 8007086:	647b      	str	r3, [r7, #68]	; 0x44
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800708e:	429a      	cmp	r2, r3
 8007090:	d24e      	bcs.n	8007130 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x330>
    AllocationInfo* current = &info_[i];
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6919      	ldr	r1, [r3, #16]
 8007096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007098:	4613      	mov	r3, r2
 800709a:	005b      	lsls	r3, r3, #1
 800709c:	4413      	add	r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	440b      	add	r3, r1
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
    const bool is_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 80070a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070ac:	d106      	bne.n	80070bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2bc>
 80070ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b6:	d001      	beq.n	80070bc <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2bc>
 80070b8:	2301      	movs	r3, #1
 80070ba:	e000      	b.n	80070be <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2be>
 80070bc:	2300      	movs	r3, #0
    const bool is_read_only =
 80070be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (is_read_only) {
 80070c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2d0>
      current->needs_allocating = false;
 80070ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070cc:	2200      	movs	r2, #0
 80070ce:	751a      	strb	r2, [r3, #20]
    }
    const bool has_partial_lifetime =
        !is_read_only &&
 80070d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070d4:	f083 0301 	eor.w	r3, r3, #1
 80070d8:	b2db      	uxtb	r3, r3
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d00b      	beq.n	80070f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f6>
        ((current->first_created == -1) || (current->last_used == -1));
 80070de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e0:	689b      	ldr	r3, [r3, #8]
        !is_read_only &&
 80070e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e6:	d004      	beq.n	80070f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f2>
        ((current->first_created == -1) || (current->last_used == -1));
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	68db      	ldr	r3, [r3, #12]
 80070ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070f0:	d101      	bne.n	80070f6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f6>
        !is_read_only &&
 80070f2:	2301      	movs	r3, #1
 80070f4:	e000      	b.n	80070f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x2f8>
 80070f6:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 80070f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    if (has_partial_lifetime && current->needs_allocating) {
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007100:	2b00      	cmp	r3, #0
 8007102:	d011      	beq.n	8007128 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x328>
 8007104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007106:	7d1b      	ldrb	r3, [r3, #20]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d00d      	beq.n	8007128 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x328>
      TF_LITE_REPORT_ERROR(
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6818      	ldr	r0, [r3, #0]
 8007110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007112:	689a      	ldr	r2, [r3, #8]
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	4613      	mov	r3, r2
 800711c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800711e:	4907      	ldr	r1, [pc, #28]	; (800713c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x33c>)
 8007120:	f7fe f8b2 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 8007124:	2301      	movs	r3, #1
 8007126:	e004      	b.n	8007132 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x332>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8007128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800712a:	3301      	adds	r3, #1
 800712c:	647b      	str	r3, [r7, #68]	; 0x44
 800712e:	e7ab      	b.n	8007088 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor+0x288>
    }
  }
  return kTfLiteOk;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3760      	adds	r7, #96	; 0x60
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	0800fd48 	.word	0x0800fd48

08007140 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8007140:	b580      	push	{r7, lr}
 8007142:	b08c      	sub	sp, #48	; 0x30
 8007144:	af00      	add	r7, sp, #0
 8007146:	60f8      	str	r0, [r7, #12]
 8007148:	60b9      	str	r1, [r7, #8]
 800714a:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 800714c:	68b8      	ldr	r0, [r7, #8]
 800714e:	f7ff fd69 	bl	8006c24 <_ZNK6tflite5Model8metadataEv>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	bf14      	ite	ne
 8007158:	2301      	movne	r3, #1
 800715a:	2300      	moveq	r3, #0
 800715c:	b2db      	uxtb	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d060      	beq.n	8007224 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8007162:	2300      	movs	r3, #0
 8007164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007166:	68b8      	ldr	r0, [r7, #8]
 8007168:	f7ff fd5c 	bl	8006c24 <_ZNK6tflite5Model8metadataEv>
 800716c:	4603      	mov	r3, r0
 800716e:	4618      	mov	r0, r3
 8007170:	f001 fad8 	bl	8008724 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007174:	4602      	mov	r2, r0
 8007176:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007178:	4293      	cmp	r3, r2
 800717a:	bf34      	ite	cc
 800717c:	2301      	movcc	r3, #1
 800717e:	2300      	movcs	r3, #0
 8007180:	b2db      	uxtb	r3, r3
 8007182:	2b00      	cmp	r3, #0
 8007184:	d04e      	beq.n	8007224 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 8007186:	68b8      	ldr	r0, [r7, #8]
 8007188:	f7ff fd4c 	bl	8006c24 <_ZNK6tflite5Model8metadataEv>
 800718c:	4603      	mov	r3, r0
 800718e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007190:	4618      	mov	r0, r3
 8007192:	f001 fad5 	bl	8008740 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 8007196:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 8007198:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800719a:	f7ff fcfc 	bl	8006b96 <_ZNK6tflite8Metadata4nameEv>
 800719e:	4603      	mov	r3, r0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe fe38 	bl	8005e16 <_ZNK11flatbuffers6String5c_strEv>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2217      	movs	r2, #23
 80071aa:	4921      	ldr	r1, [pc, #132]	; (8007230 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 80071ac:	4618      	mov	r0, r3
 80071ae:	f005 fbf1 	bl	800c994 <strncmp>
 80071b2:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	bf0c      	ite	eq
 80071b8:	2301      	moveq	r3, #1
 80071ba:	2300      	movne	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d02c      	beq.n	800721c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 80071c2:	68b8      	ldr	r0, [r7, #8]
 80071c4:	f7ff fd20 	bl	8006c08 <_ZNK6tflite5Model7buffersEv>
 80071c8:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 80071ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071cc:	f7ff fcf1 	bl	8006bb2 <_ZNK6tflite8Metadata6bufferEv>
 80071d0:	4603      	mov	r3, r0
 80071d2:	4619      	mov	r1, r3
 80071d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80071d6:	f001 fae7 	bl	80087a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 80071da:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 80071dc:	6a38      	ldr	r0, [r7, #32]
 80071de:	f7ff fccc 	bl	8006b7a <_ZNK6tflite6Buffer4dataEv>
 80071e2:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 80071e4:	69f8      	ldr	r0, [r7, #28]
 80071e6:	f001 faed 	bl	80087c4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 80071ea:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 80071ec:	69bb      	ldr	r3, [r7, #24]
 80071ee:	3308      	adds	r3, #8
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 80071f4:	69bb      	ldr	r3, [r7, #24]
 80071f6:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	689b      	ldr	r3, [r3, #8]
 8007202:	697a      	ldr	r2, [r7, #20]
 8007204:	429a      	cmp	r2, r3
 8007206:	d009      	beq.n	800721c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6818      	ldr	r0, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	689b      	ldr	r3, [r3, #8]
 8007210:	697a      	ldr	r2, [r7, #20]
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 8007214:	f7fe f838 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8007218:	2301      	movs	r3, #1
 800721a:	e004      	b.n	8007226 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800721c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800721e:	3301      	adds	r3, #1
 8007220:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007222:	e7a0      	b.n	8007166 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3730      	adds	r7, #48	; 0x30
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	080dca08 	.word	0x080dca08
 8007234:	0800fcb8 	.word	0x0800fcb8

08007238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferHandle* buffer_handles) {
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	689a      	ldr	r2, [r3, #8]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4413      	add	r3, r2
 8007252:	697a      	ldr	r2, [r7, #20]
 8007254:	429a      	cmp	r2, r3
 8007256:	d22e      	bcs.n	80072b6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x7e>
    AllocationInfo* current = &info_[i];
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6919      	ldr	r1, [r3, #16]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	00db      	lsls	r3, r3, #3
 8007266:	440b      	add	r3, r1
 8007268:	613b      	str	r3, [r7, #16]
    internal::ScratchBufferHandle* handle =
        &(buffer_handles[i - tensor_count_]);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	1ad2      	subs	r2, r2, r3
 8007272:	4613      	mov	r3, r2
 8007274:	005b      	lsls	r3, r3, #1
 8007276:	4413      	add	r3, r2
 8007278:	009b      	lsls	r3, r3, #2
 800727a:	461a      	mov	r2, r3
    internal::ScratchBufferHandle* handle =
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	4413      	add	r3, r2
 8007280:	60fb      	str	r3, [r7, #12]
    current->output_ptr = reinterpret_cast<void**>(&handle->data);
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	605a      	str	r2, [r3, #4]
    current->bytes = handle->bytes;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	685a      	ldr	r2, [r3, #4]
 800728c:	693b      	ldr	r3, [r7, #16]
 800728e:	601a      	str	r2, [r3, #0]
    current->first_created = handle->node_idx;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689a      	ldr	r2, [r3, #8]
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	609a      	str	r2, [r3, #8]
    current->last_used = handle->node_idx;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	60da      	str	r2, [r3, #12]
    current->needs_allocating = true;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	2201      	movs	r2, #1
 80072a4:	751a      	strb	r2, [r3, #20]
    current->offline_offset = kOnlinePlannedBuffer;
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f04f 32ff 	mov.w	r2, #4294967295
 80072ac:	611a      	str	r2, [r3, #16]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	3301      	adds	r3, #1
 80072b2:	617b      	str	r3, [r7, #20]
 80072b4:	e7c8      	b.n	8007248 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE+0x10>
  }
  return kTfLiteOk;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	371c      	adds	r7, #28
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80072c4:	b590      	push	{r4, r7, lr}
 80072c6:	b08b      	sub	sp, #44	; 0x2c
 80072c8:	af02      	add	r7, sp, #8
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80072d2:	2300      	movs	r3, #0
 80072d4:	61fb      	str	r3, [r7, #28]
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	429a      	cmp	r2, r3
 80072dc:	d247      	bcs.n	800736e <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 80072de:	69fa      	ldr	r2, [r7, #28]
 80072e0:	4613      	mov	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4413      	add	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	461a      	mov	r2, r3
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4413      	add	r3, r2
 80072ee:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	7d1b      	ldrb	r3, [r3, #20]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d036      	beq.n	8007366 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	2110      	movs	r1, #16
 80072fe:	4618      	mov	r0, r3
 8007300:	f7ff fa95 	bl	800682e <_ZN6tflite11AlignSizeUpEjj>
 8007304:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800730e:	d114      	bne.n	800733a <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	3308      	adds	r3, #8
 8007316:	681c      	ldr	r4, [r3, #0]
 8007318:	697a      	ldr	r2, [r7, #20]
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	6899      	ldr	r1, [r3, #8]
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	460b      	mov	r3, r1
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	47a0      	blx	r4
 800732c:	4603      	mov	r3, r0
 800732e:	74bb      	strb	r3, [r7, #18]
 8007330:	7cbb      	ldrb	r3, [r7, #18]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d017      	beq.n	8007366 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007336:	7cbb      	ldrb	r3, [r7, #18]
 8007338:	e01a      	b.n	8007370 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800733a:	6979      	ldr	r1, [r7, #20]
 800733c:	69bb      	ldr	r3, [r7, #24]
 800733e:	6898      	ldr	r0, [r3, #8]
 8007340:	69bb      	ldr	r3, [r7, #24]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	69ba      	ldr	r2, [r7, #24]
 8007346:	6912      	ldr	r2, [r2, #16]
 8007348:	9201      	str	r2, [sp, #4]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4603      	mov	r3, r0
 800734e:	460a      	mov	r2, r1
 8007350:	68f9      	ldr	r1, [r7, #12]
 8007352:	68b8      	ldr	r0, [r7, #8]
 8007354:	f004 f84e 	bl	800b3f4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 8007358:	4603      	mov	r3, r0
 800735a:	74fb      	strb	r3, [r7, #19]
 800735c:	7cfb      	ldrb	r3, [r7, #19]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d001      	beq.n	8007366 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8007362:	7cfb      	ldrb	r3, [r7, #19]
 8007364:	e004      	b.n	8007370 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8007366:	69fb      	ldr	r3, [r7, #28]
 8007368:	3301      	adds	r3, #1
 800736a:	61fb      	str	r3, [r7, #28]
 800736c:	e7b3      	b.n	80072d6 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 800736e:	2300      	movs	r3, #0
}
 8007370:	4618      	mov	r0, r3
 8007372:	3724      	adds	r7, #36	; 0x24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd90      	pop	{r4, r7, pc}

08007378 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8007378:	b590      	push	{r4, r7, lr}
 800737a:	b08b      	sub	sp, #44	; 0x2c
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	607a      	str	r2, [r7, #4]
 8007384:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800738a:	2300      	movs	r3, #0
 800738c:	623b      	str	r3, [r7, #32]
 800738e:	6a3a      	ldr	r2, [r7, #32]
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	429a      	cmp	r2, r3
 8007394:	d22e      	bcs.n	80073f4 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 8007396:	6a3a      	ldr	r2, [r7, #32]
 8007398:	4613      	mov	r3, r2
 800739a:	005b      	lsls	r3, r3, #1
 800739c:	4413      	add	r3, r2
 800739e:	00db      	lsls	r3, r3, #3
 80073a0:	461a      	mov	r2, r3
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	4413      	add	r3, r2
 80073a6:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	7d1b      	ldrb	r3, [r3, #20]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d01d      	beq.n	80073ec <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 80073b0:	f04f 33ff 	mov.w	r3, #4294967295
 80073b4:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	3314      	adds	r3, #20
 80073bc:	681c      	ldr	r4, [r3, #0]
 80073be:	f107 0314 	add.w	r3, r7, #20
 80073c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073c4:	68f9      	ldr	r1, [r7, #12]
 80073c6:	68b8      	ldr	r0, [r7, #8]
 80073c8:	47a0      	blx	r4
 80073ca:	4603      	mov	r3, r0
 80073cc:	76fb      	strb	r3, [r7, #27]
 80073ce:	7efb      	ldrb	r3, [r7, #27]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 80073d4:	7efb      	ldrb	r3, [r7, #27]
 80073d6:	e00e      	b.n	80073f6 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 80073d8:	697b      	ldr	r3, [r7, #20]
 80073da:	4619      	mov	r1, r3
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	440a      	add	r2, r1
 80073e4:	601a      	str	r2, [r3, #0]
      ++planner_index;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e8:	3301      	adds	r3, #1
 80073ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80073ec:	6a3b      	ldr	r3, [r7, #32]
 80073ee:	3301      	adds	r3, #1
 80073f0:	623b      	str	r3, [r7, #32]
 80073f2:	e7cc      	b.n	800738e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	372c      	adds	r7, #44	; 0x2c
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd90      	pop	{r4, r7, pc}
	...

08007400 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:
}

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 8007400:	b590      	push	{r4, r7, lr}
 8007402:	b091      	sub	sp, #68	; 0x44
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	603b      	str	r3, [r7, #0]
  *result = {};
 800740e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007410:	4618      	mov	r0, r3
 8007412:	2340      	movs	r3, #64	; 0x40
 8007414:	461a      	mov	r2, r3
 8007416:	2100      	movs	r1, #0
 8007418:	f004 fbfc 	bl	800bc14 <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 800741c:	68b8      	ldr	r0, [r7, #8]
 800741e:	f7ff f9c7 	bl	80067b0 <_ZNK6tflite6Tensor4typeEv>
 8007422:	4603      	mov	r3, r0
 8007424:	4618      	mov	r0, r3
 8007426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007428:	683a      	ldr	r2, [r7, #0]
 800742a:	4619      	mov	r1, r3
 800742c:	f7fe f860 	bl	80054f0 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8007430:	4603      	mov	r3, r0
 8007432:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8007436:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x44>
 800743e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8007442:	e125      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 8007444:	68b8      	ldr	r0, [r7, #8]
 8007446:	f7ff fb13 	bl	8006a70 <_ZNK6tflite6Tensor11is_variableEv>
 800744a:	4603      	mov	r3, r0
 800744c:	461a      	mov	r2, r3
 800744e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007450:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  // in memory. We'll check to see if there's a serialized buffer (pretty much
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 8007454:	68b8      	ldr	r0, [r7, #8]
 8007456:	f7ff faee 	bl	8006a36 <_ZNK6tflite6Tensor6bufferEv>
 800745a:	4603      	mov	r3, r0
 800745c:	4619      	mov	r1, r3
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f9a2 	bl	80087a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8007464:	6378      	str	r0, [r7, #52]	; 0x34
 8007466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 800746c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800746e:	f7ff fb84 	bl	8006b7a <_ZNK6tflite6Buffer4dataEv>
 8007472:	6338      	str	r0, [r7, #48]	; 0x30
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007476:	2b00      	cmp	r3, #0
 8007478:	d013      	beq.n	80074a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 800747a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800747c:	f000 ffd4 	bl	8008428 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	bf14      	ite	ne
 8007486:	2301      	movne	r3, #1
 8007488:	2300      	moveq	r3, #0
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b00      	cmp	r3, #0
 800748e:	d008      	beq.n	80074a2 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xa2>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        result->data.data =
            const_cast<void*>(static_cast<const void*>(array->data()));
 8007490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007492:	f001 f997 	bl	80087c4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8007496:	4602      	mov	r2, r0
        result->data.data =
 8007498:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800749a:	605a      	str	r2, [r3, #4]
        // We set the data from a serialized buffer, so record tha.
        result->allocation_type = kTfLiteMmapRo;
 800749c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800749e:	2201      	movs	r2, #1
 80074a0:	751a      	strb	r2, [r3, #20]
    // it less ambiguous.
  }

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 80074a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a4:	685b      	ldr	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d102      	bne.n	80074b0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xb0>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 80074aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ac:	2202      	movs	r2, #2
 80074ae:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 80074b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074b2:	f103 0118 	add.w	r1, r3, #24
 80074b6:	f107 0214 	add.w	r2, r7, #20
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	68b8      	ldr	r0, [r7, #8]
 80074be:	f7ff fa21 	bl	8006904 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80074c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xd6>
 80074d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80074d4:	e0dc      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 80074d6:	68b8      	ldr	r0, [r7, #8]
 80074d8:	f7ff f95c 	bl	8006794 <_ZNK6tflite6Tensor5shapeEv>
 80074dc:	4603      	mov	r3, r0
 80074de:	2b00      	cmp	r3, #0
 80074e0:	bf0c      	ite	eq
 80074e2:	2301      	moveq	r3, #1
 80074e4:	2300      	movne	r3, #0
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d003      	beq.n	80074f4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf4>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 80074ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074ee:	4a6a      	ldr	r2, [pc, #424]	; (8007698 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x298>)
 80074f0:	609a      	str	r2, [r3, #8]
 80074f2:	e013      	b.n	800751c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 80074f4:	68b8      	ldr	r0, [r7, #8]
 80074f6:	f7ff f94d 	bl	8006794 <_ZNK6tflite6Tensor5shapeEv>
 80074fa:	4602      	mov	r2, r0
 80074fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074fe:	3308      	adds	r3, #8
 8007500:	6839      	ldr	r1, [r7, #0]
 8007502:	68f8      	ldr	r0, [r7, #12]
 8007504:	f001 f96a 	bl	80087dc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007508:	4603      	mov	r3, r0
 800750a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800750e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007512:	2b00      	cmp	r3, #0
 8007514:	d002      	beq.n	800751c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x11c>
 8007516:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800751a:	e0b9      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800751c:	68b8      	ldr	r0, [r7, #8]
 800751e:	f7ff fa99 	bl	8006a54 <_ZNK6tflite6Tensor12quantizationEv>
 8007522:	62b8      	str	r0, [r7, #40]	; 0x28
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8007524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007526:	2b00      	cmp	r3, #0
 8007528:	d021      	beq.n	800756e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
  if (src_quantization && src_quantization->scale() &&
 800752a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800752c:	f7ff fa58 	bl	80069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d01b      	beq.n	800756e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->scale()->size() > 0) &&
 8007536:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007538:	f7ff fa52 	bl	80069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 800753c:	4603      	mov	r3, r0
 800753e:	4618      	mov	r0, r3
 8007540:	f000 ff80 	bl	8008444 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007544:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 8007546:	2b00      	cmp	r3, #0
 8007548:	d011      	beq.n	800756e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      src_quantization->zero_point() &&
 800754a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800754c:	f7ff fa56 	bl	80069fc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007550:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
      (src_quantization->zero_point()->size() > 0)) {
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f7ff fa50 	bl	80069fc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 800755c:	4603      	mov	r3, r0
 800755e:	4618      	mov	r0, r3
 8007560:	f000 ffa6 	bl	80084b0 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007564:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 8007566:	2b00      	cmp	r3, #0
 8007568:	d001      	beq.n	800756e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x16e>
 800756a:	2301      	movs	r3, #1
 800756c:	e000      	b.n	8007570 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x170>
 800756e:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 808c 	beq.w	800768e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x28e>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 8007576:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007578:	f7ff fa32 	bl	80069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 800757c:	4603      	mov	r3, r0
 800757e:	2100      	movs	r1, #0
 8007580:	4618      	mov	r0, r3
 8007582:	f000 ff6d 	bl	8008460 <_ZNK11flatbuffers6VectorIfE3GetEm>
 8007586:	eef0 7a40 	vmov.f32	s15, s0
 800758a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800758c:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8007590:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007592:	f7ff fa33 	bl	80069fc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007596:	4603      	mov	r3, r0
 8007598:	2100      	movs	r1, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f000 ff96 	bl	80084cc <_ZNK11flatbuffers6VectorIxE3GetEm>
 80075a0:	4603      	mov	r3, r0
 80075a2:	460c      	mov	r4, r1
    result->params.zero_point =
 80075a4:	461a      	mov	r2, r3
 80075a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075a8:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 80075aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80075ac:	f7ff fa18 	bl	80069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 80075b0:	4603      	mov	r3, r0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f000 ff46 	bl	8008444 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80075b8:	4603      	mov	r3, r0
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
    TfLiteAffineQuantization* quantization =
        reinterpret_cast<TfLiteAffineQuantization*>(
            allocator->AllocateFromTail(sizeof(TfLiteAffineQuantization),
                                        alignof(TfLiteAffineQuantization)));
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	330c      	adds	r3, #12
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2204      	movs	r2, #4
 80075c6:	210c      	movs	r1, #12
 80075c8:	68f8      	ldr	r0, [r7, #12]
 80075ca:	4798      	blx	r3
 80075cc:	6238      	str	r0, [r7, #32]
    if (quantization == nullptr) {
 80075ce:	6a3b      	ldr	r3, [r7, #32]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d105      	bne.n	80075e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1e0>
      TF_LITE_REPORT_ERROR(error_reporter,
 80075d4:	4931      	ldr	r1, [pc, #196]	; (800769c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x29c>)
 80075d6:	6838      	ldr	r0, [r7, #0]
 80075d8:	f7fd fe56 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 80075dc:	2301      	movs	r3, #1
 80075de:	e057      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
            TfLiteIntArrayGetSizeInBytes(channels), alignof(TfLiteIntArray)));
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	330c      	adds	r3, #12
 80075e6:	681c      	ldr	r4, [r3, #0]
 80075e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80075ea:	f7fd fde1 	bl	80051b0 <TfLiteIntArrayGetSizeInBytes>
 80075ee:	4603      	mov	r3, r0
        reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
 80075f0:	2204      	movs	r2, #4
 80075f2:	4619      	mov	r1, r3
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	47a0      	blx	r4
 80075f8:	4602      	mov	r2, r0
    quantization->zero_point =
 80075fa:	6a3b      	ldr	r3, [r7, #32]
 80075fc:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 80075fe:	6a3b      	ldr	r3, [r7, #32]
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d105      	bne.n	8007612 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x212>
      TF_LITE_REPORT_ERROR(error_reporter,
 8007606:	4926      	ldr	r1, [pc, #152]	; (80076a0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>)
 8007608:	6838      	ldr	r0, [r7, #0]
 800760a:	f7fd fe3d 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 800760e:	2301      	movs	r3, #1
 8007610:	e03e      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8007612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007614:	f7ff f9e4 	bl	80069e0 <_ZNK6tflite22QuantizationParameters5scaleEv>
 8007618:	4602      	mov	r2, r0
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f001 f8f5 	bl	800880e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007624:	4603      	mov	r3, r0
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	7ffb      	ldrb	r3, [r7, #31]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x232>
 800762e:	7ffb      	ldrb	r3, [r7, #31]
 8007630:	e02e      	b.n	8007690 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x290>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	685b      	ldr	r3, [r3, #4]
 8007636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007638:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	3304      	adds	r3, #4
 8007640:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < channels; i++) {
 8007642:	2300      	movs	r3, #0
 8007644:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007646:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800764a:	429a      	cmp	r2, r3
 800764c:	da12      	bge.n	8007674 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x274>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 800764e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007650:	f7ff f9d4 	bl	80069fc <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8007654:	4602      	mov	r2, r0
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	4619      	mov	r1, r3
 800765a:	4610      	mov	r0, r2
 800765c:	f000 ff36 	bl	80084cc <_ZNK11flatbuffers6VectorIxE3GetEm>
 8007660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007662:	009b      	lsls	r3, r3, #2
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	4413      	add	r3, r2
 8007668:	4602      	mov	r2, r0
 800766a:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 800766c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766e:	3301      	adds	r3, #1
 8007670:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007672:	e7e8      	b.n	8007646 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x246>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8007674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007676:	f7ff f9cf 	bl	8006a18 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 800767a:	4602      	mov	r2, r0
 800767c:	6a3b      	ldr	r3, [r7, #32]
 800767e:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8007680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007682:	2201      	movs	r2, #1
 8007684:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8007688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800768a:	6a3a      	ldr	r2, [r7, #32]
 800768c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 800768e:	2300      	movs	r3, #0
}
 8007690:	4618      	mov	r0, r3
 8007692:	3744      	adds	r7, #68	; 0x44
 8007694:	46bd      	mov	sp, r7
 8007696:	bd90      	pop	{r4, r7, pc}
 8007698:	080dca20 	.word	0x080dca20
 800769c:	0800fdac 	.word	0x0800fdac
 80076a0:	0800fddc 	.word	0x0800fddc

080076a4 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 80076a4:	b480      	push	{r7}
 80076a6:	b085      	sub	sp, #20
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	60f8      	str	r0, [r7, #12]
 80076ac:	60b9      	str	r1, [r7, #8]
 80076ae:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 80076b0:	4a0c      	ldr	r2, [pc, #48]	; (80076e4 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	601a      	str	r2, [r3, #0]
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	605a      	str	r2, [r3, #4]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	609a      	str	r2, [r3, #8]
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2200      	movs	r2, #0
 80076c6:	731a      	strb	r2, [r3, #12]
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	2200      	movs	r2, #0
 80076cc:	611a      	str	r2, [r3, #16]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2200      	movs	r2, #0
 80076d2:	615a      	str	r2, [r3, #20]
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	4618      	mov	r0, r3
 80076d8:	3714      	adds	r7, #20
 80076da:	46bd      	mov	sp, r7
 80076dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e0:	4770      	bx	lr
 80076e2:	bf00      	nop
 80076e4:	080dca44 	.word	0x080dca44

080076e8 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
 80076f0:	4a04      	ldr	r2, [pc, #16]	; (8007704 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	601a      	str	r2, [r3, #0]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	4618      	mov	r0, r3
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	080dca44 	.word	0x080dca44

08007708 <_ZN6tflite14MicroAllocatorD0Ev>:
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6878      	ldr	r0, [r7, #4]
 8007712:	f7ff ffe9 	bl	80076e8 <_ZN6tflite14MicroAllocatorD1Ev>
 8007716:	2118      	movs	r1, #24
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f004 f8fa 	bl	800b912 <_ZdlPvj>
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0
 800772e:	60f8      	str	r0, [r7, #12]
 8007730:	60b9      	str	r1, [r7, #8]
 8007732:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8007734:	2110      	movs	r1, #16
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f7ff f84a 	bl	80067d0 <_ZN6tflite14AlignPointerUpEPhj>
 800773c:	6178      	str	r0, [r7, #20]
  if (aligned_arena != tensor_arena) {
 800773e:	697a      	ldr	r2, [r7, #20]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	429a      	cmp	r2, r3
 8007744:	d007      	beq.n	8007756 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x2e>
    TF_LITE_REPORT_ERROR(
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	1ad3      	subs	r3, r2, r3
 800774c:	461a      	mov	r2, r3
 800774e:	490d      	ldr	r1, [pc, #52]	; (8007784 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE+0x5c>)
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7fd fd99 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "%d bytes lost due to alignment. To avoid this loss, please make sure "
        "the tensor_arena is 16 bytes aligned.",
        aligned_arena - tensor_arena);
  }
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	4413      	add	r3, r2
 800775c:	461a      	mov	r2, r3
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8007764:	693a      	ldr	r2, [r7, #16]
 8007766:	6979      	ldr	r1, [r7, #20]
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f002 f963 	bl	8009a34 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 800776e:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 8007770:	6879      	ldr	r1, [r7, #4]
 8007772:	4618      	mov	r0, r3
 8007774:	f000 f808 	bl	8007788 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8007778:	4603      	mov	r3, r0
}
 800777a:	4618      	mov	r0, r3
 800777c:	3718      	adds	r7, #24
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	0800fe0c 	.word	0x0800fe0c

08007788 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8007788:	b590      	push	{r4, r7, lr}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
 8007790:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d101      	bne.n	800779c <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8007798:	f004 f9a0 	bl	800badc <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d101      	bne.n	80077a6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 80077a2:	f004 f99b 	bl	800badc <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	330c      	adds	r3, #12
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2204      	movs	r2, #4
 80077b0:	2118      	movs	r1, #24
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	4798      	blx	r3
 80077b6:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4619      	mov	r1, r3
 80077bc:	2018      	movs	r0, #24
 80077be:	f7fd fd96 	bl	80052ee <_ZnwjPv>
 80077c2:	4604      	mov	r4, r0
 80077c4:	2c00      	cmp	r4, #0
 80077c6:	d006      	beq.n	80077d6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 80077c8:	683a      	ldr	r2, [r7, #0]
 80077ca:	6879      	ldr	r1, [r7, #4]
 80077cc:	4620      	mov	r0, r4
 80077ce:	f7ff ff69 	bl	80076a4 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 80077d2:	4623      	mov	r3, r4
 80077d4:	e000      	b.n	80077d8 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 80077d6:	4623      	mov	r3, r4
 80077d8:	60bb      	str	r3, [r7, #8]
  return allocator;
 80077da:	68bb      	ldr	r3, [r7, #8]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3714      	adds	r7, #20
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd90      	pop	{r4, r7, pc}

080077e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, TfLiteContext* context,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations) {
 80077e4:	b590      	push	{r4, r7, lr}
 80077e6:	b089      	sub	sp, #36	; 0x24
 80077e8:	af02      	add	r7, sp, #8
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d101      	bne.n	80077fc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x18>
 80077f8:	f004 f970 	bl	800badc <abort>
  TFLITE_DCHECK(context != nullptr);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x22>
 8007802:	f004 f96b 	bl	800badc <abort>

  if (model_is_allocating_) {
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	7b1b      	ldrb	r3, [r3, #12]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	4923      	ldr	r1, [pc, #140]	; (80078a0 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xbc>)
 8007814:	4618      	mov	r0, r3
 8007816:	f7fd fd37 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 800781a:	2301      	movs	r3, #1
 800781c:	e03c      	b.n	8007898 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800781e:	68b9      	ldr	r1, [r7, #8]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 fbe1 	bl	8007fe8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007826:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d101      	bne.n	8007832 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x4e>
 800782e:	f004 f955 	bl	800badc <abort>
  model_is_allocating_ = true;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2201      	movs	r2, #1
 8007836:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	68b9      	ldr	r1, [r7, #8]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	f000 fba6 	bl	8007f90 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>
 8007844:	4603      	mov	r3, r0
 8007846:	74fb      	strb	r3, [r7, #19]
 8007848:	7cfb      	ldrb	r3, [r7, #19]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d001      	beq.n	8007852 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x6e>
 800784e:	7cfb      	ldrb	r3, [r7, #19]
 8007850:	e022      	b.n	8007898 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      InitGraphAndContextTensorData(model, context, subgraph));
  TF_LITE_ENSURE_STATUS(
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	3310      	adds	r3, #16
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800785c:	6979      	ldr	r1, [r7, #20]
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	4798      	blx	r3
 8007862:	4603      	mov	r3, r0
 8007864:	74bb      	strb	r3, [r7, #18]
 8007866:	7cbb      	ldrb	r3, [r7, #18]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0x8c>
 800786c:	7cbb      	ldrb	r3, [r7, #18]
 800786e:	e013      	b.n	8007898 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      AllocateNodeAndRegistrations(subgraph, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3314      	adds	r3, #20
 8007876:	681c      	ldr	r4, [r3, #0]
 8007878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	47a0      	blx	r4
 8007888:	4603      	mov	r3, r0
 800788a:	747b      	strb	r3, [r7, #17]
 800788c:	7c7b      	ldrb	r3, [r7, #17]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb2>
 8007892:	7c7b      	ldrb	r3, [r7, #17]
 8007894:	e000      	b.n	8007898 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE+0xb4>
      model, subgraph, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	371c      	adds	r7, #28
 800789c:	46bd      	mov	sp, r7
 800789e:	bd90      	pop	{r4, r7, pc}
 80078a0:	0800fe78 	.word	0x0800fe78

080078a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>:

TfLiteStatus MicroAllocator::FinishModelAllocation(const Model* model,
                                                   TfLiteContext* context) {
 80078a4:	b590      	push	{r4, r7, lr}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	607a      	str	r2, [r7, #4]
  if (!model_is_allocating_) {
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	7b1b      	ldrb	r3, [r3, #12]
 80078b4:	f083 0301 	eor.w	r3, r3, #1
 80078b8:	b2db      	uxtb	r3, r3
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d007      	beq.n	80078ce <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x2a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	491b      	ldr	r1, [pc, #108]	; (8007930 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x8c>)
 80078c4:	4618      	mov	r0, r3
 80078c6:	f7fd fcdf 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 80078ca:	2301      	movs	r3, #1
 80078cc:	e02c      	b.n	8007928 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80078ce:	68b9      	ldr	r1, [r7, #8]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f000 fb89 	bl	8007fe8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80078d6:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d101      	bne.n	80078e2 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x3e>
 80078de:	f004 f8fd 	bl	800badc <abort>

  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, context, subgraph));
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	331c      	adds	r3, #28
 80078e8:	681c      	ldr	r4, [r3, #0]
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	687a      	ldr	r2, [r7, #4]
 80078ee:	68b9      	ldr	r1, [r7, #8]
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	47a0      	blx	r4
 80078f4:	4603      	mov	r3, r0
 80078f6:	74fb      	strb	r3, [r7, #19]
 80078f8:	7cfb      	ldrb	r3, [r7, #19]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x5e>
 80078fe:	7cfb      	ldrb	r3, [r7, #19]
 8007900:	e012      	b.n	8007928 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>
  TF_LITE_ENSURE_STATUS(AllocateVariables(context, subgraph));
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	3318      	adds	r3, #24
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	697a      	ldr	r2, [r7, #20]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	4798      	blx	r3
 8007912:	4603      	mov	r3, r0
 8007914:	74bb      	strb	r3, [r7, #18]
 8007916:	7cbb      	ldrb	r3, [r7, #18]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x7c>
 800791c:	7cbb      	ldrb	r3, [r7, #18]
 800791e:	e003      	b.n	8007928 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext+0x84>

  model_is_allocating_ = false;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8007926:	2300      	movs	r3, #0
}
 8007928:	4618      	mov	r0, r3
 800792a:	371c      	adds	r7, #28
 800792c:	46bd      	mov	sp, r7
 800792e:	bd90      	pop	{r4, r7, pc}
 8007930:	0800fed0 	.word	0x0800fed0

08007934 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>:

TfLiteStatus MicroAllocator::AllocatePersistentBuffer(size_t bytes,
                                                      void** ptr) {
 8007934:	b580      	push	{r7, lr}
 8007936:	b086      	sub	sp, #24
 8007938:	af00      	add	r7, sp, #0
 800793a:	60f8      	str	r0, [r7, #12]
 800793c:	60b9      	str	r1, [r7, #8]
 800793e:	607a      	str	r2, [r7, #4]
  uint8_t* data = memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6858      	ldr	r0, [r3, #4]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	330c      	adds	r3, #12
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2210      	movs	r2, #16
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	4798      	blx	r3
 8007954:	6178      	str	r0, [r7, #20]
  if (data == nullptr) {
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d108      	bne.n	800796e <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x3a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	4907      	ldr	r1, [pc, #28]	; (8007980 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x4c>)
 8007964:	4618      	mov	r0, r3
 8007966:	f7fd fc8f 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate persistent buffer of size %d",
                         bytes);
    return kTfLiteError;
 800796a:	2301      	movs	r3, #1
 800796c:	e003      	b.n	8007976 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv+0x42>
  }
  (*ptr) = data;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	697a      	ldr	r2, [r7, #20]
 8007972:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	0800ff1c 	.word	0x0800ff1c

08007984 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(int node_id,
                                                         size_t bytes,
                                                         int* buffer_idx) {
 8007984:	b590      	push	{r4, r7, lr}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
  // A sanity check to make sure scratch_buffer_handles_ is contiguous i.e.
  // scratch_buffer_handles_ is pointing to the last allocation from memory
  // allocator.
  if (scratch_buffer_handles_ != nullptr &&
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	691b      	ldr	r3, [r3, #16]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00b      	beq.n	80079b2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
      reinterpret_cast<uint8_t*>(scratch_buffer_handles_) !=
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	691c      	ldr	r4, [r3, #16]
          memory_allocator_->GetTail()) {
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f002 f90e 	bl	8009bc4 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 80079a8:	4603      	mov	r3, r0
  if (scratch_buffer_handles_ != nullptr &&
 80079aa:	429c      	cmp	r4, r3
 80079ac:	d001      	beq.n	80079b2 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x2e>
 80079ae:	2301      	movs	r3, #1
 80079b0:	e000      	b.n	80079b4 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x30>
 80079b2:	2300      	movs	r3, #0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d007      	beq.n	80079c8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x44>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	491d      	ldr	r1, [pc, #116]	; (8007a34 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb0>)
 80079be:	4618      	mov	r0, r3
 80079c0:	f7fd fc62 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Internal error: AllocateFromTail can not be called "
                         "between two RequestScratchBufferInArena calls.");
    return kTfLiteError;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e030      	b.n	8007a2a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }

  internal::ScratchBufferHandle* handle =
      reinterpret_cast<internal::ScratchBufferHandle*>(
          memory_allocator_->AllocateFromTail(
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6858      	ldr	r0, [r3, #4]
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
              sizeof(internal::ScratchBufferHandle),
              alignof(internal::ScratchBufferHandle)));
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	330c      	adds	r3, #12
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	2204      	movs	r2, #4
 80079d8:	210c      	movs	r1, #12
 80079da:	4798      	blx	r3
 80079dc:	6178      	str	r0, [r7, #20]
  if (handle == nullptr) {
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d108      	bne.n	80079f6 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0x72>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	689b      	ldr	r3, [r3, #8]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	4913      	ldr	r1, [pc, #76]	; (8007a38 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xb4>)
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fd fc4b 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to register scratch buffer handle for node %s",
                         node_id);
    return kTfLiteError;
 80079f2:	2301      	movs	r3, #1
 80079f4:	e019      	b.n	8007a2a <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi+0xa6>
  }
  *handle = {};
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	461a      	mov	r2, r3
 80079fa:	2300      	movs	r3, #0
 80079fc:	6013      	str	r3, [r2, #0]
 80079fe:	6053      	str	r3, [r2, #4]
 8007a00:	6093      	str	r3, [r2, #8]
  handle->bytes = bytes;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	605a      	str	r2, [r3, #4]
  handle->node_idx = node_id;
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	609a      	str	r2, [r3, #8]
  *buffer_idx = scratch_buffer_count_;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	695b      	ldr	r3, [r3, #20]
 8007a12:	461a      	mov	r2, r3
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
  scratch_buffer_count_ += 1;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	695b      	ldr	r3, [r3, #20]
 8007a1c:	1c5a      	adds	r2, r3, #1
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	615a      	str	r2, [r3, #20]
  // scratch_buffer_handles_ is in reverse order. The following code ensures
  // that scratch_buffers[0] is pointing to the newly allocated handle.
  scratch_buffer_handles_ = handle;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	697a      	ldr	r2, [r7, #20]
 8007a26:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8007a28:	2300      	movs	r3, #0
}
 8007a2a:	4618      	mov	r0, r3
 8007a2c:	371c      	adds	r7, #28
 8007a2e:	46bd      	mov	sp, r7
 8007a30:	bd90      	pop	{r4, r7, pc}
 8007a32:	bf00      	nop
 8007a34:	0800ff4c 	.word	0x0800ff4c
 8007a38:	0800ffb0 	.word	0x0800ffb0

08007a3c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>:

void* MicroAllocator::GetScratchBuffer(int buffer_idx) const {
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b082      	sub	sp, #8
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
 8007a44:	6039      	str	r1, [r7, #0]
  if (static_cast<size_t>(buffer_idx) >= scratch_buffer_count_) {
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695a      	ldr	r2, [r3, #20]
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d809      	bhi.n	8007a64 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x28>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6898      	ldr	r0, [r3, #8]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	695b      	ldr	r3, [r3, #20]
 8007a58:	683a      	ldr	r2, [r7, #0]
 8007a5a:	490b      	ldr	r1, [pc, #44]	; (8007a88 <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x4c>)
 8007a5c:	f7fd fc14 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Buffer %d not found. %d buffers available.",
                         buffer_idx, scratch_buffer_count_);
    return nullptr;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e00c      	b.n	8007a7e <_ZNK6tflite14MicroAllocator16GetScratchBufferEi+0x42>
  }
  // scratch_buffer_handles_ is in reverse order.
  return scratch_buffer_handles_[scratch_buffer_count_ - buffer_idx - 1].data;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6919      	ldr	r1, [r3, #16]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	1ad2      	subs	r2, r2, r3
 8007a70:	4613      	mov	r3, r2
 8007a72:	005b      	lsls	r3, r3, #1
 8007a74:	4413      	add	r3, r2
 8007a76:	009b      	lsls	r3, r3, #2
 8007a78:	3b0c      	subs	r3, #12
 8007a7a:	440b      	add	r3, r1
 8007a7c:	681b      	ldr	r3, [r3, #0]
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3708      	adds	r7, #8
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	0800ffe8 	.word	0x0800ffe8

08007a8c <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateTfLiteTensorArray(
    TfLiteContext* context, const SubGraph* subgraph) {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	60f8      	str	r0, [r7, #12]
 8007a94:	60b9      	str	r1, [r7, #8]
 8007a96:	607a      	str	r2, [r7, #4]
  context->tensors_size = subgraph->tensors()->size();
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f7ff f836 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f000 fd3b 	bl	800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007aa6:	4602      	mov	r2, r0
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	601a      	str	r2, [r3, #0]
  context->tensors =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	6858      	ldr	r0, [r3, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor) * context->tensors_size, alignof(TfLiteTensor)));
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	6812      	ldr	r2, [r2, #0]
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 8007abe:	0191      	lsls	r1, r2, #6
 8007ac0:	2204      	movs	r2, #4
 8007ac2:	4798      	blx	r3
 8007ac4:	4602      	mov	r2, r0
  context->tensors =
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	609a      	str	r2, [r3, #8]
  if (context->tensors == nullptr) {
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5c>
    TF_LITE_REPORT_ERROR(
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	6898      	ldr	r0, [r3, #8]
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	019b      	lsls	r3, r3, #6
 8007adc:	461a      	mov	r2, r3
 8007ade:	4905      	ldr	r1, [pc, #20]	; (8007af4 <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x68>)
 8007ae0:	f7fd fbd2 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for context->tensors, %d bytes required",
        sizeof(TfLiteTensor) * context->tensors_size);
    return kTfLiteError;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e000      	b.n	8007aea <_ZN6tflite14MicroAllocator25AllocateTfLiteTensorArrayEP13TfLiteContextPKNS_8SubGraphE+0x5e>
  }
  return kTfLiteOk;
 8007ae8:	2300      	movs	r3, #0
}
 8007aea:	4618      	mov	r0, r3
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
 8007af2:	bf00      	nop
 8007af4:	08010014 	.word	0x08010014

08007af8 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorArrayFromFlatbuffer(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 8007af8:	b5b0      	push	{r4, r5, r7, lr}
 8007afa:	b088      	sub	sp, #32
 8007afc:	af02      	add	r7, sp, #8
 8007afe:	60f8      	str	r0, [r7, #12]
 8007b00:	60b9      	str	r1, [r7, #8]
 8007b02:	607a      	str	r2, [r7, #4]
 8007b04:	603b      	str	r3, [r7, #0]
  // Initialize tensors in context_ using the flatbuffer for quantization data.
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	6838      	ldr	r0, [r7, #0]
 8007b0c:	f7fe fffd 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 fd02 	bl	800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007b18:	4602      	mov	r2, r0
 8007b1a:	697b      	ldr	r3, [r7, #20]
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	bf34      	ite	cc
 8007b20:	2301      	movcc	r3, #1
 8007b22:	2300      	movcs	r3, #0
 8007b24:	b2db      	uxtb	r3, r3
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d02d      	beq.n	8007b86 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x8e>
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 8007b2e:	6838      	ldr	r0, [r7, #0]
 8007b30:	f7fe ffeb 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8007b34:	4603      	mov	r3, r0
 8007b36:	6979      	ldr	r1, [r7, #20]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fcfd 	bl	8008538 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007b3e:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 8007b40:	68b8      	ldr	r0, [r7, #8]
 8007b42:	f7ff f861 	bl	8006c08 <_ZNK6tflite5Model7buffersEv>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &context->tensors[i]);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	689a      	ldr	r2, [r3, #8]
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	019b      	lsls	r3, r3, #6
    TfLiteStatus status = internal::InitializeTfLiteTensorFromFlatbuffer(
 8007b52:	4413      	add	r3, r2
        error_reporter_, &context->tensors[i]);
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	460b      	mov	r3, r1
 8007b58:	4602      	mov	r2, r0
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f7ff fc4f 	bl	8007400 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8007b62:	4603      	mov	r3, r0
 8007b64:	74fb      	strb	r3, [r7, #19]
    if (status != kTfLiteOk) {
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x86>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	697a      	ldr	r2, [r7, #20]
 8007b72:	4907      	ldr	r1, [pc, #28]	; (8007b90 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x98>)
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fd fb87 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e004      	b.n	8007b88 <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x90>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007b7e:	697b      	ldr	r3, [r7, #20]
 8007b80:	3301      	adds	r3, #1
 8007b82:	617b      	str	r3, [r7, #20]
 8007b84:	e7c1      	b.n	8007b0a <_ZN6tflite14MicroAllocator39PopulateTfLiteTensorArrayFromFlatbufferEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x12>
    }
  }
  return kTfLiteOk;
 8007b86:	2300      	movs	r3, #0
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	3718      	adds	r7, #24
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8007b90:	08010058 	.word	0x08010058

08007b94 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const SubGraph* subgraph, NodeAndRegistration** node_and_registrations) {
 8007b94:	b5b0      	push	{r4, r5, r7, lr}
 8007b96:	b086      	sub	sp, #24
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	685d      	ldr	r5, [r3, #4]
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	330c      	adds	r3, #12
 8007bac:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 8007bae:	68b8      	ldr	r0, [r7, #8]
 8007bb0:	f7fe ffd5 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	f000 fce4 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007bbc:	4602      	mov	r2, r0
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	4413      	add	r3, r2
 8007bc4:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 8007bc6:	2204      	movs	r2, #4
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4628      	mov	r0, r5
 8007bcc:	47a0      	blx	r4
 8007bce:	6178      	str	r0, [r7, #20]
  if (output == nullptr) {
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d107      	bne.n	8007be6 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x52>
    TF_LITE_REPORT_ERROR(
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	689b      	ldr	r3, [r3, #8]
 8007bda:	4907      	ldr	r1, [pc, #28]	; (8007bf8 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x64>)
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fd fb53 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e003      	b.n	8007bee <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_8SubGraphEPPNS_19NodeAndRegistrationE+0x5a>
  }
  *node_and_registrations = output;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	697a      	ldr	r2, [r7, #20]
 8007bea:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007bec:	2300      	movs	r3, #0
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	3718      	adds	r7, #24
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	08010078 	.word	0x08010078

08007bfc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const SubGraph* subgraph,
    const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8007bfc:	b5b0      	push	{r4, r5, r7, lr}
 8007bfe:	b098      	sub	sp, #96	; 0x60
 8007c00:	af02      	add	r7, sp, #8
 8007c02:	60f8      	str	r0, [r7, #12]
 8007c04:	60b9      	str	r1, [r7, #8]
 8007c06:	607a      	str	r2, [r7, #4]
 8007c08:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  auto* opcodes = model->operator_codes();
 8007c10:	68b8      	ldr	r0, [r7, #8]
 8007c12:	f7fe ffdd 	bl	8006bd0 <_ZNK6tflite5Model14operator_codesEv>
 8007c16:	6478      	str	r0, [r7, #68]	; 0x44
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	685a      	ldr	r2, [r3, #4]
 8007c1c:	f107 031c 	add.w	r3, r7, #28
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f7ff f83c 	bl	8006ca0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8007c28:	2300      	movs	r3, #0
 8007c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7fe ff96 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8007c32:	4603      	mov	r3, r0
 8007c34:	4618      	mov	r0, r3
 8007c36:	f000 fca5 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	bf34      	ite	cc
 8007c42:	2301      	movcc	r3, #1
 8007c44:	2300      	movcs	r3, #0
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	f000 8130 	beq.w	8007eae <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b2>
    const auto* op = subgraph->operators()->Get(i);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7fe ff85 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8007c54:	4603      	mov	r3, r0
 8007c56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 fca1 	bl	80085a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 8007c5e:	6438      	str	r0, [r7, #64]	; 0x40
    const size_t index = op->opcode_index();
 8007c60:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007c62:	f7fe ff19 	bl	8006a98 <_ZNK6tflite8Operator12opcode_indexEv>
 8007c66:	63f8      	str	r0, [r7, #60]	; 0x3c
    if (index >= opcodes->size()) {
 8007c68:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007c6a:	f000 fcbf 	bl	80085ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c72:	4293      	cmp	r3, r2
 8007c74:	bf2c      	ite	cs
 8007c76:	2301      	movcs	r3, #1
 8007c78:	2300      	movcc	r3, #0
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d008      	beq.n	8007c92 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x96>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007c86:	498f      	ldr	r1, [pc, #572]	; (8007ec4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2c8>)
 8007c88:	4618      	mov	r0, r3
 8007c8a:	f7fd fafd 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8007c8e:	2401      	movs	r4, #1
 8007c90:	e10e      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    auto* opcode = (*opcodes)[index];
 8007c92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c94:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8007c96:	f000 fdd3 	bl	8008840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 8007c9a:	63b8      	str	r0, [r7, #56]	; 0x38
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007c9c:	6839      	ldr	r1, [r7, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8007ca2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	009b      	lsls	r3, r3, #2
 8007ca8:	4413      	add	r3, r2
 8007caa:	00db      	lsls	r3, r3, #3
 8007cac:	461a      	mov	r2, r3
 8007cae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cb0:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007cb2:	3324      	adds	r3, #36	; 0x24
    status =
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cb8:	f7fe f918 	bl	8005eec <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
    if (status != kTfLiteOk) {
 8007cc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d011      	beq.n	8007cee <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xf2>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689c      	ldr	r4, [r3, #8]
 8007cce:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007cd0:	f7fe f8de 	bl	8005e90 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe f8b4 	bl	8005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	4979      	ldr	r1, [pc, #484]	; (8007ec8 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2cc>)
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f7fd fad0 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(opcode->builtin_code()));
      return status;
 8007ce8:	f897 404b 	ldrb.w	r4, [r7, #75]	; 0x4b
 8007cec:	e0e0      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    const auto* registration = node_and_registrations[i].registration;
 8007cee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007cf0:	4613      	mov	r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	4413      	add	r3, r2
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007cfc:	4413      	add	r3, r2
 8007cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d00:	637b      	str	r3, [r7, #52]	; 0x34
    if (registration == nullptr) {
 8007d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d108      	bne.n	8007d1a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11e>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007d0e:	496f      	ldr	r1, [pc, #444]	; (8007ecc <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d0>)
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7fd fab9 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 8007d16:	2401      	movs	r4, #1
 8007d18:	e0ca      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 8007d1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d1c:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 8007d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    const char* custom_data = nullptr;
 8007d22:	2300      	movs	r3, #0
 8007d24:	653b      	str	r3, [r7, #80]	; 0x50
    size_t custom_data_size = 0;
 8007d26:	2300      	movs	r3, #0
 8007d28:	64fb      	str	r3, [r7, #76]	; 0x4c
    unsigned char* builtin_data = nullptr;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	61bb      	str	r3, [r7, #24]

    if (op_type == BuiltinOperator_CUSTOM) {
 8007d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d32:	2b20      	cmp	r3, #32
 8007d34:	d11b      	bne.n	8007d6e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x172>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 8007d36:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d38:	f7fe fed9 	bl	8006aee <_ZNK6tflite8Operator14custom_optionsEv>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	bf14      	ite	ne
 8007d42:	2301      	movne	r3, #1
 8007d44:	2300      	moveq	r3, #0
 8007d46:	b2db      	uxtb	r3, r3
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d05d      	beq.n	8007e08 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 8007d4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d4e:	f7fe fece 	bl	8006aee <_ZNK6tflite8Operator14custom_optionsEv>
 8007d52:	4603      	mov	r3, r0
        custom_data =
 8007d54:	4618      	mov	r0, r3
 8007d56:	f000 fd35 	bl	80087c4 <_ZNK11flatbuffers6VectorIhE4dataEv>
 8007d5a:	6538      	str	r0, [r7, #80]	; 0x50
        custom_data_size = op->custom_options()->size();
 8007d5c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d5e:	f7fe fec6 	bl	8006aee <_ZNK6tflite8Operator14custom_optionsEv>
 8007d62:	4603      	mov	r3, r0
 8007d64:	4618      	mov	r0, r3
 8007d66:	f000 fb5f 	bl	8008428 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 8007d6a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007d6c:	e04c      	b.n	8007e08 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 8007d6e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007d70:	f7fe febd 	bl	8006aee <_ZNK6tflite8Operator14custom_optionsEv>
 8007d74:	4603      	mov	r3, r0
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	bf14      	ite	ne
 8007d7a:	2301      	movne	r3, #1
 8007d7c:	2300      	moveq	r3, #0
 8007d7e:	b2db      	uxtb	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d00e      	beq.n	8007da2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1a6>
        TF_LITE_REPORT_ERROR(
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	689c      	ldr	r4, [r3, #8]
 8007d88:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f7fe f859 	bl	8005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007d92:	4603      	mov	r3, r0
 8007d94:	461a      	mov	r2, r3
 8007d96:	494e      	ldr	r1, [pc, #312]	; (8007ed0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>)
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7fd fa75 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8007d9e:	2401      	movs	r4, #1
 8007da0:	e086      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3318      	adds	r3, #24
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007dae:	4611      	mov	r1, r2
 8007db0:	6838      	ldr	r0, [r7, #0]
 8007db2:	4798      	blx	r3
 8007db4:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (parser == nullptr) {
 8007db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d10e      	bne.n	8007dda <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1de>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	689c      	ldr	r4, [r3, #8]
 8007dc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	f7fe f83d 	bl	8005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	461a      	mov	r2, r3
 8007dce:	4941      	ldr	r1, [pc, #260]	; (8007ed4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d8>)
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f7fd fa59 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 8007dd6:	2401      	movs	r4, #1
 8007dd8:	e06a      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, op_type, error_reporter_,
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	f107 001c 	add.w	r0, r7, #28
 8007de2:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8007de6:	f107 0318 	add.w	r3, r7, #24
 8007dea:	9300      	str	r3, [sp, #0]
 8007dec:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007dee:	4603      	mov	r3, r0
 8007df0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007df2:	47a0      	blx	r4
 8007df4:	4603      	mov	r3, r0
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d002      	beq.n	8007e08 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x20c>
 8007e02:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 8007e06:	e053      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
                                   &builtin_data_allocator,
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	685c      	ldr	r4, [r3, #4]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	689d      	ldr	r5, [r3, #8]
 8007e10:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e12:	f7fe fe50 	bl	8006ab6 <_ZNK6tflite8Operator6inputsEv>
 8007e16:	4602      	mov	r2, r0
 8007e18:	f107 0314 	add.w	r3, r7, #20
 8007e1c:	4629      	mov	r1, r5
 8007e1e:	4620      	mov	r0, r4
 8007e20:	f000 fcdc 	bl	80087dc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007e2a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x23c>
 8007e32:	f897 402a 	ldrb.w	r4, [r7, #42]	; 0x2a
 8007e36:	e03b      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	685c      	ldr	r4, [r3, #4]
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	689d      	ldr	r5, [r3, #8]
 8007e40:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8007e42:	f7fe fe46 	bl	8006ad2 <_ZNK6tflite8Operator7outputsEv>
 8007e46:	4602      	mov	r2, r0
 8007e48:	f107 0310 	add.w	r3, r7, #16
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f000 fcc4 	bl	80087dc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8007e54:	4603      	mov	r3, r0
 8007e56:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8007e5a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x26c>
 8007e62:	f897 4029 	ldrb.w	r4, [r7, #41]	; 0x29
 8007e66:	e023      	b.n	8007eb0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2b4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 8007e68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	4413      	add	r3, r2
 8007e70:	00db      	lsls	r3, r3, #3
 8007e72:	461a      	mov	r2, r3
 8007e74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007e76:	4413      	add	r3, r2
 8007e78:	627b      	str	r3, [r7, #36]	; 0x24
    *node = {};
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	2324      	movs	r3, #36	; 0x24
 8007e80:	461a      	mov	r2, r3
 8007e82:	2100      	movs	r1, #0
 8007e84:	f003 fec6 	bl	800bc14 <memset>
    node->inputs = inputs_array;
 8007e88:	697a      	ldr	r2, [r7, #20]
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e98:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e9e:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 8007ea0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea4:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8007ea6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	657b      	str	r3, [r7, #84]	; 0x54
 8007eac:	e6be      	b.n	8007c2c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x30>
  }

  return kTfLiteOk;
 8007eae:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 8007eb0:	f107 031c 	add.w	r3, r7, #28
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f000 ff2f 	bl	8008d18 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8007eba:	4623      	mov	r3, r4
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3758      	adds	r7, #88	; 0x58
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec4:	080100b0 	.word	0x080100b0
 8007ec8:	080100dc 	.word	0x080100dc
 8007ecc:	0801010c 	.word	0x0801010c
 8007ed0:	08010130 	.word	0x08010130
 8007ed4:	08010178 	.word	0x08010178

08007ed8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::AllocateVariables(TfLiteContext* context,
                                               const SubGraph* subgraph) {
 8007ed8:	b5b0      	push	{r4, r5, r7, lr}
 8007eda:	b086      	sub	sp, #24
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	60f8      	str	r0, [r7, #12]
 8007ee0:	60b9      	str	r1, [r7, #8]
 8007ee2:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	697a      	ldr	r2, [r7, #20]
 8007eee:	429a      	cmp	r2, r3
 8007ef0:	d247      	bcs.n	8007f82 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xaa>
    if (subgraph->tensors()->Get(i)->is_variable()) {
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f7fe fe09 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	6979      	ldr	r1, [r7, #20]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 fb1b 	bl	8008538 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8007f02:	4603      	mov	r3, r0
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fdb3 	bl	8006a70 <_ZNK6tflite6Tensor11is_variableEv>
 8007f0a:	4603      	mov	r3, r0
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d02c      	beq.n	8007f6a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x92>
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	6858      	ldr	r0, [r3, #4]
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	685b      	ldr	r3, [r3, #4]
          context->tensors[i].bytes, kBufferAlignment);
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	330c      	adds	r3, #12
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68ba      	ldr	r2, [r7, #8]
 8007f20:	6891      	ldr	r1, [r2, #8]
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	0192      	lsls	r2, r2, #6
 8007f26:	440a      	add	r2, r1
      context->tensors[i].data.data = memory_allocator_->AllocateFromTail(
 8007f28:	6995      	ldr	r5, [r2, #24]
 8007f2a:	68ba      	ldr	r2, [r7, #8]
 8007f2c:	6891      	ldr	r1, [r2, #8]
 8007f2e:	697a      	ldr	r2, [r7, #20]
 8007f30:	0192      	lsls	r2, r2, #6
 8007f32:	188c      	adds	r4, r1, r2
 8007f34:	2210      	movs	r2, #16
 8007f36:	4629      	mov	r1, r5
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	6063      	str	r3, [r4, #4]
      // Allocation failure.
      if (context->tensors[i].data.data == nullptr) {
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	019b      	lsls	r3, r3, #6
 8007f46:	4413      	add	r3, r2
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d10d      	bne.n	8007f6a <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x92>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6898      	ldr	r0, [r3, #8]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	689a      	ldr	r2, [r3, #8]
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	019b      	lsls	r3, r3, #6
 8007f5a:	4413      	add	r3, r2
 8007f5c:	699b      	ldr	r3, [r3, #24]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	490a      	ldr	r1, [pc, #40]	; (8007f8c <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xb4>)
 8007f62:	f7fd f991 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             context->tensors[i].bytes);
        return kTfLiteError;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e00c      	b.n	8007f84 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0xac>
      }
    }
    tflite::ResetVariableTensor(&(context->tensors[i]));
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	689a      	ldr	r2, [r3, #8]
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	019b      	lsls	r3, r3, #6
 8007f72:	4413      	add	r3, r2
 8007f74:	4618      	mov	r0, r3
 8007f76:	f7fe f886 	bl	8006086 <_ZN6tflite19ResetVariableTensorEP12TfLiteTensor>
  for (size_t i = 0; i < context->tensors_size; ++i) {
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e7b2      	b.n	8007ee8 <_ZN6tflite14MicroAllocator17AllocateVariablesEP13TfLiteContextPKNS_8SubGraphE+0x10>
  }

  return kTfLiteOk;
 8007f82:	2300      	movs	r3, #0
}
 8007f84:	4618      	mov	r0, r3
 8007f86:	3718      	adds	r7, #24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8007f8c:	08010198 	.word	0x08010198

08007f90 <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:
ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

TfLiteStatus MicroAllocator::InitGraphAndContextTensorData(
    const Model* model, TfLiteContext* context, const SubGraph* subgraph) {
 8007f90:	b590      	push	{r4, r7, lr}
 8007f92:	b087      	sub	sp, #28
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
 8007f9c:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_STATUS(AllocateTfLiteTensorArray(context, subgraph));
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	683a      	ldr	r2, [r7, #0]
 8007fa8:	6879      	ldr	r1, [r7, #4]
 8007faa:	68f8      	ldr	r0, [r7, #12]
 8007fac:	4798      	blx	r3
 8007fae:	4603      	mov	r3, r0
 8007fb0:	75fb      	strb	r3, [r7, #23]
 8007fb2:	7dfb      	ldrb	r3, [r7, #23]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2c>
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
 8007fba:	e010      	b.n	8007fde <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
  TF_LITE_ENSURE_STATUS(
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	330c      	adds	r3, #12
 8007fc2:	681c      	ldr	r4, [r3, #0]
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	68b9      	ldr	r1, [r7, #8]
 8007fca:	68f8      	ldr	r0, [r7, #12]
 8007fcc:	47a0      	blx	r4
 8007fce:	4603      	mov	r3, r0
 8007fd0:	75bb      	strb	r3, [r7, #22]
 8007fd2:	7dbb      	ldrb	r3, [r7, #22]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d001      	beq.n	8007fdc <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4c>
 8007fd8:	7dbb      	ldrb	r3, [r7, #22]
 8007fda:	e000      	b.n	8007fde <_ZN6tflite14MicroAllocator29InitGraphAndContextTensorDataEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x4e>
      PopulateTfLiteTensorArrayFromFlatbuffer(model, context, subgraph));
  return kTfLiteOk;
 8007fdc:	2300      	movs	r3, #0
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	371c      	adds	r7, #28
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	bd90      	pop	{r4, r7, pc}
	...

08007fe8 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
 8007ff0:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 8007ff2:	6838      	ldr	r0, [r7, #0]
 8007ff4:	f7fe fdfa 	bl	8006bec <_ZNK6tflite5Model9subgraphsEv>
 8007ff8:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f000 fb2a 	bl	8008654 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008000:	4603      	mov	r3, r0
 8008002:	2b01      	cmp	r3, #1
 8008004:	bf14      	ite	ne
 8008006:	2301      	movne	r3, #1
 8008008:	2300      	moveq	r3, #0
 800800a:	b2db      	uxtb	r3, r3
 800800c:	2b00      	cmp	r3, #0
 800800e:	d007      	beq.n	8008020 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4907      	ldr	r1, [pc, #28]	; (8008034 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 8008016:	4618      	mov	r0, r3
 8008018:	f7fd f936 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 800801c:	2300      	movs	r3, #0
 800801e:	e004      	b.n	800802a <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 8008020:	2100      	movs	r1, #0
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fbb2 	bl	800878c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 8008028:	4603      	mov	r3, r0
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	080101c8 	.word	0x080101c8

08008038 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(const Model* model,
                                                    TfLiteContext* context,
                                                    const SubGraph* subgraph) {
 8008038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800803a:	b0a7      	sub	sp, #156	; 0x9c
 800803c:	af02      	add	r7, sp, #8
 800803e:	60f8      	str	r0, [r7, #12]
 8008040:	60b9      	str	r1, [r7, #8]
 8008042:	607a      	str	r2, [r7, #4]
 8008044:	603b      	str	r3, [r7, #0]
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // thrown away when the child allocator (tmp_allocator) goes out of scope.
  {
    SimpleMemoryAllocator tmp_allocator(error_reporter_,
                                        memory_allocator_->GetHead(),
                                        memory_allocator_->GetTail());
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	689d      	ldr	r5, [r3, #8]
                                        memory_allocator_->GetHead(),
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	685b      	ldr	r3, [r3, #4]
                                        memory_allocator_->GetTail());
 800804e:	4618      	mov	r0, r3
 8008050:	f001 fdac 	bl	8009bac <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 8008054:	4606      	mov	r6, r0
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	4618      	mov	r0, r3
 800805c:	f001 fdb2 	bl	8009bc4 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>
 8008060:	4603      	mov	r3, r0
 8008062:	f107 0058 	add.w	r0, r7, #88	; 0x58
 8008066:	4632      	mov	r2, r6
 8008068:	4629      	mov	r1, r5
 800806a:	f001 fcad 	bl	80099c8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>

    AllocationInfoBuilder builder(error_reporter_, &tmp_allocator);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	6899      	ldr	r1, [r3, #8]
 8008072:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8008076:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800807a:	4618      	mov	r0, r3
 800807c:	f7fe fe46 	bl	8006d0c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS_13ErrorReporterEPNS_21SimpleMemoryAllocatorE>
    TF_LITE_ENSURE_STATUS(
 8008080:	6838      	ldr	r0, [r7, #0]
 8008082:	f7fe fd42 	bl	8006b0a <_ZNK6tflite8SubGraph7tensorsEv>
 8008086:	4603      	mov	r3, r0
 8008088:	4618      	mov	r0, r3
 800808a:	f000 fa47 	bl	800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800808e:	4601      	mov	r1, r0
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	695a      	ldr	r2, [r3, #20]
 8008094:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008098:	4618      	mov	r0, r3
 800809a:	f7fe fe53 	bl	8006d44 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder4InitEjj>
 800809e:	4603      	mov	r3, r0
 80080a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80080a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x7c>
 80080ac:	f897 408f 	ldrb.w	r4, [r7, #143]	; 0x8f
 80080b0:	2500      	movs	r5, #0
 80080b2:	e100      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.Init(subgraph->tensors()->size(), scratch_buffer_count_));

    const int32_t* offline_planner_offsets = nullptr;
 80080b4:	2300      	movs	r3, #0
 80080b6:	643b      	str	r3, [r7, #64]	; 0x40
    TF_LITE_ENSURE_STATUS(
 80080b8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80080bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80080c0:	68b9      	ldr	r1, [r7, #8]
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7ff f83c 	bl	8007140 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 80080c8:	4603      	mov	r3, r0
 80080ca:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
 80080ce:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d003      	beq.n	80080de <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xa6>
 80080d6:	f897 408e 	ldrb.w	r4, [r7, #142]	; 0x8e
 80080da:	2500      	movs	r5, #0
 80080dc:	e0eb      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
        builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
    TF_LITE_ENSURE_STATUS(builder.AddTensors(subgraph, offline_planner_offsets,
 80080de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80080e8:	6839      	ldr	r1, [r7, #0]
 80080ea:	f7fe fe89 	bl	8006e00 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP12TfLiteTensor>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 80080f4:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d003      	beq.n	8008104 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xcc>
 80080fc:	f897 408d 	ldrb.w	r4, [r7, #141]	; 0x8d
 8008100:	2500      	movs	r5, #0
 8008102:	e0d8      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
                                             context->tensors));

    TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_handles_));
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	691a      	ldr	r2, [r3, #16]
 8008108:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800810c:	4611      	mov	r1, r2
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff f892 	bl	8007238 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal19ScratchBufferHandleE>
 8008114:	4603      	mov	r3, r0
 8008116:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
 800811a:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800811e:	2b00      	cmp	r3, #0
 8008120:	d003      	beq.n	800812a <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0xf2>
 8008122:	f897 408c 	ldrb.w	r4, [r7, #140]	; 0x8c
 8008126:	2500      	movs	r5, #0
 8008128:	e0c5      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    const AllocationInfo* allocation_info = builder.Finish();
 800812a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe fe1c 	bl	8006d6c <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder6FinishEv>
 8008134:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

    // Remaining arena size that memory planner can use for calculating offsets.
    size_t remaining_arena_size = tmp_allocator.GetAvailableMemory();
 8008138:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800813c:	4618      	mov	r0, r3
 800813e:	f001 fd4d 	bl	8009bdc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 8008142:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
    uint8_t* planner_arena =
        tmp_allocator.AllocateFromHead(remaining_arena_size, /*alignment=*/1);
 8008146:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800814a:	2201      	movs	r2, #1
 800814c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8008150:	4618      	mov	r0, r3
 8008152:	f001 fcc7 	bl	8009ae4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>
 8008156:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 800815a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800815e:	2b00      	cmp	r3, #0
 8008160:	d10f      	bne.n	8008182 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x14a>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6898      	ldr	r0, [r3, #8]
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6899      	ldr	r1, [r3, #8]
 800816a:	4b5a      	ldr	r3, [pc, #360]	; (80082d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x29c>)
 800816c:	9301      	str	r3, [sp, #4]
 800816e:	f240 339a 	movw	r3, #922	; 0x39a
 8008172:	9300      	str	r3, [sp, #0]
 8008174:	4b58      	ldr	r3, [pc, #352]	; (80082d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8008176:	4a59      	ldr	r2, [pc, #356]	; (80082dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8008178:	f7fd f89f 	bl	80052ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800817c:	2401      	movs	r4, #1
 800817e:	2500      	movs	r5, #0
 8008180:	e099      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 8008182:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008186:	f107 0314 	add.w	r3, r7, #20
 800818a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 800818e:	4618      	mov	r0, r3
 8008190:	f003 f882 	bl	800b298 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
    TF_LITE_ENSURE_STATUS(
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	689d      	ldr	r5, [r3, #8]
 8008198:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800819c:	4618      	mov	r0, r3
 800819e:	f7fe fdf1 	bl	8006d84 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 80081a2:	4603      	mov	r3, r0
 80081a4:	f107 0114 	add.w	r1, r7, #20
 80081a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80081ac:	4628      	mov	r0, r5
 80081ae:	f7ff f889 	bl	80072c4 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 80081b2:	4603      	mov	r3, r0
 80081b4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80081b8:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x190>
 80081c0:	f897 407f 	ldrb.w	r4, [r7, #127]	; 0x7f
 80081c4:	2500      	movs	r5, #0
 80081c6:	e06b      	b.n	80082a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
        CreatePlan(error_reporter_, &planner, allocation_info, builder.Size()));

    size_t actual_available_arena_size =
        memory_allocator_->GetAvailableMemory();
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	4618      	mov	r0, r3
 80081ce:	f001 fd05 	bl	8009bdc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>
 80081d2:	67b8      	str	r0, [r7, #120]	; 0x78
    // Make sure we have enough arena size.
    if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 80081d4:	f107 0314 	add.w	r3, r7, #20
 80081d8:	4618      	mov	r0, r3
 80081da:	f003 fb16 	bl	800b80a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80081de:	4602      	mov	r2, r0
 80081e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081e2:	4293      	cmp	r3, r2
 80081e4:	bf34      	ite	cc
 80081e6:	2301      	movcc	r3, #1
 80081e8:	2300      	movcs	r3, #0
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d00f      	beq.n	8008210 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x1d8>
      TF_LITE_REPORT_ERROR(
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	689c      	ldr	r4, [r3, #8]
 80081f4:	f107 0314 	add.w	r3, r7, #20
 80081f8:	4618      	mov	r0, r3
 80081fa:	f003 fb06 	bl	800b80a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 80081fe:	4602      	mov	r2, r0
 8008200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008202:	4937      	ldr	r1, [pc, #220]	; (80082e0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a8>)
 8008204:	4620      	mov	r0, r4
 8008206:	f7fd f83f 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter_,
          "Arena size is too small for activation buffers. Needed %d but only "
          "%d was available.",
          planner.GetMaximumMemorySize(), actual_available_arena_size);
      return kTfLiteError;
 800820a:	2401      	movs	r4, #1
 800820c:	2500      	movs	r5, #0
 800820e:	e047      	b.n	80082a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
    }

    // Commit the plan.
    TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	689d      	ldr	r5, [r3, #8]
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fcc7 	bl	8009bac <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>
 800821e:	4606      	mov	r6, r0
 8008220:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008224:	4618      	mov	r0, r3
 8008226:	f7fe fdad 	bl	8006d84 <_ZNK6tflite12_GLOBAL__N_121AllocationInfoBuilder4SizeEv>
 800822a:	4603      	mov	r3, r0
 800822c:	f107 0114 	add.w	r1, r7, #20
 8008230:	9300      	str	r3, [sp, #0]
 8008232:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008236:	4632      	mov	r2, r6
 8008238:	4628      	mov	r0, r5
 800823a:	f7ff f89d 	bl	8007378 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 800823e:	4603      	mov	r3, r0
 8008240:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8008244:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8008248:	2b00      	cmp	r3, #0
 800824a:	d003      	beq.n	8008254 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x21c>
 800824c:	f897 4077 	ldrb.w	r4, [r7, #119]	; 0x77
 8008250:	2500      	movs	r5, #0
 8008252:	e025      	b.n	80082a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
                                     memory_allocator_->GetHead(),
                                     allocation_info, builder.Size()));
    // Allocate the planned area, so the allocator knows it's used.
    uint8_t* allocated_tensor_memory =
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	685e      	ldr	r6, [r3, #4]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	685b      	ldr	r3, [r3, #4]
                                            /*alignment=*/1);
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	3308      	adds	r3, #8
 8008260:	681d      	ldr	r5, [r3, #0]
        memory_allocator_->AllocateFromHead(planner.GetMaximumMemorySize(),
 8008262:	f107 0314 	add.w	r3, r7, #20
 8008266:	4618      	mov	r0, r3
 8008268:	f003 facf 	bl	800b80a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 800826c:	4603      	mov	r3, r0
                                            /*alignment=*/1);
 800826e:	2201      	movs	r2, #1
 8008270:	4619      	mov	r1, r3
 8008272:	4630      	mov	r0, r6
 8008274:	47a8      	blx	r5
 8008276:	6738      	str	r0, [r7, #112]	; 0x70
    TF_LITE_ENSURE(error_reporter_, allocated_tensor_memory != nullptr);
 8008278:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10f      	bne.n	800829e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x266>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	6898      	ldr	r0, [r3, #8]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	6899      	ldr	r1, [r3, #8]
 8008286:	4b17      	ldr	r3, [pc, #92]	; (80082e4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2ac>)
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	f240 33b3 	movw	r3, #947	; 0x3b3
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	4b11      	ldr	r3, [pc, #68]	; (80082d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a0>)
 8008292:	4a12      	ldr	r2, [pc, #72]	; (80082dc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x2a4>)
 8008294:	f7fd f811 	bl	80052ba <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 8008298:	2401      	movs	r4, #1
 800829a:	2500      	movs	r5, #0
 800829c:	e000      	b.n	80082a0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x268>
 800829e:	2501      	movs	r5, #1
 80082a0:	f107 0314 	add.w	r3, r7, #20
 80082a4:	4618      	mov	r0, r3
 80082a6:	f003 f849 	bl	800b33c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80082aa:	2d01      	cmp	r5, #1
 80082ac:	d001      	beq.n	80082b2 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27a>
 80082ae:	2500      	movs	r5, #0
 80082b0:	e001      	b.n	80082b6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x27e>
    GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80082b2:	bf00      	nop
 80082b4:	2501      	movs	r5, #1
 80082b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80082ba:	4618      	mov	r0, r3
 80082bc:	f001 fbf2 	bl	8009aa4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 80082c0:	2d01      	cmp	r5, #1
 80082c2:	d101      	bne.n	80082c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEP13TfLiteContextPKNS_8SubGraphE+0x290>
                                        memory_allocator_->GetTail());
 80082c4:	bf00      	nop
  }
  return kTfLiteOk;
 80082c6:	2400      	movs	r4, #0
 80082c8:	4623      	mov	r3, r4
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3794      	adds	r7, #148	; 0x94
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082d2:	bf00      	nop
 80082d4:	08010248 	.word	0x08010248
 80082d8:	080101f4 	.word	0x080101f4
 80082dc:	08010230 	.word	0x08010230
 80082e0:	08010264 	.word	0x08010264
 80082e4:	080102bc 	.word	0x080102bc

080082e8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80082f4:	887b      	ldrh	r3, [r7, #2]
 80082f6:	4619      	mov	r1, r3
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 faaf 	bl	800885c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 80082fe:	4603      	mov	r3, r0
  }
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	460b      	mov	r3, r1
 8008312:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008314:	887b      	ldrh	r3, [r7, #2]
 8008316:	4619      	mov	r1, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 fabf 	bl	800889c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 800831e:	4603      	mov	r3, r0
  }
 8008320:	4618      	mov	r0, r3
 8008322:	3708      	adds	r7, #8
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008328:	b580      	push	{r7, lr}
 800832a:	b082      	sub	sp, #8
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008334:	887b      	ldrh	r3, [r7, #2]
 8008336:	4619      	mov	r1, r3
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 facf 	bl	80088dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 800833e:	4603      	mov	r3, r0
  }
 8008340:	4618      	mov	r0, r3
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	460b      	mov	r3, r1
 8008352:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008354:	887b      	ldrh	r3, [r7, #2]
 8008356:	4619      	mov	r1, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 fadf 	bl	800891c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 800835e:	4603      	mov	r3, r0
  }
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008368:	b580      	push	{r7, lr}
 800836a:	b082      	sub	sp, #8
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	460b      	mov	r3, r1
 8008372:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008374:	887b      	ldrh	r3, [r7, #2]
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f000 faef 	bl	800895c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 800837e:	4603      	mov	r3, r0
  }
 8008380:	4618      	mov	r0, r3
 8008382:	3708      	adds	r7, #8
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008388:	b580      	push	{r7, lr}
 800838a:	b082      	sub	sp, #8
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	460b      	mov	r3, r1
 8008392:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008394:	887b      	ldrh	r3, [r7, #2]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 faff 	bl	800899c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800839e:	4603      	mov	r3, r0
  }
 80083a0:	4618      	mov	r0, r3
 80083a2:	3708      	adds	r7, #8
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}

080083a8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b082      	sub	sp, #8
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80083b4:	887b      	ldrh	r3, [r7, #2]
 80083b6:	4619      	mov	r1, r3
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f000 fb0f 	bl	80089dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80083be:	4603      	mov	r3, r0
  }
 80083c0:	4618      	mov	r0, r3
 80083c2:	3708      	adds	r7, #8
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b082      	sub	sp, #8
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80083d4:	887b      	ldrh	r3, [r7, #2]
 80083d6:	4619      	mov	r1, r3
 80083d8:	6878      	ldr	r0, [r7, #4]
 80083da:	f000 fb1f 	bl	8008a1c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80083de:	4603      	mov	r3, r0
  }
 80083e0:	4618      	mov	r0, r3
 80083e2:	3708      	adds	r7, #8
 80083e4:	46bd      	mov	sp, r7
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b082      	sub	sp, #8
 80083ec:	af00      	add	r7, sp, #0
 80083ee:	6078      	str	r0, [r7, #4]
 80083f0:	460b      	mov	r3, r1
 80083f2:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80083f4:	887b      	ldrh	r3, [r7, #2]
 80083f6:	4619      	mov	r1, r3
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f000 fb2f 	bl	8008a5c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80083fe:	4603      	mov	r3, r0
  }
 8008400:	4618      	mov	r0, r3
 8008402:	3708      	adds	r7, #8
 8008404:	46bd      	mov	sp, r7
 8008406:	bd80      	pop	{r7, pc}

08008408 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8008408:	b580      	push	{r7, lr}
 800840a:	b082      	sub	sp, #8
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
 8008410:	460b      	mov	r3, r1
 8008412:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8008414:	887b      	ldrh	r3, [r7, #2]
 8008416:	4619      	mov	r1, r3
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f000 fb3f 	bl	8008a9c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 800841e:	4603      	mov	r3, r0
  }
 8008420:	4618      	mov	r0, r3
 8008422:	3708      	adds	r7, #8
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008428:	b580      	push	{r7, lr}
 800842a:	b082      	sub	sp, #8
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4618      	mov	r0, r3
 8008436:	f7f9 fd4d 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800843a:	4603      	mov	r3, r0
 800843c:	4618      	mov	r0, r3
 800843e:	3708      	adds	r7, #8
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8008444:	b580      	push	{r7, lr}
 8008446:	b082      	sub	sp, #8
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	4618      	mov	r0, r3
 8008452:	f7f9 fd3f 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008456:	4603      	mov	r3, r0
 8008458:	4618      	mov	r0, r3
 800845a:	3708      	adds	r7, #8
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008460:	b580      	push	{r7, lr}
 8008462:	b082      	sub	sp, #8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f7ff ffea 	bl	8008444 <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8008470:	4602      	mov	r2, r0
 8008472:	683b      	ldr	r3, [r7, #0]
 8008474:	4293      	cmp	r3, r2
 8008476:	d306      	bcc.n	8008486 <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8008478:	4b0a      	ldr	r3, [pc, #40]	; (80084a4 <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 800847a:	4a0b      	ldr	r2, [pc, #44]	; (80084a8 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 800847c:	f240 1101 	movw	r1, #257	; 0x101
 8008480:	480a      	ldr	r0, [pc, #40]	; (80084ac <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8008482:	f003 fb33 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008486:	6878      	ldr	r0, [r7, #4]
 8008488:	f000 fb4a 	bl	8008b20 <_ZNK11flatbuffers6VectorIfE4DataEv>
 800848c:	4603      	mov	r3, r0
 800848e:	6839      	ldr	r1, [r7, #0]
 8008490:	4618      	mov	r0, r3
 8008492:	f000 fb2f 	bl	8008af4 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8008496:	eef0 7a40 	vmov.f32	s15, s0
  }
 800849a:	eeb0 0a67 	vmov.f32	s0, s15
 800849e:	3708      	adds	r7, #8
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}
 80084a4:	080102e0 	.word	0x080102e0
 80084a8:	080dcf60 	.word	0x080dcf60
 80084ac:	080102ec 	.word	0x080102ec

080084b0 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4618      	mov	r0, r3
 80084be:	f7f9 fd09 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80084c2:	4603      	mov	r3, r0
 80084c4:	4618      	mov	r0, r3
 80084c6:	3708      	adds	r7, #8
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 80084cc:	b590      	push	{r4, r7, lr}
 80084ce:	b083      	sub	sp, #12
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
 80084d4:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f7ff ffea 	bl	80084b0 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80084dc:	4602      	mov	r2, r0
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	4293      	cmp	r3, r2
 80084e2:	d306      	bcc.n	80084f2 <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 80084e4:	4b0a      	ldr	r3, [pc, #40]	; (8008510 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 80084e6:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 80084e8:	f240 1101 	movw	r1, #257	; 0x101
 80084ec:	480a      	ldr	r0, [pc, #40]	; (8008518 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 80084ee:	f003 fafd 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80084f2:	6878      	ldr	r0, [r7, #4]
 80084f4:	f000 fb36 	bl	8008b64 <_ZNK11flatbuffers6VectorIxE4DataEv>
 80084f8:	4603      	mov	r3, r0
 80084fa:	6839      	ldr	r1, [r7, #0]
 80084fc:	4618      	mov	r0, r3
 80084fe:	f000 fb1b 	bl	8008b38 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8008502:	4603      	mov	r3, r0
 8008504:	460c      	mov	r4, r1
  }
 8008506:	4618      	mov	r0, r3
 8008508:	4621      	mov	r1, r4
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	bd90      	pop	{r4, r7, pc}
 8008510:	080102e0 	.word	0x080102e0
 8008514:	080dd028 	.word	0x080dd028
 8008518:	080102ec 	.word	0x080102ec

0800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4618      	mov	r0, r3
 800852a:	f7f9 fcd3 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800852e:	4603      	mov	r3, r0
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008542:	6878      	ldr	r0, [r7, #4]
 8008544:	f7ff ffea 	bl	800851c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008548:	4602      	mov	r2, r0
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	4293      	cmp	r3, r2
 800854e:	d306      	bcc.n	800855e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8008550:	4b09      	ldr	r3, [pc, #36]	; (8008578 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8008552:	4a0a      	ldr	r2, [pc, #40]	; (800857c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8008554:	f240 1101 	movw	r1, #257	; 0x101
 8008558:	4809      	ldr	r0, [pc, #36]	; (8008580 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 800855a:	f003 fac7 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	f000 fb20 	bl	8008ba4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8008564:	4603      	mov	r3, r0
 8008566:	6839      	ldr	r1, [r7, #0]
 8008568:	4618      	mov	r0, r3
 800856a:	f000 fb07 	bl	8008b7c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 800856e:	4603      	mov	r3, r0
  }
 8008570:	4618      	mov	r0, r3
 8008572:	3708      	adds	r7, #8
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	080102e0 	.word	0x080102e0
 800857c:	080dcd6c 	.word	0x080dcd6c
 8008580:	080102ec 	.word	0x080102ec

08008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008584:	b580      	push	{r7, lr}
 8008586:	b082      	sub	sp, #8
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4618      	mov	r0, r3
 8008592:	f7f9 fc9f 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008596:	4603      	mov	r3, r0
 8008598:	4618      	mov	r0, r3
 800859a:	3708      	adds	r7, #8
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b082      	sub	sp, #8
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
 80085a8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff ffea 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80085b0:	4602      	mov	r2, r0
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	4293      	cmp	r3, r2
 80085b6:	d306      	bcc.n	80085c6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 80085b8:	4b09      	ldr	r3, [pc, #36]	; (80085e0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 80085ba:	4a0a      	ldr	r2, [pc, #40]	; (80085e4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 80085bc:	f240 1101 	movw	r1, #257	; 0x101
 80085c0:	4809      	ldr	r0, [pc, #36]	; (80085e8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 80085c2:	f003 fa93 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f000 fb0c 	bl	8008be4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 80085cc:	4603      	mov	r3, r0
 80085ce:	6839      	ldr	r1, [r7, #0]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 faf3 	bl	8008bbc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 80085d6:	4603      	mov	r3, r0
  }
 80085d8:	4618      	mov	r0, r3
 80085da:	3708      	adds	r7, #8
 80085dc:	46bd      	mov	sp, r7
 80085de:	bd80      	pop	{r7, pc}
 80085e0:	080102e0 	.word	0x080102e0
 80085e4:	080dce64 	.word	0x080dce64
 80085e8:	080102ec 	.word	0x080102ec

080085ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b082      	sub	sp, #8
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7f9 fc6b 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80085fe:	4603      	mov	r3, r0
 8008600:	4618      	mov	r0, r3
 8008602:	3708      	adds	r7, #8
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008608:	b580      	push	{r7, lr}
 800860a:	b082      	sub	sp, #8
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff ffea 	bl	80085ec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8008618:	4602      	mov	r2, r0
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	4293      	cmp	r3, r2
 800861e:	d306      	bcc.n	800862e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8008622:	4a0a      	ldr	r2, [pc, #40]	; (800864c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8008624:	f240 1101 	movw	r1, #257	; 0x101
 8008628:	4809      	ldr	r0, [pc, #36]	; (8008650 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 800862a:	f003 fa5f 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 faf8 	bl	8008c24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8008634:	4603      	mov	r3, r0
 8008636:	6839      	ldr	r1, [r7, #0]
 8008638:	4618      	mov	r0, r3
 800863a:	f000 fadf 	bl	8008bfc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 800863e:	4603      	mov	r3, r0
  }
 8008640:	4618      	mov	r0, r3
 8008642:	3708      	adds	r7, #8
 8008644:	46bd      	mov	sp, r7
 8008646:	bd80      	pop	{r7, pc}
 8008648:	080102e0 	.word	0x080102e0
 800864c:	080dd100 	.word	0x080dd100
 8008650:	080102ec 	.word	0x080102ec

08008654 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4618      	mov	r0, r3
 8008662:	f7f9 fc37 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008666:	4603      	mov	r3, r0
 8008668:	4618      	mov	r0, r3
 800866a:	3708      	adds	r7, #8
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}

08008670 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008670:	b580      	push	{r7, lr}
 8008672:	b082      	sub	sp, #8
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f7ff ffea 	bl	8008654 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8008680:	4602      	mov	r2, r0
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	4293      	cmp	r3, r2
 8008686:	d306      	bcc.n	8008696 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8008688:	4b09      	ldr	r3, [pc, #36]	; (80086b0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 800868a:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 800868c:	f240 1101 	movw	r1, #257	; 0x101
 8008690:	4809      	ldr	r0, [pc, #36]	; (80086b8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8008692:	f003 fa2b 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fae4 	bl	8008c64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 800869c:	4603      	mov	r3, r0
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	4618      	mov	r0, r3
 80086a2:	f000 facb 	bl	8008c3c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 80086a6:	4603      	mov	r3, r0
  }
 80086a8:	4618      	mov	r0, r3
 80086aa:	3708      	adds	r7, #8
 80086ac:	46bd      	mov	sp, r7
 80086ae:	bd80      	pop	{r7, pc}
 80086b0:	080102e0 	.word	0x080102e0
 80086b4:	080dcb78 	.word	0x080dcb78
 80086b8:	080102ec 	.word	0x080102ec

080086bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	4618      	mov	r0, r3
 80086ca:	f7f9 fc03 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 80086ce:	4603      	mov	r3, r0
 80086d0:	4618      	mov	r0, r3
 80086d2:	3708      	adds	r7, #8
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd80      	pop	{r7, pc}

080086d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 80086d8:	b580      	push	{r7, lr}
 80086da:	b082      	sub	sp, #8
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 80086e2:	6878      	ldr	r0, [r7, #4]
 80086e4:	f7ff ffea 	bl	80086bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 80086e8:	4602      	mov	r2, r0
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d306      	bcc.n	80086fe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 80086f0:	4b09      	ldr	r3, [pc, #36]	; (8008718 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 80086f2:	4a0a      	ldr	r2, [pc, #40]	; (800871c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 80086f4:	f240 1101 	movw	r1, #257	; 0x101
 80086f8:	4809      	ldr	r0, [pc, #36]	; (8008720 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 80086fa:	f003 f9f7 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fad0 	bl	8008ca4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8008704:	4603      	mov	r3, r0
 8008706:	6839      	ldr	r1, [r7, #0]
 8008708:	4618      	mov	r0, r3
 800870a:	f000 fab7 	bl	8008c7c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 800870e:	4603      	mov	r3, r0
  }
 8008710:	4618      	mov	r0, r3
 8008712:	3708      	adds	r7, #8
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}
 8008718:	080102e0 	.word	0x080102e0
 800871c:	080dcc74 	.word	0x080dcc74
 8008720:	080102ec 	.word	0x080102ec

08008724 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8008724:	b580      	push	{r7, lr}
 8008726:	b082      	sub	sp, #8
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4618      	mov	r0, r3
 8008732:	f7f9 fbcf 	bl	8001ed4 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8008736:	4603      	mov	r3, r0
 8008738:	4618      	mov	r0, r3
 800873a:	3708      	adds	r7, #8
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8008740:	b580      	push	{r7, lr}
 8008742:	b082      	sub	sp, #8
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7ff ffea 	bl	8008724 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8008750:	4602      	mov	r2, r0
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	4293      	cmp	r3, r2
 8008756:	d306      	bcc.n	8008766 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8008758:	4b09      	ldr	r3, [pc, #36]	; (8008780 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 800875a:	4a0a      	ldr	r2, [pc, #40]	; (8008784 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 800875c:	f240 1101 	movw	r1, #257	; 0x101
 8008760:	4809      	ldr	r0, [pc, #36]	; (8008788 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8008762:	f003 f9c3 	bl	800baec <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 fabc 	bl	8008ce4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 800876c:	4603      	mov	r3, r0
 800876e:	6839      	ldr	r1, [r7, #0]
 8008770:	4618      	mov	r0, r3
 8008772:	f000 faa3 	bl	8008cbc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8008776:	4603      	mov	r3, r0
  }
 8008778:	4618      	mov	r0, r3
 800877a:	3708      	adds	r7, #8
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}
 8008780:	080102e0 	.word	0x080102e0
 8008784:	080dca7c 	.word	0x080dca7c
 8008788:	080102ec 	.word	0x080102ec

0800878c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 800878c:	b580      	push	{r7, lr}
 800878e:	b082      	sub	sp, #8
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
 8008794:	6039      	str	r1, [r7, #0]
 8008796:	6839      	ldr	r1, [r7, #0]
 8008798:	6878      	ldr	r0, [r7, #4]
 800879a:	f7ff ff69 	bl	8008670 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 800879e:	4603      	mov	r3, r0
 80087a0:	4618      	mov	r0, r3
 80087a2:	3708      	adds	r7, #8
 80087a4:	46bd      	mov	sp, r7
 80087a6:	bd80      	pop	{r7, pc}

080087a8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b082      	sub	sp, #8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
 80087b0:	6039      	str	r1, [r7, #0]
 80087b2:	6839      	ldr	r1, [r7, #0]
 80087b4:	6878      	ldr	r0, [r7, #4]
 80087b6:	f7ff ff8f 	bl	80086d8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 80087ba:	4603      	mov	r3, r0
 80087bc:	4618      	mov	r0, r3
 80087be:	3708      	adds	r7, #8
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
 80087cc:	6878      	ldr	r0, [r7, #4]
 80087ce:	f000 f985 	bl	8008adc <_ZNK11flatbuffers6VectorIhE4DataEv>
 80087d2:	4603      	mov	r3, r0
 80087d4:	4618      	mov	r0, r3
 80087d6:	3708      	adds	r7, #8
 80087d8:	46bd      	mov	sp, r7
 80087da:	bd80      	pop	{r7, pc}

080087dc <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 80087dc:	b580      	push	{r7, lr}
 80087de:	b084      	sub	sp, #16
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
 80087e8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d101      	bne.n	80087f4 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 80087f0:	f003 f974 	bl	800badc <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d101      	bne.n	80087fe <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 80087fa:	f003 f96f 	bl	800badc <abort>
    *result = const_cast<kTfLiteArrayType*>(
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	687a      	ldr	r2, [r7, #4]
 8008802:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008804:	2300      	movs	r3, #0
}
 8008806:	4618      	mov	r0, r3
 8008808:	3710      	adds	r7, #16
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}

0800880e <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 800880e:	b580      	push	{r7, lr}
 8008810:	b084      	sub	sp, #16
 8008812:	af00      	add	r7, sp, #0
 8008814:	60f8      	str	r0, [r7, #12]
 8008816:	60b9      	str	r1, [r7, #8]
 8008818:	607a      	str	r2, [r7, #4]
 800881a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8008822:	f003 f95b 	bl	800badc <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d101      	bne.n	8008830 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 800882c:	f003 f956 	bl	800badc <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8008830:	683b      	ldr	r3, [r7, #0]
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8008836:	2300      	movs	r3, #0
}
 8008838:	4618      	mov	r0, r3
 800883a:	3710      	adds	r7, #16
 800883c:	46bd      	mov	sp, r7
 800883e:	bd80      	pop	{r7, pc}

08008840 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
 8008848:	6039      	str	r1, [r7, #0]
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f7ff fedb 	bl	8008608 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8008852:	4603      	mov	r3, r0
 8008854:	4618      	mov	r0, r3
 8008856:	3708      	adds	r7, #8
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}

0800885c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008868:	887b      	ldrh	r3, [r7, #2]
 800886a:	4619      	mov	r1, r3
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7f8 fc41 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008872:	4603      	mov	r3, r0
 8008874:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008876:	687a      	ldr	r2, [r7, #4]
 8008878:	89fb      	ldrh	r3, [r7, #14]
 800887a:	4413      	add	r3, r2
 800887c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800887e:	89fb      	ldrh	r3, [r7, #14]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d006      	beq.n	8008892 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 8008884:	68b8      	ldr	r0, [r7, #8]
 8008886:	f7f9 fb3e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800888a:	4602      	mov	r2, r0
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	4413      	add	r3, r2
                        : nullptr;
 8008890:	e000      	b.n	8008894 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008892:	2300      	movs	r3, #0
  }
 8008894:	4618      	mov	r0, r3
 8008896:	3710      	adds	r7, #16
 8008898:	46bd      	mov	sp, r7
 800889a:	bd80      	pop	{r7, pc}

0800889c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
 80088a4:	460b      	mov	r3, r1
 80088a6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80088a8:	887b      	ldrh	r3, [r7, #2]
 80088aa:	4619      	mov	r1, r3
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f7f8 fc21 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80088b2:	4603      	mov	r3, r0
 80088b4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	89fb      	ldrh	r3, [r7, #14]
 80088ba:	4413      	add	r3, r2
 80088bc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80088be:	89fb      	ldrh	r3, [r7, #14]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d006      	beq.n	80088d2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 80088c4:	68b8      	ldr	r0, [r7, #8]
 80088c6:	f7f9 fb1e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80088ca:	4602      	mov	r2, r0
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	4413      	add	r3, r2
                        : nullptr;
 80088d0:	e000      	b.n	80088d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80088d2:	2300      	movs	r3, #0
  }
 80088d4:	4618      	mov	r0, r3
 80088d6:	3710      	adds	r7, #16
 80088d8:	46bd      	mov	sp, r7
 80088da:	bd80      	pop	{r7, pc}

080088dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80088dc:	b580      	push	{r7, lr}
 80088de:	b084      	sub	sp, #16
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
 80088e4:	460b      	mov	r3, r1
 80088e6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80088e8:	887b      	ldrh	r3, [r7, #2]
 80088ea:	4619      	mov	r1, r3
 80088ec:	6878      	ldr	r0, [r7, #4]
 80088ee:	f7f8 fc01 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80088f2:	4603      	mov	r3, r0
 80088f4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	89fb      	ldrh	r3, [r7, #14]
 80088fa:	4413      	add	r3, r2
 80088fc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80088fe:	89fb      	ldrh	r3, [r7, #14]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d006      	beq.n	8008912 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 8008904:	68b8      	ldr	r0, [r7, #8]
 8008906:	f7f9 fafe 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800890a:	4602      	mov	r2, r0
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	4413      	add	r3, r2
                        : nullptr;
 8008910:	e000      	b.n	8008914 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008912:	2300      	movs	r3, #0
  }
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	460b      	mov	r3, r1
 8008926:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008928:	887b      	ldrh	r3, [r7, #2]
 800892a:	4619      	mov	r1, r3
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7f8 fbe1 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008932:	4603      	mov	r3, r0
 8008934:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008936:	687a      	ldr	r2, [r7, #4]
 8008938:	89fb      	ldrh	r3, [r7, #14]
 800893a:	4413      	add	r3, r2
 800893c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800893e:	89fb      	ldrh	r3, [r7, #14]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d006      	beq.n	8008952 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 8008944:	68b8      	ldr	r0, [r7, #8]
 8008946:	f7f9 fade 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800894a:	4602      	mov	r2, r0
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	4413      	add	r3, r2
                        : nullptr;
 8008950:	e000      	b.n	8008954 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008952:	2300      	movs	r3, #0
  }
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008968:	887b      	ldrh	r3, [r7, #2]
 800896a:	4619      	mov	r1, r3
 800896c:	6878      	ldr	r0, [r7, #4]
 800896e:	f7f8 fbc1 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008972:	4603      	mov	r3, r0
 8008974:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008976:	687a      	ldr	r2, [r7, #4]
 8008978:	89fb      	ldrh	r3, [r7, #14]
 800897a:	4413      	add	r3, r2
 800897c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800897e:	89fb      	ldrh	r3, [r7, #14]
 8008980:	2b00      	cmp	r3, #0
 8008982:	d006      	beq.n	8008992 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 8008984:	68b8      	ldr	r0, [r7, #8]
 8008986:	f7f9 fabe 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800898a:	4602      	mov	r2, r0
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4413      	add	r3, r2
                        : nullptr;
 8008990:	e000      	b.n	8008994 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008992:	2300      	movs	r3, #0
  }
 8008994:	4618      	mov	r0, r3
 8008996:	3710      	adds	r7, #16
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	460b      	mov	r3, r1
 80089a6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80089a8:	887b      	ldrh	r3, [r7, #2]
 80089aa:	4619      	mov	r1, r3
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7f8 fba1 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80089b2:	4603      	mov	r3, r0
 80089b4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80089b6:	687a      	ldr	r2, [r7, #4]
 80089b8:	89fb      	ldrh	r3, [r7, #14]
 80089ba:	4413      	add	r3, r2
 80089bc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80089be:	89fb      	ldrh	r3, [r7, #14]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d006      	beq.n	80089d2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 80089c4:	68b8      	ldr	r0, [r7, #8]
 80089c6:	f7f9 fa9e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80089ca:	4602      	mov	r2, r0
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	4413      	add	r3, r2
                        : nullptr;
 80089d0:	e000      	b.n	80089d4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80089d2:	2300      	movs	r3, #0
  }
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}

080089dc <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80089dc:	b580      	push	{r7, lr}
 80089de:	b084      	sub	sp, #16
 80089e0:	af00      	add	r7, sp, #0
 80089e2:	6078      	str	r0, [r7, #4]
 80089e4:	460b      	mov	r3, r1
 80089e6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80089e8:	887b      	ldrh	r3, [r7, #2]
 80089ea:	4619      	mov	r1, r3
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f7f8 fb81 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80089f2:	4603      	mov	r3, r0
 80089f4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	89fb      	ldrh	r3, [r7, #14]
 80089fa:	4413      	add	r3, r2
 80089fc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80089fe:	89fb      	ldrh	r3, [r7, #14]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d006      	beq.n	8008a12 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 8008a04:	68b8      	ldr	r0, [r7, #8]
 8008a06:	f7f9 fa7e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008a0a:	4602      	mov	r2, r0
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	4413      	add	r3, r2
                        : nullptr;
 8008a10:	e000      	b.n	8008a14 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008a12:	2300      	movs	r3, #0
  }
 8008a14:	4618      	mov	r0, r3
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008a28:	887b      	ldrh	r3, [r7, #2]
 8008a2a:	4619      	mov	r1, r3
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f7f8 fb61 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008a32:	4603      	mov	r3, r0
 8008a34:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	89fb      	ldrh	r3, [r7, #14]
 8008a3a:	4413      	add	r3, r2
 8008a3c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008a3e:	89fb      	ldrh	r3, [r7, #14]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d006      	beq.n	8008a52 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 8008a44:	68b8      	ldr	r0, [r7, #8]
 8008a46:	f7f9 fa5e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	4413      	add	r3, r2
                        : nullptr;
 8008a50:	e000      	b.n	8008a54 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008a52:	2300      	movs	r3, #0
  }
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
 8008a64:	460b      	mov	r3, r1
 8008a66:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008a68:	887b      	ldrh	r3, [r7, #2]
 8008a6a:	4619      	mov	r1, r3
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f7f8 fb41 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008a72:	4603      	mov	r3, r0
 8008a74:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008a76:	687a      	ldr	r2, [r7, #4]
 8008a78:	89fb      	ldrh	r3, [r7, #14]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008a7e:	89fb      	ldrh	r3, [r7, #14]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d006      	beq.n	8008a92 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 8008a84:	68b8      	ldr	r0, [r7, #8]
 8008a86:	f7f9 fa3e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4413      	add	r3, r2
                        : nullptr;
 8008a90:	e000      	b.n	8008a94 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008a92:	2300      	movs	r3, #0
  }
 8008a94:	4618      	mov	r0, r3
 8008a96:	3710      	adds	r7, #16
 8008a98:	46bd      	mov	sp, r7
 8008a9a:	bd80      	pop	{r7, pc}

08008a9c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	460b      	mov	r3, r1
 8008aa6:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008aa8:	887b      	ldrh	r3, [r7, #2]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7f8 fb21 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8008ab2:	4603      	mov	r3, r0
 8008ab4:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	89fb      	ldrh	r3, [r7, #14]
 8008aba:	4413      	add	r3, r2
 8008abc:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008abe:	89fb      	ldrh	r3, [r7, #14]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d006      	beq.n	8008ad2 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 8008ac4:	68b8      	ldr	r0, [r7, #8]
 8008ac6:	f7f9 fa1e 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008aca:	4602      	mov	r2, r0
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4413      	add	r3, r2
                        : nullptr;
 8008ad0:	e000      	b.n	8008ad4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008ad2:	2300      	movs	r3, #0
  }
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	3710      	adds	r7, #16
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	bd80      	pop	{r7, pc}

08008adc <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	3304      	adds	r3, #4
  }
 8008ae8:	4618      	mov	r0, r3
 8008aea:	370c      	adds	r7, #12
 8008aec:	46bd      	mov	sp, r7
 8008aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af2:	4770      	bx	lr

08008af4 <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
 8008afc:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	4413      	add	r3, r2
 8008b06:	edd3 7a00 	vldr	s15, [r3]
 8008b0a:	eeb0 0a67 	vmov.f32	s0, s15
 8008b0e:	f7fd f84c 	bl	8005baa <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 8008b12:	eef0 7a40 	vmov.f32	s15, s0
  }
 8008b16:	eeb0 0a67 	vmov.f32	s0, s15
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	3304      	adds	r3, #4
  }
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	00db      	lsls	r3, r3, #3
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	4413      	add	r3, r2
 8008b4a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	4621      	mov	r1, r4
 8008b52:	f000 f8d3 	bl	8008cfc <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 8008b56:	4603      	mov	r3, r0
 8008b58:	460c      	mov	r4, r1
  }
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd90      	pop	{r4, r7, pc}

08008b64 <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 8008b64:	b480      	push	{r7}
 8008b66:	b083      	sub	sp, #12
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	3304      	adds	r3, #4
  }
 8008b70:	4618      	mov	r0, r3
 8008b72:	370c      	adds	r7, #12
 8008b74:	46bd      	mov	sp, r7
 8008b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b7a:	4770      	bx	lr

08008b7c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
 8008b84:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	009b      	lsls	r3, r3, #2
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	4413      	add	r3, r2
 8008b8e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f7f9 f9b8 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008b96:	4602      	mov	r2, r0
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	4413      	add	r3, r2
  }
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	3708      	adds	r7, #8
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	bd80      	pop	{r7, pc}

08008ba4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	3304      	adds	r3, #4
  }
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	370c      	adds	r7, #12
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bba:	4770      	bx	lr

08008bbc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b082      	sub	sp, #8
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	6078      	str	r0, [r7, #4]
 8008bc4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	687a      	ldr	r2, [r7, #4]
 8008bcc:	4413      	add	r3, r2
 8008bce:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f7f9 f998 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4413      	add	r3, r2
  }
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3708      	adds	r7, #8
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	3304      	adds	r3, #4
  }
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008bfc:	b580      	push	{r7, lr}
 8008bfe:	b082      	sub	sp, #8
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
 8008c04:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	009b      	lsls	r3, r3, #2
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	4413      	add	r3, r2
 8008c0e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f7f9 f978 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c16:	4602      	mov	r2, r0
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	4413      	add	r3, r2
  }
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	3304      	adds	r3, #4
  }
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	009b      	lsls	r3, r3, #2
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	4413      	add	r3, r2
 8008c4e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f7f9 f958 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c56:	4602      	mov	r2, r0
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4413      	add	r3, r2
  }
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	3304      	adds	r3, #4
  }
 8008c70:	4618      	mov	r0, r3
 8008c72:	370c      	adds	r7, #12
 8008c74:	46bd      	mov	sp, r7
 8008c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7a:	4770      	bx	lr

08008c7c <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
 8008c84:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	687a      	ldr	r2, [r7, #4]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008c90:	6878      	ldr	r0, [r7, #4]
 8008c92:	f7f9 f938 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008c96:	4602      	mov	r2, r0
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	4413      	add	r3, r2
  }
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	3708      	adds	r7, #8
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	bd80      	pop	{r7, pc}

08008ca4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	3304      	adds	r3, #4
  }
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	b082      	sub	sp, #8
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
 8008cc4:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	009b      	lsls	r3, r3, #2
 8008cca:	687a      	ldr	r2, [r7, #4]
 8008ccc:	4413      	add	r3, r2
 8008cce:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f7f9 f918 	bl	8001f06 <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008cd6:	4602      	mov	r2, r0
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	4413      	add	r3, r2
  }
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	3304      	adds	r3, #4
  }
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr

08008cfc <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8008cfc:	b490      	push	{r4, r7}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 8008d06:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	4621      	mov	r1, r4
 8008d0e:	3708      	adds	r7, #8
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bc90      	pop	{r4, r7}
 8008d14:	4770      	bx	lr
	...

08008d18 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 8008d18:	b580      	push	{r7, lr}
 8008d1a:	b082      	sub	sp, #8
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
 8008d20:	4a05      	ldr	r2, [pc, #20]	; (8008d38 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	601a      	str	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7fd ff89 	bl	8006c40 <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	4618      	mov	r0, r3
 8008d32:	3708      	adds	r7, #8
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bd80      	pop	{r7, pc}
 8008d38:	080dca2c 	.word	0x080dca2c

08008d3c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 8008d3c:	b580      	push	{r7, lr}
 8008d3e:	b082      	sub	sp, #8
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
 8008d44:	6878      	ldr	r0, [r7, #4]
 8008d46:	f7ff ffe7 	bl	8008d18 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8008d4a:	2108      	movs	r1, #8
 8008d4c:	6878      	ldr	r0, [r7, #4]
 8008d4e:	f002 fde0 	bl	800b912 <_ZdlPvj>
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	4618      	mov	r0, r3
 8008d56:	3708      	adds	r7, #8
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b0c4      	sub	sp, #272	; 0x110
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	f107 030c 	add.w	r3, r7, #12
 8008d66:	6018      	str	r0, [r3, #0]
 8008d68:	f107 0308 	add.w	r3, r7, #8
 8008d6c:	6019      	str	r1, [r3, #0]
 8008d6e:	1d3b      	adds	r3, r7, #4
 8008d70:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 8008d72:	1d3b      	adds	r3, r7, #4
 8008d74:	f107 0208 	add.w	r2, r7, #8
 8008d78:	f107 0010 	add.w	r0, r7, #16
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	6812      	ldr	r2, [r2, #0]
 8008d80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008d84:	f000 fcd0 	bl	8009728 <MicroVsnprintf>
  DebugLog(log_buffer);
 8008d88:	f107 0310 	add.w	r3, r7, #16
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fd fcf7 	bl	8006780 <DebugLog>
  DebugLog("\r\n");
 8008d92:	4804      	ldr	r0, [pc, #16]	; (8008da4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 8008d94:	f7fd fcf4 	bl	8006780 <DebugLog>
#endif
  return 0;
 8008d98:	2300      	movs	r3, #0
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008da0:	46bd      	mov	sp, r7
 8008da2:	bd80      	pop	{r7, pc}
 8008da4:	08010360 	.word	0x08010360

08008da8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>:
// A helper class to encapsulate the implementation of APIs in Context.
// context->impl_ points to an instance of this class.
// Check tensorflow/lite/c/common.h for detailed descriptions.
class ContextHelper {
 public:
  explicit ContextHelper(ErrorReporter* error_reporter,
 8008da8:	b480      	push	{r7}
 8008daa:	b085      	sub	sp, #20
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
                         MicroAllocator* allocator)
      : allocator_(allocator), error_reporter_(error_reporter) {}
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	687a      	ldr	r2, [r7, #4]
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	68ba      	ldr	r2, [r7, #8]
 8008dbe:	605a      	str	r2, [r3, #4]
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	f04f 32ff 	mov.w	r2, #4294967295
 8008dc6:	609a      	str	r2, [r3, #8]
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	4618      	mov	r0, r3
 8008dcc:	3714      	adds	r7, #20
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd4:	4770      	bx	lr

08008dd6 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>:
  static void* GetScratchBuffer(TfLiteContext* ctx, int buffer_idx);

  static void ReportOpError(struct TfLiteContext* context, const char* format,
                            ...);

  void SetNodeIndex(int idx) { current_node_idx_ = idx; }
 8008dd6:	b480      	push	{r7}
 8008dd8:	b083      	sub	sp, #12
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
 8008dde:	6039      	str	r1, [r7, #0]
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	683a      	ldr	r2, [r7, #0]
 8008de4:	609a      	str	r2, [r3, #8]
 8008de6:	bf00      	nop
 8008de8:	370c      	adds	r7, #12
 8008dea:	46bd      	mov	sp, r7
 8008dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df0:	4770      	bx	lr

08008df2 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 8008df2:	b580      	push	{r7, lr}
 8008df4:	b082      	sub	sp, #8
 8008df6:	af00      	add	r7, sp, #0
 8008df8:	6078      	str	r0, [r7, #4]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fd fe91 	bl	8006b26 <_ZNK6tflite8SubGraph6inputsEv>
 8008e04:	4603      	mov	r3, r0
 8008e06:	4618      	mov	r0, r3
 8008e08:	f7fd fdde 	bl	80069c8 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}

08008e16 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fd fe7f 	bl	8006b26 <_ZNK6tflite8SubGraph6inputsEv>
 8008e28:	4603      	mov	r3, r0
  }
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b082      	sub	sp, #8
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e3e:	4618      	mov	r0, r3
 8008e40:	f7fd fe7f 	bl	8006b42 <_ZNK6tflite8SubGraph7outputsEv>
 8008e44:	4603      	mov	r3, r0
 8008e46:	4618      	mov	r0, r3
 8008e48:	f7fd fdbe 	bl	80069c8 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e62:	4618      	mov	r0, r3
 8008e64:	f7fd fe6d 	bl	8006b42 <_ZNK6tflite8SubGraph7outputsEv>
 8008e68:	4603      	mov	r3, r0
  }
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3708      	adds	r7, #8
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}

08008e72 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {
namespace {

const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 8008e72:	b580      	push	{r7, lr}
 8008e74:	b082      	sub	sp, #8
 8008e76:	af00      	add	r7, sp, #0
 8008e78:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	695b      	ldr	r3, [r3, #20]
 8008e7e:	2b20      	cmp	r3, #32
 8008e80:	d102      	bne.n	8008e88 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	e006      	b.n	8008e96 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	695b      	ldr	r3, [r3, #20]
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	4618      	mov	r0, r3
 8008e90:	f7fc ffd8 	bl	8005e44 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8008e94:	4603      	mov	r3, r0
  }
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}

08008e9e <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextjPPv>:
}  // namespace

namespace internal {

TfLiteStatus ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                                     size_t bytes, void** ptr) {
 8008e9e:	b580      	push	{r7, lr}
 8008ea0:	b084      	sub	sp, #16
 8008ea2:	af00      	add	r7, sp, #0
 8008ea4:	60f8      	str	r0, [r7, #12]
 8008ea6:	60b9      	str	r1, [r7, #8]
 8008ea8:	607a      	str	r2, [r7, #4]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes, ptr);
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	687a      	ldr	r2, [r7, #4]
 8008eb2:	68b9      	ldr	r1, [r7, #8]
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fd3d 	bl	8007934 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEjPPv>
 8008eba:	4603      	mov	r3, r0
}
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	3710      	adds	r7, #16
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}

08008ec4 <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	60f8      	str	r0, [r7, #12]
 8008ecc:	60b9      	str	r1, [r7, #8]
 8008ece:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	68db      	ldr	r3, [r3, #12]
 8008ed4:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	6818      	ldr	r0, [r3, #0]
 8008eda:	697b      	ldr	r3, [r7, #20]
 8008edc:	6899      	ldr	r1, [r3, #8]
      helper->current_node_idx_, bytes, buffer_idx);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	f7fe fd4f 	bl	8007984 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEijPi>
 8008ee6:	4603      	mov	r3, r0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3718      	adds	r7, #24
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
 8008ef8:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	68db      	ldr	r3, [r3, #12]
      ->allocator_->GetScratchBuffer(buffer_idx);
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6839      	ldr	r1, [r7, #0]
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7fe fd9a 	bl	8007a3c <_ZNK6tflite14MicroAllocator16GetScratchBufferEi>
 8008f08:	4603      	mov	r3, r0
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3708      	adds	r7, #8
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 8008f12:	b40e      	push	{r1, r2, r3}
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	68db      	ldr	r3, [r3, #12]
 8008f20:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 8008f22:	f107 0320 	add.w	r3, r7, #32
 8008f26:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	6858      	ldr	r0, [r3, #4]
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	3308      	adds	r3, #8
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	68ba      	ldr	r2, [r7, #8]
 8008f38:	69f9      	ldr	r1, [r7, #28]
 8008f3a:	4798      	blx	r3
  va_end(args);
}
 8008f3c:	bf00      	nop
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f46:	b003      	add	sp, #12
 8008f48:	4770      	bx	lr

08008f4a <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8008f4a:	b580      	push	{r7, lr}
 8008f4c:	b084      	sub	sp, #16
 8008f4e:	af00      	add	r7, sp, #0
 8008f50:	60f8      	str	r0, [r7, #12]
 8008f52:	60b9      	str	r1, [r7, #8]
 8008f54:	607a      	str	r2, [r7, #4]
 8008f56:	603b      	str	r3, [r7, #0]
      error_reporter_(error_reporter),
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
                                         error_reporter)),
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	605a      	str	r2, [r3, #4]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	609a      	str	r2, [r3, #8]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	69fa      	ldr	r2, [r7, #28]
 8008f6e:	60da      	str	r2, [r3, #12]
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	3310      	adds	r3, #16
 8008f74:	2250      	movs	r2, #80	; 0x50
 8008f76:	2100      	movs	r1, #0
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f002 fe4b 	bl	800bc14 <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	69b9      	ldr	r1, [r7, #24]
 8008f82:	6838      	ldr	r0, [r7, #0]
 8008f84:	f7fe fbd0 	bl	8007728 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8008f88:	4602      	mov	r2, r0
      context_helper_(error_reporter_, &allocator_) {
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	661a      	str	r2, [r3, #96]	; 0x60
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2200      	movs	r2, #0
 8008f92:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	f103 006c 	add.w	r0, r3, #108	; 0x6c
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	68d9      	ldr	r1, [r3, #12]
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008fac:	461a      	mov	r2, r3
 8008fae:	f7ff fefb 	bl	8008da8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorE>
  Init(profiler);
 8008fb2:	6a39      	ldr	r1, [r7, #32]
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 f84d 	bl	8009054 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3710      	adds	r7, #16
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <_ZN6tflite16MicroInterpreterD1Ev>:
      initialization_status_(kTfLiteError),
      context_helper_(error_reporter_, &allocator_) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b086      	sub	sp, #24
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d03a      	beq.n	800904a <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fdc:	4618      	mov	r0, r3
 8008fde:	f7fd fdbe 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	4618      	mov	r0, r3
 8008fe6:	f7ff facd 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008fea:	4602      	mov	r2, r0
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	bf34      	ite	cc
 8008ff2:	2301      	movcc	r3, #1
 8008ff4:	2300      	movcs	r3, #0
 8008ff6:	b2db      	uxtb	r3, r3
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d026      	beq.n	800904a <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	697a      	ldr	r2, [r7, #20]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	440b      	add	r3, r1
 800900c:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	6819      	ldr	r1, [r3, #0]
 8009012:	697a      	ldr	r2, [r7, #20]
 8009014:	4613      	mov	r3, r2
 8009016:	009b      	lsls	r3, r3, #2
 8009018:	4413      	add	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800901e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009020:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00c      	beq.n	8009042 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	2b00      	cmp	r3, #0
 800902e:	d008      	beq.n	8009042 <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	687a      	ldr	r2, [r7, #4]
 8009036:	f102 0010 	add.w	r0, r2, #16
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	6912      	ldr	r2, [r2, #16]
 800903e:	4611      	mov	r1, r2
 8009040:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	3301      	adds	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
 8009048:	e7c6      	b.n	8008fd8 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	4618      	mov	r0, r3
 800904e:	3718      	adds	r7, #24
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 8009054:	b580      	push	{r7, lr}
 8009056:	b084      	sub	sp, #16
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	685b      	ldr	r3, [r3, #4]
 8009062:	4618      	mov	r0, r3
 8009064:	f7fd fdc2 	bl	8006bec <_ZNK6tflite5Model9subgraphsEv>
 8009068:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f7ff faf2 	bl	8008654 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8009070:	4603      	mov	r3, r0
 8009072:	2b01      	cmp	r3, #1
 8009074:	bf14      	ite	ne
 8009076:	2301      	movne	r3, #1
 8009078:	2300      	moveq	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d00a      	beq.n	8009096 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	4912      	ldr	r1, [pc, #72]	; (80090d0 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x7c>)
 8009086:	4618      	mov	r0, r3
 8009088:	f7fc f8fe 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return;
 8009094:	e018      	b.n	80090c8 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x74>
  }
  subgraph_ = (*subgraphs)[0];
 8009096:	2100      	movs	r1, #0
 8009098:	68f8      	ldr	r0, [r7, #12]
 800909a:	f7ff fb77 	bl	800878c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800909e:	4602      	mov	r2, r0
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	669a      	str	r2, [r3, #104]	; 0x68

  context_.impl_ = static_cast<void*>(&context_helper_);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a08      	ldr	r2, [pc, #32]	; (80090d4 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>)
 80090b2:	625a      	str	r2, [r3, #36]	; 0x24
  context_.recommended_num_threads = 1;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	2201      	movs	r2, #1
 80090b8:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	683a      	ldr	r2, [r7, #0]
 80090be:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2200      	movs	r2, #0
 80090c4:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
}
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	0801093c 	.word	0x0801093c
 80090d4:	08008f13 	.word	0x08008f13

080090d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 80090d8:	b590      	push	{r4, r7, lr}
 80090da:	b08f      	sub	sp, #60	; 0x3c
 80090dc:	af02      	add	r7, sp, #8
 80090de:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	6859      	ldr	r1, [r3, #4]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f103 0210 	add.w	r2, r3, #16
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	689c      	ldr	r4, [r3, #8]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	9300      	str	r3, [sp, #0]
 80090f6:	4623      	mov	r3, r4
 80090f8:	f7fe fb74 	bl	80077e4 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelEP13TfLiteContextRKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationE>
 80090fc:	4603      	mov	r3, r0
                                      &node_and_registrations_) != kTfLiteOk) {
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bf14      	ite	ne
 8009102:	2301      	movne	r3, #1
 8009104:	2300      	moveq	r3, #0
 8009106:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, &context_, op_resolver_,
 8009108:	2b00      	cmp	r3, #0
 800910a:	d00b      	beq.n	8009124 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	4973      	ldr	r1, [pc, #460]	; (80092e0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x208>)
 8009112:	4618      	mov	r0, r3
 8009114:	f7fc f8b8 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2201      	movs	r2, #1
 800911c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    return kTfLiteError;
 8009120:	2301      	movs	r3, #1
 8009122:	e0d9      	b.n	80092d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
        CorrectTensorEndianness(thisTensor);
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a6f      	ldr	r2, [pc, #444]	; (80092e4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x20c>)
 8009128:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	2200      	movs	r2, #0
 8009134:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8009136:	2300      	movs	r3, #0
 8009138:	62fb      	str	r3, [r7, #44]	; 0x2c
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800913e:	4618      	mov	r0, r3
 8009140:	f7fd fd0d 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 8009144:	4603      	mov	r3, r0
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fa1c 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800914c:	4602      	mov	r2, r0
 800914e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009150:	4293      	cmp	r3, r2
 8009152:	bf34      	ite	cc
 8009154:	2301      	movcc	r3, #1
 8009156:	2300      	movcs	r3, #0
 8009158:	b2db      	uxtb	r3, r3
 800915a:	2b00      	cmp	r3, #0
 800915c:	d03c      	beq.n	80091d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x100>
    context_helper_.SetNodeIndex(i);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	336c      	adds	r3, #108	; 0x6c
 8009162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009164:	4611      	mov	r1, r2
 8009166:	4618      	mov	r0, r3
 8009168:	f7ff fe35 	bl	8008dd6 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	6819      	ldr	r1, [r3, #0]
 8009170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009172:	4613      	mov	r3, r2
 8009174:	009b      	lsls	r3, r3, #2
 8009176:	4413      	add	r3, r2
 8009178:	00db      	lsls	r3, r3, #3
 800917a:	440b      	add	r3, r1
 800917c:	613b      	str	r3, [r7, #16]
    auto* registration = node_and_registrations_[i].registration;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6819      	ldr	r1, [r3, #0]
 8009182:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009184:	4613      	mov	r3, r2
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	4413      	add	r3, r2
 800918a:	00db      	lsls	r3, r3, #3
 800918c:	440b      	add	r3, r1
 800918e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009190:	60fb      	str	r3, [r7, #12]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	2b20      	cmp	r3, #32
 8009198:	d106      	bne.n	80091a8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xd0>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = node->custom_initial_data_size;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	69db      	ldr	r3, [r3, #28]
 80091a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80091a6:	e004      	b.n	80091b2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xda>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	627b      	str	r3, [r7, #36]	; 0x24
      init_data_size = 0;
 80091ae:	2300      	movs	r3, #0
 80091b0:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    if (registration->init) {
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00a      	beq.n	80091d0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf8>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	687a      	ldr	r2, [r7, #4]
 80091c0:	f102 0010 	add.w	r0, r2, #16
 80091c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091c6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80091c8:	4798      	blx	r3
 80091ca:	4602      	mov	r2, r0
      node->user_data =
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80091d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091d2:	3301      	adds	r3, #1
 80091d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80091d6:	e7b0      	b.n	800913a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x62>
    }
  }
  context_helper_.SetNodeIndex(-1);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	336c      	adds	r3, #108	; 0x6c
 80091dc:	f04f 31ff 	mov.w	r1, #4294967295
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fdf8 	bl	8008dd6 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is available
  // in Prepare stage.
  context_.RequestScratchBufferInArena =
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a3f      	ldr	r2, [pc, #252]	; (80092e8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x210>)
 80091ea:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 80091ec:	2300      	movs	r3, #0
 80091ee:	623b      	str	r3, [r7, #32]
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80091f4:	4618      	mov	r0, r3
 80091f6:	f7fd fcb2 	bl	8006b5e <_ZNK6tflite8SubGraph9operatorsEv>
 80091fa:	4603      	mov	r3, r0
 80091fc:	4618      	mov	r0, r3
 80091fe:	f7ff f9c1 	bl	8008584 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8009202:	4602      	mov	r2, r0
 8009204:	6a3b      	ldr	r3, [r7, #32]
 8009206:	4293      	cmp	r3, r2
 8009208:	bf34      	ite	cc
 800920a:	2301      	movcc	r3, #1
 800920c:	2300      	movcs	r3, #0
 800920e:	b2db      	uxtb	r3, r3
 8009210:	2b00      	cmp	r3, #0
 8009212:	d03c      	beq.n	800928e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1b6>
    // Set node idx to annotate the lifetime for scratch buffers.
    context_helper_.SetNodeIndex(i);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	336c      	adds	r3, #108	; 0x6c
 8009218:	6a3a      	ldr	r2, [r7, #32]
 800921a:	4611      	mov	r1, r2
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff fdda 	bl	8008dd6 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>
    auto* node = &(node_and_registrations_[i].node);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6819      	ldr	r1, [r3, #0]
 8009226:	6a3a      	ldr	r2, [r7, #32]
 8009228:	4613      	mov	r3, r2
 800922a:	009b      	lsls	r3, r3, #2
 800922c:	4413      	add	r3, r2
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	440b      	add	r3, r1
 8009232:	61fb      	str	r3, [r7, #28]
    auto* registration = node_and_registrations_[i].registration;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	6819      	ldr	r1, [r3, #0]
 8009238:	6a3a      	ldr	r2, [r7, #32]
 800923a:	4613      	mov	r3, r2
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	4413      	add	r3, r2
 8009240:	00db      	lsls	r3, r3, #3
 8009242:	440b      	add	r3, r1
 8009244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009246:	61bb      	str	r3, [r7, #24]
    if (registration->prepare) {
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	689b      	ldr	r3, [r3, #8]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d01a      	beq.n	8009286 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8009250:	69bb      	ldr	r3, [r7, #24]
 8009252:	689b      	ldr	r3, [r3, #8]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	3210      	adds	r2, #16
 8009258:	69f9      	ldr	r1, [r7, #28]
 800925a:	4610      	mov	r0, r2
 800925c:	4798      	blx	r3
 800925e:	4603      	mov	r3, r0
 8009260:	75fb      	strb	r3, [r7, #23]
      if (prepare_status != kTfLiteOk) {
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d00e      	beq.n	8009286 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ae>
        TF_LITE_REPORT_ERROR(
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68dc      	ldr	r4, [r3, #12]
 800926c:	69b8      	ldr	r0, [r7, #24]
 800926e:	f7ff fe00 	bl	8008e72 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8009272:	4602      	mov	r2, r0
 8009274:	7dfb      	ldrb	r3, [r7, #23]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	491c      	ldr	r1, [pc, #112]	; (80092ec <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x214>)
 800927c:	4620      	mov	r0, r4
 800927e:	f7fc f803 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8009282:	2301      	movs	r3, #1
 8009284:	e028      	b.n	80092d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	3301      	adds	r3, #1
 800928a:	623b      	str	r3, [r7, #32]
 800928c:	e7b0      	b.n	80091f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x118>
      }
    }
  }
  context_helper_.SetNodeIndex(-1);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	336c      	adds	r3, #108	; 0x6c
 8009292:	f04f 31ff 	mov.w	r1, #4294967295
 8009296:	4618      	mov	r0, r3
 8009298:	f7ff fd9d 	bl	8008dd6 <_ZN6tflite8internal13ContextHelper12SetNodeIndexEi>

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2200      	movs	r2, #0
 80092a6:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	4a11      	ldr	r2, [pc, #68]	; (80092f0 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x218>)
 80092ac:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6e18      	ldr	r0, [r3, #96]	; 0x60
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	6859      	ldr	r1, [r3, #4]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3310      	adds	r3, #16
 80092ba:	461a      	mov	r2, r3
 80092bc:	f7fe faf2 	bl	80078a4 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP13TfLiteContext>
 80092c0:	4603      	mov	r3, r0
 80092c2:	72fb      	strb	r3, [r7, #11]
 80092c4:	7afb      	ldrb	r3, [r7, #11]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d001      	beq.n	80092ce <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 80092ca:	7afb      	ldrb	r3, [r7, #11]
 80092cc:	e004      	b.n	80092d8 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x200>
                    allocator_.FinishModelAllocation(model_, &context_));
  tensors_allocated_ = true;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
  return kTfLiteOk;
 80092d6:	2300      	movs	r3, #0
}
 80092d8:	4618      	mov	r0, r3
 80092da:	3734      	adds	r7, #52	; 0x34
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd90      	pop	{r4, r7, pc}
 80092e0:	08010968 	.word	0x08010968
 80092e4:	08008e9f 	.word	0x08008e9f
 80092e8:	08008ec5 	.word	0x08008ec5
 80092ec:	0801098c 	.word	0x0801098c
 80092f0:	08008ef1 	.word	0x08008ef1

080092f4 <_ZN6tflite16MicroInterpreter5inputEj>:
    }
  }
  return kTfLiteOk;
}

TfLiteTensor* MicroInterpreter::input(size_t index) {
 80092f4:	b590      	push	{r4, r7, lr}
 80092f6:	b085      	sub	sp, #20
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
 80092fc:	6039      	str	r1, [r7, #0]
  const size_t length = inputs_size();
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	f7ff fd77 	bl	8008df2 <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8009304:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 8009306:	683a      	ldr	r2, [r7, #0]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	429a      	cmp	r2, r3
 800930c:	d308      	bcc.n	8009320 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	68d8      	ldr	r0, [r3, #12]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	683a      	ldr	r2, [r7, #0]
 8009316:	490b      	ldr	r1, [pc, #44]	; (8009344 <_ZN6tflite16MicroInterpreter5inputEj+0x50>)
 8009318:	f7fb ffb6 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 800931c:	2300      	movs	r3, #0
 800931e:	e00c      	b.n	800933a <_ZN6tflite16MicroInterpreter5inputEj+0x46>
  }
  return &(context_.tensors[inputs().Get(index)]);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	699c      	ldr	r4, [r3, #24]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f7ff fd76 	bl	8008e16 <_ZNK6tflite16MicroInterpreter6inputsEv>
 800932a:	4603      	mov	r3, r0
 800932c:	6839      	ldr	r1, [r7, #0]
 800932e:	4618      	mov	r0, r3
 8009330:	f7fc fa76 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009334:	4603      	mov	r3, r0
 8009336:	019b      	lsls	r3, r3, #6
 8009338:	4423      	add	r3, r4
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	bd90      	pop	{r4, r7, pc}
 8009342:	bf00      	nop
 8009344:	08010a28 	.word	0x08010a28

08009348 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8009348:	b590      	push	{r4, r7, lr}
 800934a:	b085      	sub	sp, #20
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
 8009350:	6039      	str	r1, [r7, #0]
  const size_t length = outputs_size();
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f7ff fd6d 	bl	8008e32 <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8009358:	60f8      	str	r0, [r7, #12]
  if ((index < 0) || (index >= length)) {
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	429a      	cmp	r2, r3
 8009360:	d308      	bcc.n	8009374 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	68d8      	ldr	r0, [r3, #12]
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	683a      	ldr	r2, [r7, #0]
 800936a:	490b      	ldr	r1, [pc, #44]	; (8009398 <_ZN6tflite16MicroInterpreter6outputEj+0x50>)
 800936c:	f7fb ff8c 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8009370:	2300      	movs	r3, #0
 8009372:	e00c      	b.n	800938e <_ZN6tflite16MicroInterpreter6outputEj+0x46>
  }
  return &(context_.tensors[outputs().Get(index)]);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699c      	ldr	r4, [r3, #24]
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f7ff fd6c 	bl	8008e56 <_ZNK6tflite16MicroInterpreter7outputsEv>
 800937e:	4603      	mov	r3, r0
 8009380:	6839      	ldr	r1, [r7, #0]
 8009382:	4618      	mov	r0, r3
 8009384:	f7fc fa4c 	bl	8005820 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8009388:	4603      	mov	r3, r0
 800938a:	019b      	lsls	r3, r3, #6
 800938c:	4423      	add	r3, r4
}
 800938e:	4618      	mov	r0, r3
 8009390:	3714      	adds	r7, #20
 8009392:	46bd      	mov	sp, r7
 8009394:	bd90      	pop	{r4, r7, pc}
 8009396:	bf00      	nop
 8009398:	08010a54 	.word	0x08010a54

0800939c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	3b01      	subs	r3, #1
 80093ae:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 80093b0:	697a      	ldr	r2, [r7, #20]
 80093b2:	693b      	ldr	r3, [r7, #16]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d20e      	bcs.n	80093d6 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	781b      	ldrb	r3, [r3, #0]
 80093bc:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 80093be:	697b      	ldr	r3, [r7, #20]
 80093c0:	1c5a      	adds	r2, r3, #1
 80093c2:	617a      	str	r2, [r7, #20]
 80093c4:	693a      	ldr	r2, [r7, #16]
 80093c6:	7812      	ldrb	r2, [r2, #0]
 80093c8:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1e5a      	subs	r2, r3, #1
 80093ce:	613a      	str	r2, [r7, #16]
 80093d0:	7bfa      	ldrb	r2, [r7, #15]
 80093d2:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 80093d4:	e7ec      	b.n	80093b0 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 80093d6:	687b      	ldr	r3, [r7, #4]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	371c      	adds	r7, #28
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr

080093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 80093e4:	b480      	push	{r7}
 80093e6:	b087      	sub	sp, #28
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	607a      	str	r2, [r7, #4]
  char* current = main;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 80093f4:	697b      	ldr	r3, [r7, #20]
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d003      	beq.n	8009404 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	3301      	adds	r3, #1
 8009400:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8009402:	e7f7      	b.n	80093f4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	3b01      	subs	r3, #1
 8009408:	68fa      	ldr	r2, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	781b      	ldrb	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00e      	beq.n	8009434 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 8009416:	697a      	ldr	r2, [r7, #20]
 8009418:	693b      	ldr	r3, [r7, #16]
 800941a:	429a      	cmp	r2, r3
 800941c:	d20a      	bcs.n	8009434 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	781a      	ldrb	r2, [r3, #0]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	701a      	strb	r2, [r3, #0]
    ++current;
 8009426:	697b      	ldr	r3, [r7, #20]
 8009428:	3301      	adds	r3, #1
 800942a:	617b      	str	r3, [r7, #20]
    ++to_append;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	3301      	adds	r3, #1
 8009430:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 8009432:	e7ec      	b.n	800940e <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 8009434:	697b      	ldr	r3, [r7, #20]
 8009436:	2200      	movs	r2, #0
 8009438:	701a      	strb	r2, [r3, #0]
  return current;
 800943a:	697b      	ldr	r3, [r7, #20]
}
 800943c:	4618      	mov	r0, r3
 800943e:	371c      	adds	r7, #28
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr

08009448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	60f8      	str	r0, [r7, #12]
 8009450:	60b9      	str	r1, [r7, #8]
 8009452:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009460:	fb02 f201 	mul.w	r2, r2, r1
 8009464:	1a9b      	subs	r3, r3, r2
 8009466:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	2b09      	cmp	r3, #9
 800946c:	dc04      	bgt.n	8009478 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	3330      	adds	r3, #48	; 0x30
 8009474:	77fb      	strb	r3, [r7, #31]
 8009476:	e003      	b.n	8009480 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	b2db      	uxtb	r3, r3
 800947c:	3357      	adds	r3, #87	; 0x57
 800947e:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	60ba      	str	r2, [r7, #8]
 8009486:	7ffa      	ldrb	r2, [r7, #31]
 8009488:	701a      	strb	r2, [r3, #0]
    i /= base;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009492:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d000      	beq.n	800949c <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 800949a:	e7dd      	b.n	8009458 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	2200      	movs	r2, #0
 80094a0:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 80094a2:	68b9      	ldr	r1, [r7, #8]
 80094a4:	69b8      	ldr	r0, [r7, #24]
 80094a6:	f7ff ff79 	bl	800939c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 80094aa:	68bb      	ldr	r3, [r7, #8]
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3720      	adds	r7, #32
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	da07      	bge.n	80094d8 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	1c5a      	adds	r2, r3, #1
 80094cc:	603a      	str	r2, [r7, #0]
 80094ce:	222d      	movs	r2, #45	; 0x2d
 80094d0:	701a      	strb	r2, [r3, #0]
    u = -u;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	425b      	negs	r3, r3
 80094d6:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 80094d8:	220a      	movs	r2, #10
 80094da:	6839      	ldr	r1, [r7, #0]
 80094dc:	68f8      	ldr	r0, [r7, #12]
 80094de:	f7ff ffb3 	bl	8009448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80094e2:	4603      	mov	r3, r0
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	3710      	adds	r7, #16
 80094e8:	46bd      	mov	sp, r7
 80094ea:	bd80      	pop	{r7, pc}

080094ec <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b090      	sub	sp, #64	; 0x40
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 80094f8:	f107 0310 	add.w	r3, r7, #16
 80094fc:	4619      	mov	r1, r3
 80094fe:	6878      	ldr	r0, [r7, #4]
 8009500:	f7ff ffd8 	bl	80094b4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 8009504:	f107 0310 	add.w	r3, r7, #16
 8009508:	461a      	mov	r2, r3
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	68f8      	ldr	r0, [r7, #12]
 800950e:	f7ff ff69 	bl	80093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009512:	4603      	mov	r3, r0
}
 8009514:	4618      	mov	r0, r3
 8009516:	3740      	adds	r7, #64	; 0x40
 8009518:	46bd      	mov	sp, r7
 800951a:	bd80      	pop	{r7, pc}

0800951c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 800951c:	b580      	push	{r7, lr}
 800951e:	b090      	sub	sp, #64	; 0x40
 8009520:	af00      	add	r7, sp, #0
 8009522:	60f8      	str	r0, [r7, #12]
 8009524:	60b9      	str	r1, [r7, #8]
 8009526:	607a      	str	r2, [r7, #4]
 8009528:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 800952a:	f107 0310 	add.w	r3, r7, #16
 800952e:	683a      	ldr	r2, [r7, #0]
 8009530:	4619      	mov	r1, r3
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f7ff ff88 	bl	8009448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 8009538:	f107 0310 	add.w	r3, r7, #16
 800953c:	461a      	mov	r2, r3
 800953e:	68b9      	ldr	r1, [r7, #8]
 8009540:	68f8      	ldr	r0, [r7, #12]
 8009542:	f7ff ff4f 	bl	80093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009546:	4603      	mov	r3, r0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3740      	adds	r7, #64	; 0x40
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}

08009550 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 8009550:	b590      	push	{r4, r7, lr}
 8009552:	b095      	sub	sp, #84	; 0x54
 8009554:	af00      	add	r7, sp, #0
 8009556:	ed87 0a01 	vstr	s0, [r7, #4]
 800955a:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 800955c:	683b      	ldr	r3, [r7, #0]
 800955e:	64fb      	str	r3, [r7, #76]	; 0x4c
  char* current_end = buffer + (kFastToBufferSize - 1);
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	332f      	adds	r3, #47	; 0x2f
 8009564:	643b      	str	r3, [r7, #64]	; 0x40
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 8009566:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800956a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const uint32_t exponent_mask = 0x7f800000;
 800956c:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8009570:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t exponent_shift = 23;
 8009572:	2317      	movs	r3, #23
 8009574:	637b      	str	r3, [r7, #52]	; 0x34
  const int32_t exponent_bias = 127;
 8009576:	237f      	movs	r3, #127	; 0x7f
 8009578:	633b      	str	r3, [r7, #48]	; 0x30
  const uint32_t fraction_mask = 0x007fffff;
 800957a:	4b42      	ldr	r3, [pc, #264]	; (8009684 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x134>)
 800957c:	62fb      	str	r3, [r7, #44]	; 0x2c
  const uint32_t u = *reinterpret_cast<uint32_t*>(&f);
 800957e:	1d3b      	adds	r3, r7, #4
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	62bb      	str	r3, [r7, #40]	; 0x28
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 8009584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009586:	0ddb      	lsrs	r3, r3, #23
 8009588:	b2db      	uxtb	r3, r3
 800958a:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
  const uint32_t fraction = (u & fraction_mask);
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8009594:	623b      	str	r3, [r7, #32]
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 8009596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	da05      	bge.n	80095a8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x58>
    *current = '-';
 800959c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800959e:	222d      	movs	r2, #45	; 0x2d
 80095a0:	701a      	strb	r2, [r3, #0]
    current += 1;
 80095a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095a4:	3301      	adds	r3, #1
 80095a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  *current = 0;
 80095a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 80095ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b0:	2b80      	cmp	r3, #128	; 0x80
 80095b2:	d118      	bne.n	80095e6 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x96>
    if (fraction == 0) {
 80095b4:	6a3b      	ldr	r3, [r7, #32]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10a      	bne.n	80095d0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x80>
      current = StrCatStr(current, (current_end - current), "Inf");
 80095ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	4a31      	ldr	r2, [pc, #196]	; (8009688 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x138>)
 80095c2:	4619      	mov	r1, r3
 80095c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80095c6:	f7ff ff0d 	bl	80093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80095ca:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 80095cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095ce:	e054      	b.n	800967a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 80095d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80095d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095d4:	1ad3      	subs	r3, r2, r3
 80095d6:	4a2d      	ldr	r2, [pc, #180]	; (800968c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x13c>)
 80095d8:	4619      	mov	r1, r3
 80095da:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80095dc:	f7ff ff02 	bl	80093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80095e0:	64f8      	str	r0, [r7, #76]	; 0x4c
      return current;
 80095e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80095e4:	e049      	b.n	800967a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x12a>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 80095e6:	230d      	movs	r3, #13
 80095e8:	61fb      	str	r3, [r7, #28]
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 80095ea:	4b29      	ldr	r3, [pc, #164]	; (8009690 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x140>)
 80095ec:	f107 040c 	add.w	r4, r7, #12
 80095f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80095f2:	c407      	stmia	r4!, {r0, r1, r2}
 80095f4:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 80095f6:	6a3b      	ldr	r3, [r7, #32]
 80095f8:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 80095fa:	2300      	movs	r3, #0
 80095fc:	647b      	str	r3, [r7, #68]	; 0x44
 80095fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009600:	2b0c      	cmp	r3, #12
 8009602:	dc0f      	bgt.n	8009624 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd4>
    scaled_fraction += (fraction >> scale_shifts[i]);
 8009604:	f107 020c 	add.w	r2, r7, #12
 8009608:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800960a:	4413      	add	r3, r2
 800960c:	f993 3000 	ldrsb.w	r3, [r3]
 8009610:	461a      	mov	r2, r3
 8009612:	6a3b      	ldr	r3, [r7, #32]
 8009614:	40d3      	lsrs	r3, r2
 8009616:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009618:	4413      	add	r3, r2
 800961a:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < scale_shifts_size; ++i) {
 800961c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800961e:	3301      	adds	r3, #1
 8009620:	647b      	str	r3, [r7, #68]	; 0x44
 8009622:	e7ec      	b.n	80095fe <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xae>
  }
  *current = '1';
 8009624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009626:	2231      	movs	r2, #49	; 0x31
 8009628:	701a      	strb	r2, [r3, #0]
  current += 1;
 800962a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800962c:	3301      	adds	r3, #1
 800962e:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = '.';
 8009630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009632:	222e      	movs	r2, #46	; 0x2e
 8009634:	701a      	strb	r2, [r3, #0]
  current += 1;
 8009636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009638:	3301      	adds	r3, #1
 800963a:	64fb      	str	r3, [r7, #76]	; 0x4c
  *current = 0;
 800963c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800963e:	2200      	movs	r2, #0
 8009640:	701a      	strb	r2, [r3, #0]
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 8009642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009644:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009646:	1ad1      	subs	r1, r2, r3
 8009648:	230a      	movs	r3, #10
 800964a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800964c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800964e:	f7ff ff65 	bl	800951c <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 8009652:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatStr(current, (current_end - current), "*2^");
 8009654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009656:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009658:	1ad3      	subs	r3, r2, r3
 800965a:	4a0e      	ldr	r2, [pc, #56]	; (8009694 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x144>)
 800965c:	4619      	mov	r1, r3
 800965e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009660:	f7ff fec0 	bl	80093e4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009664:	64f8      	str	r0, [r7, #76]	; 0x4c
  current = StrCatInt32(current, (current_end - current), exponent);
 8009666:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009668:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800966a:	1ad3      	subs	r3, r2, r3
 800966c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800966e:	4619      	mov	r1, r3
 8009670:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8009672:	f7ff ff3b 	bl	80094ec <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 8009676:	64f8      	str	r0, [r7, #76]	; 0x4c
  return current;
 8009678:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800967a:	4618      	mov	r0, r3
 800967c:	3754      	adds	r7, #84	; 0x54
 800967e:	46bd      	mov	sp, r7
 8009680:	bd90      	pop	{r4, r7, pc}
 8009682:	bf00      	nop
 8009684:	007fffff 	.word	0x007fffff
 8009688:	08010b5c 	.word	0x08010b5c
 800968c:	08010b60 	.word	0x08010b60
 8009690:	08010b68 	.word	0x08010b68
 8009694:	08010b64 	.word	0x08010b64

08009698 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b082      	sub	sp, #8
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80096a2:	6879      	ldr	r1, [r7, #4]
 80096a4:	6838      	ldr	r0, [r7, #0]
 80096a6:	f7ff ff05 	bl	80094b4 <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 80096aa:	4603      	mov	r3, r0
 80096ac:	461a      	mov	r2, r3
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	1ad3      	subs	r3, r2, r3
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3708      	adds	r7, #8
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}

080096ba <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b082      	sub	sp, #8
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 80096c4:	220a      	movs	r2, #10
 80096c6:	6879      	ldr	r1, [r7, #4]
 80096c8:	6838      	ldr	r0, [r7, #0]
 80096ca:	f7ff febd 	bl	8009448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80096ce:	4603      	mov	r3, r0
 80096d0:	461a      	mov	r2, r3
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	1ad3      	subs	r3, r2, r3
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3708      	adds	r7, #8
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}

080096de <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 80096de:	b580      	push	{r7, lr}
 80096e0:	b082      	sub	sp, #8
 80096e2:	af00      	add	r7, sp, #0
 80096e4:	6078      	str	r0, [r7, #4]
 80096e6:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 80096e8:	2210      	movs	r2, #16
 80096ea:	6879      	ldr	r1, [r7, #4]
 80096ec:	6838      	ldr	r0, [r7, #0]
 80096ee:	f7ff feab 	bl	8009448 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 80096f2:	4603      	mov	r3, r0
 80096f4:	461a      	mov	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	1ad3      	subs	r3, r2, r3
}
 80096fa:	4618      	mov	r0, r3
 80096fc:	3708      	adds	r7, #8
 80096fe:	46bd      	mov	sp, r7
 8009700:	bd80      	pop	{r7, pc}

08009702 <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 8009702:	b580      	push	{r7, lr}
 8009704:	b082      	sub	sp, #8
 8009706:	af00      	add	r7, sp, #0
 8009708:	6078      	str	r0, [r7, #4]
 800970a:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	ed97 0a00 	vldr	s0, [r7]
 8009714:	f7ff ff1c 	bl	8009550 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8009718:	4603      	mov	r3, r0
 800971a:	461a      	mov	r2, r3
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	1ad3      	subs	r3, r2, r3
}
 8009720:	4618      	mov	r0, r3
 8009722:	3708      	adds	r7, #8
 8009724:	46bd      	mov	sp, r7
 8009726:	bd80      	pop	{r7, pc}

08009728 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8009728:	b5b0      	push	{r4, r5, r7, lr}
 800972a:	b08a      	sub	sp, #40	; 0x28
 800972c:	af00      	add	r7, sp, #0
 800972e:	60f8      	str	r0, [r7, #12]
 8009730:	60b9      	str	r1, [r7, #8]
 8009732:	607a      	str	r2, [r7, #4]
 8009734:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 8009736:	2300      	movs	r3, #0
 8009738:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	3b01      	subs	r3, #1
 8009742:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 8009744:	6a3b      	ldr	r3, [r7, #32]
 8009746:	781b      	ldrb	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	f000 8109 	beq.w	8009960 <MicroVsnprintf+0x238>
 800974e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	429a      	cmp	r2, r3
 8009754:	f280 8104 	bge.w	8009960 <MicroVsnprintf+0x238>
    if (*current == '%') {
 8009758:	6a3b      	ldr	r3, [r7, #32]
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b25      	cmp	r3, #37	; 0x25
 800975e:	f040 80f3 	bne.w	8009948 <MicroVsnprintf+0x220>
      current++;
 8009762:	6a3b      	ldr	r3, [r7, #32]
 8009764:	3301      	adds	r3, #1
 8009766:	623b      	str	r3, [r7, #32]
      switch (*current) {
 8009768:	6a3b      	ldr	r3, [r7, #32]
 800976a:	781b      	ldrb	r3, [r3, #0]
 800976c:	2b66      	cmp	r3, #102	; 0x66
 800976e:	f000 8083 	beq.w	8009878 <MicroVsnprintf+0x150>
 8009772:	2b66      	cmp	r3, #102	; 0x66
 8009774:	dc05      	bgt.n	8009782 <MicroVsnprintf+0x5a>
 8009776:	2b25      	cmp	r3, #37	; 0x25
 8009778:	f000 80b4 	beq.w	80098e4 <MicroVsnprintf+0x1bc>
 800977c:	2b64      	cmp	r3, #100	; 0x64
 800977e:	d008      	beq.n	8009792 <MicroVsnprintf+0x6a>
 8009780:	e0ed      	b.n	800995e <MicroVsnprintf+0x236>
 8009782:	2b75      	cmp	r3, #117	; 0x75
 8009784:	d026      	beq.n	80097d4 <MicroVsnprintf+0xac>
 8009786:	2b78      	cmp	r3, #120	; 0x78
 8009788:	d045      	beq.n	8009816 <MicroVsnprintf+0xee>
 800978a:	2b73      	cmp	r3, #115	; 0x73
 800978c:	f000 80b6 	beq.w	80098fc <MicroVsnprintf+0x1d4>
 8009790:	e0e5      	b.n	800995e <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 8009792:	69ba      	ldr	r2, [r7, #24]
 8009794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009796:	1ad3      	subs	r3, r2, r3
 8009798:	2b0a      	cmp	r3, #10
 800979a:	dc09      	bgt.n	80097b0 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 800979c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979e:	1c5a      	adds	r2, r3, #1
 80097a0:	627a      	str	r2, [r7, #36]	; 0x24
 80097a2:	461a      	mov	r2, r3
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	4413      	add	r3, r2
 80097a8:	2200      	movs	r2, #0
 80097aa:	701a      	strb	r2, [r3, #0]
            return output_index;
 80097ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ae:	e0e0      	b.n	8009972 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	68fa      	ldr	r2, [r7, #12]
 80097b4:	18d0      	adds	r0, r2, r3
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	1d1a      	adds	r2, r3, #4
 80097ba:	603a      	str	r2, [r7, #0]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	4619      	mov	r1, r3
 80097c0:	f7ff ff6a 	bl	8009698 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 80097c4:	4602      	mov	r2, r0
          output_index +=
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	4413      	add	r3, r2
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80097cc:	6a3b      	ldr	r3, [r7, #32]
 80097ce:	3301      	adds	r3, #1
 80097d0:	623b      	str	r3, [r7, #32]
          break;
 80097d2:	e0c4      	b.n	800995e <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d8:	1ad3      	subs	r3, r2, r3
 80097da:	2b0a      	cmp	r3, #10
 80097dc:	dc09      	bgt.n	80097f2 <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	627a      	str	r2, [r7, #36]	; 0x24
 80097e4:	461a      	mov	r2, r3
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	4413      	add	r3, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
            return output_index;
 80097ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f0:	e0bf      	b.n	8009972 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	18d0      	adds	r0, r2, r3
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	1d1a      	adds	r2, r3, #4
 80097fc:	603a      	str	r2, [r7, #0]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4619      	mov	r1, r3
 8009802:	f7ff ff5a 	bl	80096ba <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 8009806:	4602      	mov	r2, r0
          output_index +=
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	4413      	add	r3, r2
 800980c:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 800980e:	6a3b      	ldr	r3, [r7, #32]
 8009810:	3301      	adds	r3, #1
 8009812:	623b      	str	r3, [r7, #32]
          break;
 8009814:	e0a3      	b.n	800995e <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 8009816:	69ba      	ldr	r2, [r7, #24]
 8009818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981a:	1ad3      	subs	r3, r2, r3
 800981c:	2b09      	cmp	r3, #9
 800981e:	dc09      	bgt.n	8009834 <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	627a      	str	r2, [r7, #36]	; 0x24
 8009826:	461a      	mov	r2, r3
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	4413      	add	r3, r2
 800982c:	2200      	movs	r2, #0
 800982e:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	e09e      	b.n	8009972 <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 8009834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009836:	1c5a      	adds	r2, r3, #1
 8009838:	627a      	str	r2, [r7, #36]	; 0x24
 800983a:	461a      	mov	r2, r3
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	4413      	add	r3, r2
 8009840:	2230      	movs	r2, #48	; 0x30
 8009842:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 8009844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	627a      	str	r2, [r7, #36]	; 0x24
 800984a:	461a      	mov	r2, r3
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	4413      	add	r3, r2
 8009850:	2278      	movs	r2, #120	; 0x78
 8009852:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	68fa      	ldr	r2, [r7, #12]
 8009858:	18d0      	adds	r0, r2, r3
 800985a:	683b      	ldr	r3, [r7, #0]
 800985c:	1d1a      	adds	r2, r3, #4
 800985e:	603a      	str	r2, [r7, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4619      	mov	r1, r3
 8009864:	f7ff ff3b 	bl	80096de <_ZN12_GLOBAL__N_19FormatHexEPcm>
 8009868:	4602      	mov	r2, r0
          output_index +=
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	4413      	add	r3, r2
 800986e:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009870:	6a3b      	ldr	r3, [r7, #32]
 8009872:	3301      	adds	r3, #1
 8009874:	623b      	str	r3, [r7, #32]
          break;
 8009876:	e072      	b.n	800995e <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 8009878:	69ba      	ldr	r2, [r7, #24]
 800987a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	ee07 3a90 	vmov	s15, r3
 8009882:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009886:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 800988a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800988e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009892:	d509      	bpl.n	80098a8 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 8009894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009896:	1c5a      	adds	r2, r3, #1
 8009898:	627a      	str	r2, [r7, #36]	; 0x24
 800989a:	461a      	mov	r2, r3
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	4413      	add	r3, r2
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]
            return output_index;
 80098a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a6:	e064      	b.n	8009972 <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 80098a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	18d5      	adds	r5, r2, r3
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	3307      	adds	r3, #7
 80098b2:	f023 0307 	bic.w	r3, r3, #7
 80098b6:	f103 0208 	add.w	r2, r3, #8
 80098ba:	603a      	str	r2, [r7, #0]
 80098bc:	e9d3 3400 	ldrd	r3, r4, [r3]
 80098c0:	4618      	mov	r0, r3
 80098c2:	4621      	mov	r1, r4
 80098c4:	f7f7 f980 	bl	8000bc8 <__aeabi_d2f>
 80098c8:	4603      	mov	r3, r0
 80098ca:	ee00 3a10 	vmov	s0, r3
 80098ce:	4628      	mov	r0, r5
 80098d0:	f7ff ff17 	bl	8009702 <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 80098d4:	4602      	mov	r2, r0
          output_index +=
 80098d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d8:	4413      	add	r3, r2
 80098da:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	3301      	adds	r3, #1
 80098e0:	623b      	str	r3, [r7, #32]
          break;
 80098e2:	e03c      	b.n	800995e <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	1c5a      	adds	r2, r3, #1
 80098e8:	623a      	str	r2, [r7, #32]
 80098ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098ec:	1c51      	adds	r1, r2, #1
 80098ee:	6279      	str	r1, [r7, #36]	; 0x24
 80098f0:	4611      	mov	r1, r2
 80098f2:	68fa      	ldr	r2, [r7, #12]
 80098f4:	440a      	add	r2, r1
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	7013      	strb	r3, [r2, #0]
          break;
 80098fa:	e030      	b.n	800995e <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 80098fc:	683b      	ldr	r3, [r7, #0]
 80098fe:	1d1a      	adds	r2, r3, #4
 8009900:	603a      	str	r2, [r7, #0]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 8009906:	2300      	movs	r3, #0
 8009908:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 800990a:	69fa      	ldr	r2, [r7, #28]
 800990c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800990e:	4413      	add	r3, r2
 8009910:	69ba      	ldr	r2, [r7, #24]
 8009912:	429a      	cmp	r2, r3
 8009914:	dd14      	ble.n	8009940 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4413      	add	r3, r2
 800991c:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00e      	beq.n	8009940 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	1c5a      	adds	r2, r3, #1
 8009926:	61fa      	str	r2, [r7, #28]
 8009928:	461a      	mov	r2, r3
 800992a:	697b      	ldr	r3, [r7, #20]
 800992c:	441a      	add	r2, r3
 800992e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009930:	1c59      	adds	r1, r3, #1
 8009932:	6279      	str	r1, [r7, #36]	; 0x24
 8009934:	4619      	mov	r1, r3
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	440b      	add	r3, r1
 800993a:	7812      	ldrb	r2, [r2, #0]
 800993c:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 800993e:	e7e4      	b.n	800990a <MicroVsnprintf+0x1e2>
          }
          current++;
 8009940:	6a3b      	ldr	r3, [r7, #32]
 8009942:	3301      	adds	r3, #1
 8009944:	623b      	str	r3, [r7, #32]
 8009946:	e6fd      	b.n	8009744 <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	623a      	str	r2, [r7, #32]
 800994e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009950:	1c51      	adds	r1, r2, #1
 8009952:	6279      	str	r1, [r7, #36]	; 0x24
 8009954:	4611      	mov	r1, r2
 8009956:	68fa      	ldr	r2, [r7, #12]
 8009958:	440a      	add	r2, r1
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 800995e:	e6f1      	b.n	8009744 <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8009960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009962:	1c5a      	adds	r2, r3, #1
 8009964:	627a      	str	r2, [r7, #36]	; 0x24
 8009966:	461a      	mov	r2, r3
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	4413      	add	r3, r2
 800996c:	2200      	movs	r2, #0
 800996e:	701a      	strb	r2, [r3, #0]
  return output_index;
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009972:	4618      	mov	r0, r3
 8009974:	3728      	adds	r7, #40	; 0x28
 8009976:	46bd      	mov	sp, r7
 8009978:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800997c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	6039      	str	r1, [r7, #0]
 8009986:	4a0f      	ldr	r2, [pc, #60]	; (80099c4 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x48>)
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	601a      	str	r2, [r3, #0]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	685a      	ldr	r2, [r3, #4]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	605a      	str	r2, [r3, #4]
 8009994:	683b      	ldr	r3, [r7, #0]
 8009996:	689a      	ldr	r2, [r3, #8]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	609a      	str	r2, [r3, #8]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	68da      	ldr	r2, [r3, #12]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60da      	str	r2, [r3, #12]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	611a      	str	r2, [r3, #16]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	695a      	ldr	r2, [r3, #20]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	615a      	str	r2, [r3, #20]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	4618      	mov	r0, r3
 80099b8:	370c      	adds	r7, #12
 80099ba:	46bd      	mov	sp, r7
 80099bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c0:	4770      	bx	lr
 80099c2:	bf00      	nop
 80099c4:	080dd220 	.word	0x080dd220

080099c8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 80099c8:	b480      	push	{r7}
 80099ca:	b085      	sub	sp, #20
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer_tail)
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail) {}
 80099d6:	4a0c      	ldr	r2, [pc, #48]	; (8009a08 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x40>)
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	601a      	str	r2, [r3, #0]
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	605a      	str	r2, [r3, #4]
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	609a      	str	r2, [r3, #8]
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	60da      	str	r2, [r3, #12]
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	611a      	str	r2, [r3, #16]
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	683a      	ldr	r2, [r7, #0]
 80099f8:	615a      	str	r2, [r3, #20]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	4618      	mov	r0, r3
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr
 8009a08:	080dd220 	.word	0x080dd220

08009a0c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b084      	sub	sp, #16
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	607a      	str	r2, [r7, #4]
 8009a18:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	4413      	add	r3, r2
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff ffcf 	bl	80099c8 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3710      	adds	r7, #16
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 8009a34:	b590      	push	{r4, r7, lr}
 8009a36:	b08d      	sub	sp, #52	; 0x34
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	60f8      	str	r0, [r7, #12]
 8009a3c:	60b9      	str	r1, [r7, #8]
 8009a3e:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d101      	bne.n	8009a4a <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 8009a46:	f002 f849 	bl	800badc <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8009a4a:	68bb      	ldr	r3, [r7, #8]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d101      	bne.n	8009a54 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009a50:	f002 f844 	bl	800badc <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009a54:	f107 0014 	add.w	r0, r7, #20
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	68f9      	ldr	r1, [r7, #12]
 8009a5e:	f7ff ffd5 	bl	8009a0c <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 8009a62:	f107 0314 	add.w	r3, r7, #20
 8009a66:	2204      	movs	r2, #4
 8009a68:	2118      	movs	r1, #24
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	f000 f86a 	bl	8009b44 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 8009a70:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a74:	4619      	mov	r1, r3
 8009a76:	2018      	movs	r0, #24
 8009a78:	f7fb fc39 	bl	80052ee <_ZnwjPv>
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	2c00      	cmp	r4, #0
 8009a80:	d005      	beq.n	8009a8e <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 8009a82:	f107 0314 	add.w	r3, r7, #20
 8009a86:	4619      	mov	r1, r3
 8009a88:	4620      	mov	r0, r4
 8009a8a:	f7ff ff77 	bl	800997c <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 8009a8e:	f107 0314 	add.w	r3, r7, #20
 8009a92:	4618      	mov	r0, r3
 8009a94:	f000 f806 	bl	8009aa4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 8009a98:	4623      	mov	r3, r4
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	3734      	adds	r7, #52	; 0x34
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
	...

08009aa4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
 8009aac:	4a04      	ldr	r2, [pc, #16]	; (8009ac0 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	601a      	str	r2, [r3, #0]
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	4618      	mov	r0, r3
 8009ab6:	370c      	adds	r7, #12
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009abe:	4770      	bx	lr
 8009ac0:	080dd220 	.word	0x080dd220

08009ac4 <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b082      	sub	sp, #8
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	f7ff ffe9 	bl	8009aa4 <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 8009ad2:	2118      	movs	r1, #24
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f001 ff1c 	bl	800b912 <_ZdlPvj>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromHead(size_t size,
                                                 size_t alignment) {
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(head_, alignment);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	691b      	ldr	r3, [r3, #16]
 8009af4:	6879      	ldr	r1, [r7, #4]
 8009af6:	4618      	mov	r0, r3
 8009af8:	f7fc fe6a 	bl	80067d0 <_ZN6tflite14AlignPointerUpEPhj>
 8009afc:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	695b      	ldr	r3, [r3, #20]
 8009b02:	461a      	mov	r2, r3
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8009b0a:	693a      	ldr	r2, [r7, #16]
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d20c      	bcs.n	8009b2c <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x48>
    TF_LITE_REPORT_ERROR(
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	6858      	ldr	r0, [r3, #4]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	693b      	ldr	r3, [r7, #16]
 8009b1a:	1ad3      	subs	r3, r2, r3
 8009b1c:	9300      	str	r3, [sp, #0]
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	68ba      	ldr	r2, [r7, #8]
 8009b22:	4907      	ldr	r1, [pc, #28]	; (8009b40 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x5c>)
 8009b24:	f7fb fbb0 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return nullptr;
 8009b28:	2300      	movs	r3, #0
 8009b2a:	e005      	b.n	8009b38 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromHeadEjj+0x54>
  }
  head_ = aligned_result + size;
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	441a      	add	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	611a      	str	r2, [r3, #16]
  return aligned_result;
 8009b36:	697b      	ldr	r3, [r7, #20]
}
 8009b38:	4618      	mov	r0, r3
 8009b3a:	3718      	adds	r7, #24
 8009b3c:	46bd      	mov	sp, r7
 8009b3e:	bd80      	pop	{r7, pc}
 8009b40:	08010b8c 	.word	0x08010b8c

08009b44 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b088      	sub	sp, #32
 8009b48:	af02      	add	r7, sp, #8
 8009b4a:	60f8      	str	r0, [r7, #12]
 8009b4c:	60b9      	str	r1, [r7, #8]
 8009b4e:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	695a      	ldr	r2, [r3, #20]
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	425b      	negs	r3, r3
 8009b58:	4413      	add	r3, r2
 8009b5a:	6879      	ldr	r1, [r7, #4]
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f7fc fe50 	bl	8006802 <_ZN6tflite16AlignPointerDownEPhj>
 8009b62:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	697a      	ldr	r2, [r7, #20]
 8009b6a:	429a      	cmp	r2, r3
 8009b6c:	d213      	bcs.n	8009b96 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
    const size_t missing_memory = head_ - aligned_result;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	461a      	mov	r2, r3
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	1ad3      	subs	r3, r2, r3
 8009b78:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	6858      	ldr	r0, [r3, #4]
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	693b      	ldr	r3, [r7, #16]
 8009b82:	1ad2      	subs	r2, r2, r3
 8009b84:	693b      	ldr	r3, [r7, #16]
 8009b86:	9300      	str	r3, [sp, #0]
 8009b88:	4613      	mov	r3, r2
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	4906      	ldr	r1, [pc, #24]	; (8009ba8 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 8009b8e:	f7fb fb7b 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory. Requested: %u, available %u, missing: %u",
        size, size - missing_memory, missing_memory);
    return nullptr;
 8009b92:	2300      	movs	r3, #0
 8009b94:	e003      	b.n	8009b9e <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	697a      	ldr	r2, [r7, #20]
 8009b9a:	615a      	str	r2, [r3, #20]
  return aligned_result;
 8009b9c:	697b      	ldr	r3, [r7, #20]
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	08010b8c 	.word	0x08010b8c

08009bac <_ZNK6tflite21SimpleMemoryAllocator7GetHeadEv>:

uint8_t* SimpleMemoryAllocator::GetHead() const { return head_; }
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	4618      	mov	r0, r3
 8009bba:	370c      	adds	r7, #12
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc2:	4770      	bx	lr

08009bc4 <_ZNK6tflite21SimpleMemoryAllocator7GetTailEv>:

uint8_t* SimpleMemoryAllocator::GetTail() const { return tail_; }
 8009bc4:	b480      	push	{r7}
 8009bc6:	b083      	sub	sp, #12
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	695b      	ldr	r3, [r3, #20]
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	370c      	adds	r7, #12
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEv>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory() const {
 8009bdc:	b480      	push	{r7}
 8009bde:	b083      	sub	sp, #12
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
  return tail_ - head_;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	695b      	ldr	r3, [r3, #20]
 8009be8:	461a      	mov	r2, r3
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	691b      	ldr	r3, [r3, #16]
 8009bee:	1ad3      	subs	r3, r2, r3
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	370c      	adds	r7, #12
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr

08009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
  return t->dims->data[dim];
}
inline const TfLiteTensor* GetInput(const TfLiteContext* context,
                                    const TfLiteNode* node, int index) {
 8009bfc:	b480      	push	{r7}
 8009bfe:	b087      	sub	sp, #28
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	60f8      	str	r0, [r7, #12]
 8009c04:	60b9      	str	r1, [r7, #8]
 8009c06:	607a      	str	r2, [r7, #4]
  const int tensor_index = node->inputs->data[index];
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	009b      	lsls	r3, r3, #2
 8009c10:	4413      	add	r3, r2
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	617b      	str	r3, [r7, #20]
  if (tensor_index < 0) {
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	da01      	bge.n	8009c20 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x24>
    return nullptr;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	e004      	b.n	8009c2a <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei+0x2e>
  }
  return &context->tensors[tensor_index];
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	689a      	ldr	r2, [r3, #8]
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	019b      	lsls	r3, r3, #6
 8009c28:	4413      	add	r3, r2
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	371c      	adds	r7, #28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr

08009c36 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  }
  TfLiteTensor* tensor = &context->tensors[tensor_index];
  return (tensor->is_variable) ? tensor : nullptr;
}
inline TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                               int index) {
 8009c36:	b480      	push	{r7}
 8009c38:	b087      	sub	sp, #28
 8009c3a:	af00      	add	r7, sp, #0
 8009c3c:	60f8      	str	r0, [r7, #12]
 8009c3e:	60b9      	str	r1, [r7, #8]
 8009c40:	607a      	str	r2, [r7, #4]
  const int tensor_index = node->outputs->data[index];
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	685a      	ldr	r2, [r3, #4]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	4413      	add	r3, r2
 8009c4c:	685b      	ldr	r3, [r3, #4]
 8009c4e:	617b      	str	r3, [r7, #20]
  if (tensor_index < 0) {
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	da01      	bge.n	8009c5a <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x24>
    return nullptr;
 8009c56:	2300      	movs	r3, #0
 8009c58:	e004      	b.n	8009c64 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2e>
  }
  return &context->tensors[tensor_index];
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	689a      	ldr	r2, [r3, #8]
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	019b      	lsls	r3, r3, #6
 8009c62:	4413      	add	r3, r2
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr

08009c70 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8009c70:	b480      	push	{r7}
 8009c72:	b083      	sub	sp, #12
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d002      	beq.n	8009c84 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8009c82:	e000      	b.n	8009c86 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009c84:	2300      	movs	r3, #0
}
 8009c86:	4618      	mov	r0, r3
 8009c88:	370c      	adds	r7, #12
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8009c92:	b480      	push	{r7}
 8009c94:	b083      	sub	sp, #12
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	685b      	ldr	r3, [r3, #4]
 8009ca4:	e000      	b.n	8009ca8 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	370c      	adds	r7, #12
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr

08009cb4 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8009cb4:	b480      	push	{r7}
 8009cb6:	b083      	sub	sp, #12
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	601a      	str	r2, [r3, #0]
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	4618      	mov	r0, r3
 8009cc6:	370c      	adds	r7, #12
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cce:	4770      	bx	lr

08009cd0 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b084      	sub	sp, #16
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	60f8      	str	r0, [r7, #12]
 8009cd8:	60b9      	str	r1, [r7, #8]
 8009cda:	607a      	str	r2, [r7, #4]
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8009ce2:	687a      	ldr	r2, [r7, #4]
 8009ce4:	68b9      	ldr	r1, [r7, #8]
 8009ce6:	68f8      	ldr	r0, [r7, #12]
 8009ce8:	f000 f8a0 	bl	8009e2c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	4618      	mov	r0, r3
 8009cf0:	3710      	adds	r7, #16
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 8009cf6:	b580      	push	{r7, lr}
 8009cf8:	b082      	sub	sp, #8
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2b05      	cmp	r3, #5
 8009d04:	dd08      	ble.n	8009d18 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d004      	beq.n	8009d18 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	685b      	ldr	r3, [r3, #4]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 fdf6 	bl	800b904 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3708      	adds	r7, #8
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}

08009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 8009d22:	b480      	push	{r7}
 8009d24:	b083      	sub	sp, #12
 8009d26:	af00      	add	r7, sp, #0
 8009d28:	6078      	str	r0, [r7, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	4618      	mov	r0, r3
 8009d30:	370c      	adds	r7, #12
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b082      	sub	sp, #8
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
 8009d42:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	da01      	bge.n	8009d4e <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8009d4a:	f001 fec7 	bl	800badc <abort>
    TFLITE_DCHECK_LT(i, size_);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	429a      	cmp	r2, r3
 8009d56:	dc01      	bgt.n	8009d5c <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8009d58:	f001 fec0 	bl	800badc <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	2b05      	cmp	r3, #5
 8009d62:	dd06      	ble.n	8009d72 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	685a      	ldr	r2, [r3, #4]
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	e004      	b.n	8009d7c <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	009b      	lsls	r3, r3, #2
 8009d78:	4413      	add	r3, r2
 8009d7a:	685b      	ldr	r3, [r3, #4]
  }
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3708      	adds	r7, #8
 8009d80:	46bd      	mov	sp, r7
 8009d82:	bd80      	pop	{r7, pc}

08009d84 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	2b05      	cmp	r3, #5
 8009d92:	dd02      	ble.n	8009d9a <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	e001      	b.n	8009d9e <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	3304      	adds	r3, #4
  }
 8009d9e:	4618      	mov	r0, r3
 8009da0:	370c      	adds	r7, #12
 8009da2:	46bd      	mov	sp, r7
 8009da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da8:	4770      	bx	lr

08009daa <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2b05      	cmp	r3, #5
 8009db8:	dd02      	ble.n	8009dc0 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	e001      	b.n	8009dc4 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	3304      	adds	r3, #4
  }
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	370c      	adds	r7, #12
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8009dd0:	b580      	push	{r7, lr}
 8009dd2:	b082      	sub	sp, #8
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b05      	cmp	r3, #5
 8009de0:	dd08      	ble.n	8009df4 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d004      	beq.n	8009df4 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	685b      	ldr	r3, [r3, #4]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 fd88 	bl	800b904 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	683a      	ldr	r2, [r7, #0]
 8009df8:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	2b05      	cmp	r3, #5
 8009dfe:	dd0e      	ble.n	8009e1e <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	4a09      	ldr	r2, [pc, #36]	; (8009e28 <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d801      	bhi.n	8009e0c <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	e001      	b.n	8009e10 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 8009e0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e10:	4618      	mov	r0, r3
 8009e12:	f001 fd7c 	bl	800b90e <_Znaj>
 8009e16:	4603      	mov	r3, r0
 8009e18:	461a      	mov	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	1ffffffe 	.word	0x1ffffffe

08009e2c <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8009e38:	68b9      	ldr	r1, [r7, #8]
 8009e3a:	68f8      	ldr	r0, [r7, #12]
 8009e3c:	f7ff ffc8 	bl	8009dd0 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 8009e40:	68f8      	ldr	r0, [r7, #12]
 8009e42:	f7ff ff9f 	bl	8009d84 <_ZN6tflite12RuntimeShape8DimsDataEv>
 8009e46:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	461a      	mov	r2, r3
 8009e4e:	6879      	ldr	r1, [r7, #4]
 8009e50:	6978      	ldr	r0, [r7, #20]
 8009e52:	f001 febb 	bl	800bbcc <memcpy>
  }
 8009e56:	bf00      	nop
 8009e58:	3718      	adds	r7, #24
 8009e5a:	46bd      	mov	sp, r7
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b086      	sub	sp, #24
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
 8009e66:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d103      	bne.n	8009e76 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7ff ff20 	bl	8009cb4 <_ZN6tflite12RuntimeShapeC1Ev>
 8009e74:	e00d      	b.n	8009e92 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	689b      	ldr	r3, [r3, #8]
 8009e7a:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8009e82:	697b      	ldr	r3, [r7, #20]
 8009e84:	3304      	adds	r3, #4
 8009e86:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8009e88:	68fa      	ldr	r2, [r7, #12]
 8009e8a:	6939      	ldr	r1, [r7, #16]
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f7ff ff1f 	bl	8009cd0 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8009e92:	6878      	ldr	r0, [r7, #4]
 8009e94:	3718      	adds	r7, #24
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8009e9a:	b480      	push	{r7}
 8009e9c:	b083      	sub	sp, #12
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d002      	beq.n	8009eae <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8009eac:	e000      	b.n	8009eb0 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009eae:	2300      	movs	r3, #0
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d002      	beq.n	8009ed0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	e000      	b.n	8009ed2 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	370c      	adds	r7, #12
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr

08009ede <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8009ede:	b480      	push	{r7}
 8009ee0:	b083      	sub	sp, #12
 8009ee2:	af00      	add	r7, sp, #0
 8009ee4:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d002      	beq.n	8009ef2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8009ef0:	e000      	b.n	8009ef4 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d002      	beq.n	8009f14 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	e000      	b.n	8009f16 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 8009f14:	2300      	movs	r3, #0
}
 8009f16:	4618      	mov	r0, r3
 8009f18:	370c      	adds	r7, #12
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f20:	4770      	bx	lr

08009f22 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 8009f22:	b480      	push	{r7}
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 8009f34:	b480      	push	{r7}
 8009f36:	af00      	add	r7, sp, #0
 8009f38:	4b04      	ldr	r3, [pc, #16]	; (8009f4c <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 8009f3a:	ee07 3a90 	vmov	s15, r3
 8009f3e:	eeb0 0a67 	vmov.f32	s0, s15
 8009f42:	46bd      	mov	sp, r7
 8009f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f48:	4770      	bx	lr
 8009f4a:	bf00      	nop
 8009f4c:	7f7fffff 	.word	0x7f7fffff

08009f50 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 8009f50:	b480      	push	{r7}
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8009f58:	ee07 3a90 	vmov	s15, r3
 8009f5c:	eeb0 0a67 	vmov.f32	s0, s15
 8009f60:	46bd      	mov	sp, r7
 8009f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f66:	4770      	bx	lr

08009f68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8009f68:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009f6c:	b08c      	sub	sp, #48	; 0x30
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	683b      	ldr	r3, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d107      	bne.n	8009f8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009f7c:	f7ff ffd1 	bl	8009f22 <_ZNSt14numeric_limitsIlE3minEv>
 8009f80:	4602      	mov	r2, r0
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d101      	bne.n	8009f8c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e000      	b.n	8009f8e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009f98:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 8009f9c:	683b      	ldr	r3, [r7, #0]
 8009f9e:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009fa2:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8009fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa8:	69ba      	ldr	r2, [r7, #24]
 8009faa:	fb02 f203 	mul.w	r2, r2, r3
 8009fae:	69fb      	ldr	r3, [r7, #28]
 8009fb0:	6a39      	ldr	r1, [r7, #32]
 8009fb2:	fb01 f303 	mul.w	r3, r1, r3
 8009fb6:	441a      	add	r2, r3
 8009fb8:	6a39      	ldr	r1, [r7, #32]
 8009fba:	69bb      	ldr	r3, [r7, #24]
 8009fbc:	fba1 3403 	umull	r3, r4, r1, r3
 8009fc0:	4422      	add	r2, r4
 8009fc2:	4614      	mov	r4, r2
 8009fc4:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8009fc8:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009fcc:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	f174 0300 	sbcs.w	r3, r4, #0
 8009fd6:	db02      	blt.n	8009fde <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8009fd8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009fdc:	e000      	b.n	8009fe0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8009fde:	4b19      	ldr	r3, [pc, #100]	; (800a044 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8009fe0:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8009fea:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009fee:	eb13 0b01 	adds.w	fp, r3, r1
 8009ff2:	eb44 0c02 	adc.w	ip, r4, r2
 8009ff6:	465b      	mov	r3, fp
 8009ff8:	4664      	mov	r4, ip
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	f174 0200 	sbcs.w	r2, r4, #0
 800a000:	da06      	bge.n	800a010 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800a002:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a006:	f04f 0200 	mov.w	r2, #0
 800a00a:	185b      	adds	r3, r3, r1
 800a00c:	eb44 0402 	adc.w	r4, r4, r2
 800a010:	f04f 0100 	mov.w	r1, #0
 800a014:	f04f 0200 	mov.w	r2, #0
 800a018:	0fd9      	lsrs	r1, r3, #31
 800a01a:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 800a01e:	17e2      	asrs	r2, r4, #31
 800a020:	460b      	mov	r3, r1
 800a022:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 800a024:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800a026:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d003      	beq.n	800a036 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 800a02e:	f7fc f86d 	bl	800610c <_ZNSt14numeric_limitsIlE3maxEv>
 800a032:	4603      	mov	r3, r0
 800a034:	e000      	b.n	800a038 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800a036:	68bb      	ldr	r3, [r7, #8]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3730      	adds	r7, #48	; 0x30
 800a03c:	46bd      	mov	sp, r7
 800a03e:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a042:	bf00      	nop
 800a044:	c0000001 	.word	0xc0000001

0800a048 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 800a048:	b580      	push	{r7, lr}
 800a04a:	b084      	sub	sp, #16
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	ed87 0a03 	vstr	s0, [r7, #12]
 800a052:	edc7 0a02 	vstr	s1, [r7, #8]
 800a056:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800a05a:	f107 0208 	add.w	r2, r7, #8
 800a05e:	f107 030c 	add.w	r3, r7, #12
 800a062:	4611      	mov	r1, r2
 800a064:	4618      	mov	r0, r3
 800a066:	f7fc f8e7 	bl	8006238 <_ZSt3maxIfERKT_S2_S2_>
 800a06a:	4602      	mov	r2, r0
 800a06c:	1d3b      	adds	r3, r7, #4
 800a06e:	4619      	mov	r1, r3
 800a070:	4610      	mov	r0, r2
 800a072:	f7fc f8fa 	bl	800626a <_ZSt3minIfERKT_S2_S2_>
 800a076:	4603      	mov	r3, r0
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	ee07 3a90 	vmov	s15, r3
}
 800a07e:	eeb0 0a67 	vmov.f32	s0, s15
 800a082:	3710      	adds	r7, #16
 800a084:	46bd      	mov	sp, r7
 800a086:	bd80      	pop	{r7, pc}

0800a088 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800a088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a08a:	b089      	sub	sp, #36	; 0x24
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800a092:	683a      	ldr	r2, [r7, #0]
 800a094:	2a00      	cmp	r2, #0
 800a096:	da06      	bge.n	800a0a6 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800a098:	4b30      	ldr	r3, [pc, #192]	; (800a15c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd4>)
 800a09a:	4a31      	ldr	r2, [pc, #196]	; (800a160 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800a09c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800a0a0:	4830      	ldr	r0, [pc, #192]	; (800a164 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a0a2:	f001 fd23 	bl	800baec <__assert_func>
  assert(exponent <= 31);
 800a0a6:	683a      	ldr	r2, [r7, #0]
 800a0a8:	2a1f      	cmp	r2, #31
 800a0aa:	dd06      	ble.n	800a0ba <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800a0ac:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800a0ae:	4a2c      	ldr	r2, [pc, #176]	; (800a160 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800a0b0:	f240 1167 	movw	r1, #359	; 0x167
 800a0b4:	482b      	ldr	r0, [pc, #172]	; (800a164 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a0b6:	f001 fd19 	bl	800baec <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800a0ba:	f04f 0101 	mov.w	r1, #1
 800a0be:	f04f 0200 	mov.w	r2, #0
 800a0c2:	6838      	ldr	r0, [r7, #0]
 800a0c4:	f1a0 0620 	sub.w	r6, r0, #32
 800a0c8:	f1c0 0520 	rsb	r5, r0, #32
 800a0cc:	fa02 f400 	lsl.w	r4, r2, r0
 800a0d0:	fa01 f606 	lsl.w	r6, r1, r6
 800a0d4:	4334      	orrs	r4, r6
 800a0d6:	fa21 f505 	lsr.w	r5, r1, r5
 800a0da:	432c      	orrs	r4, r5
 800a0dc:	fa01 f300 	lsl.w	r3, r1, r0
 800a0e0:	3b01      	subs	r3, #1
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f884 	bl	800a1f0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a0e8:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800a0ea:	2000      	movs	r0, #0
 800a0ec:	f000 f880 	bl	800a1f0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a0f0:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800a0f2:	2001      	movs	r0, #1
 800a0f4:	f000 f87c 	bl	800a1f0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a0f8:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800a0fa:	69f9      	ldr	r1, [r7, #28]
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f882 	bl	800a206 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a102:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800a104:	2101      	movs	r1, #1
 800a106:	69f8      	ldr	r0, [r7, #28]
 800a108:	f000 f88b 	bl	800a222 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a10c:	4604      	mov	r4, r0
 800a10e:	69b9      	ldr	r1, [r7, #24]
 800a110:	6878      	ldr	r0, [r7, #4]
 800a112:	f000 f895 	bl	800a240 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800a116:	4603      	mov	r3, r0
 800a118:	6979      	ldr	r1, [r7, #20]
 800a11a:	4618      	mov	r0, r3
 800a11c:	f000 f873 	bl	800a206 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a120:	4603      	mov	r3, r0
  const IntegerType threshold =
 800a122:	4619      	mov	r1, r3
 800a124:	4620      	mov	r0, r4
 800a126:	f000 f89f 	bl	800a268 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a12a:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800a12c:	6839      	ldr	r1, [r7, #0]
 800a12e:	6878      	ldr	r0, [r7, #4]
 800a130:	f000 f877 	bl	800a222 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a134:	4604      	mov	r4, r0
 800a136:	68f9      	ldr	r1, [r7, #12]
 800a138:	6938      	ldr	r0, [r7, #16]
 800a13a:	f000 f8a3 	bl	800a284 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800a13e:	4603      	mov	r3, r0
 800a140:	6979      	ldr	r1, [r7, #20]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 f85f 	bl	800a206 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a148:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800a14a:	4619      	mov	r1, r3
 800a14c:	4620      	mov	r0, r4
 800a14e:	f000 f88b 	bl	800a268 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a152:	4603      	mov	r3, r0
}
 800a154:	4618      	mov	r0, r3
 800a156:	3724      	adds	r7, #36	; 0x24
 800a158:	46bd      	mov	sp, r7
 800a15a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a15c:	08010bec 	.word	0x08010bec
 800a160:	080dd230 	.word	0x080dd230
 800a164:	08010bfc 	.word	0x08010bfc
 800a168:	08010c64 	.word	0x08010c64

0800a16c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b084      	sub	sp, #16
 800a170:	af00      	add	r7, sp, #0
 800a172:	4603      	mov	r3, r0
 800a174:	60b9      	str	r1, [r7, #8]
 800a176:	607a      	str	r2, [r7, #4]
 800a178:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800a17a:	7bfb      	ldrb	r3, [r7, #15]
 800a17c:	2b01      	cmp	r3, #1
 800a17e:	d10b      	bne.n	800a198 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800a180:	68bb      	ldr	r3, [r7, #8]
 800a182:	f04f 0200 	mov.w	r2, #0
 800a186:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800a188:	f7ff fed4 	bl	8009f34 <_ZNSt14numeric_limitsIfE3maxEv>
 800a18c:	eef0 7a40 	vmov.f32	s15, s0
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800a196:	e023      	b.n	800a1e0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800a198:	7bfb      	ldrb	r3, [r7, #15]
 800a19a:	2b03      	cmp	r3, #3
 800a19c:	d107      	bne.n	800a1ae <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800a19e:	68bb      	ldr	r3, [r7, #8]
 800a1a0:	f04f 0200 	mov.w	r2, #0
 800a1a4:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a0f      	ldr	r2, [pc, #60]	; (800a1e8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800a1aa:	601a      	str	r2, [r3, #0]
}
 800a1ac:	e018      	b.n	800a1e0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800a1ae:	7bfb      	ldrb	r3, [r7, #15]
 800a1b0:	2b02      	cmp	r3, #2
 800a1b2:	d107      	bne.n	800a1c4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	4a0d      	ldr	r2, [pc, #52]	; (800a1ec <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800a1b8:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800a1c0:	601a      	str	r2, [r3, #0]
}
 800a1c2:	e00d      	b.n	800a1e0 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800a1c4:	f7ff fec4 	bl	8009f50 <_ZNSt14numeric_limitsIfE6lowestEv>
 800a1c8:	eef0 7a40 	vmov.f32	s15, s0
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800a1d2:	f7ff feaf 	bl	8009f34 <_ZNSt14numeric_limitsIfE3maxEv>
 800a1d6:	eef0 7a40 	vmov.f32	s15, s0
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	edc3 7a00 	vstr	s15, [r3]
}
 800a1e0:	bf00      	nop
 800a1e2:	3710      	adds	r7, #16
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}
 800a1e8:	40c00000 	.word	0x40c00000
 800a1ec:	bf800000 	.word	0xbf800000

0800a1f0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  return x;
 800a1f8:	687b      	ldr	r3, [r7, #4]
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	370c      	adds	r7, #12
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800a206:	b480      	push	{r7}
 800a208:	b083      	sub	sp, #12
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	6078      	str	r0, [r7, #4]
 800a20e:	6039      	str	r1, [r7, #0]
  return a & b;
 800a210:	687a      	ldr	r2, [r7, #4]
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	4013      	ands	r3, r2
}
 800a216:	4618      	mov	r0, r3
 800a218:	370c      	adds	r7, #12
 800a21a:	46bd      	mov	sp, r7
 800a21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a220:	4770      	bx	lr

0800a222 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800a222:	b480      	push	{r7}
 800a224:	b083      	sub	sp, #12
 800a226:	af00      	add	r7, sp, #0
 800a228:	6078      	str	r0, [r7, #4]
 800a22a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	fa42 f303 	asr.w	r3, r2, r3
}
 800a234:	4618      	mov	r0, r3
 800a236:	370c      	adds	r7, #12
 800a238:	46bd      	mov	sp, r7
 800a23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23e:	4770      	bx	lr

0800a240 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800a240:	b580      	push	{r7, lr}
 800a242:	b082      	sub	sp, #8
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
 800a248:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800a24a:	687a      	ldr	r2, [r7, #4]
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	bfb4      	ite	lt
 800a252:	2301      	movlt	r3, #1
 800a254:	2300      	movge	r3, #0
 800a256:	b2db      	uxtb	r3, r3
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f827 	bl	800a2ac <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800a25e:	4603      	mov	r3, r0
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}

0800a268 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800a268:	b480      	push	{r7}
 800a26a:	b083      	sub	sp, #12
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  return a + b;
 800a272:	687a      	ldr	r2, [r7, #4]
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	4413      	add	r3, r2
}
 800a278:	4618      	mov	r0, r3
 800a27a:	370c      	adds	r7, #12
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr

0800a284 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800a284:	b580      	push	{r7, lr}
 800a286:	b082      	sub	sp, #8
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
 800a28c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800a28e:	687a      	ldr	r2, [r7, #4]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	429a      	cmp	r2, r3
 800a294:	bfcc      	ite	gt
 800a296:	2301      	movgt	r3, #1
 800a298:	2300      	movle	r3, #0
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f805 	bl	800a2ac <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800a2a2:	4603      	mov	r3, r0
}
 800a2a4:	4618      	mov	r0, r3
 800a2a6:	3708      	adds	r7, #8
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b082      	sub	sp, #8
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d004      	beq.n	800a2c4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800a2ba:	2000      	movs	r0, #0
 800a2bc:	f000 f807 	bl	800a2ce <_ZN8gemmlowp6BitNotIlEET_S1_>
 800a2c0:	4603      	mov	r3, r0
 800a2c2:	e000      	b.n	800a2c6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3708      	adds	r7, #8
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}

0800a2ce <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  return ~a;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	43db      	mvns	r3, r3
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	370c      	adds	r7, #12
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800a2e6:	b480      	push	{r7}
 800a2e8:	b083      	sub	sp, #12
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800a2f8:	e000      	b.n	800a2fc <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800a2fa:	2300      	movs	r3, #0
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	370c      	adds	r7, #12
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
  return MatchingArraySize(array1, index1, args...);
}

// Get common shape dim, DCHECKing that they all agree.
inline int MatchingDim(const RuntimeShape& shape1, int index1,
                       const RuntimeShape& shape2, int index2) {
 800a308:	b590      	push	{r4, r7, lr}
 800a30a:	b087      	sub	sp, #28
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800a316:	68b9      	ldr	r1, [r7, #8]
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f7ff fd0e 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a31e:	4604      	mov	r4, r0
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	6878      	ldr	r0, [r7, #4]
 800a324:	f7ff fd09 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a328:	4603      	mov	r3, r0
 800a32a:	429c      	cmp	r4, r3
 800a32c:	d001      	beq.n	800a332 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800a32e:	f001 fbd5 	bl	800badc <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	68f8      	ldr	r0, [r7, #12]
 800a336:	f7ff fd00 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a33a:	4603      	mov	r3, r0
 800a33c:	613b      	str	r3, [r7, #16]
 800a33e:	6839      	ldr	r1, [r7, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	f7ff fcfa 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a346:	4603      	mov	r3, r0
 800a348:	617b      	str	r3, [r7, #20]
 800a34a:	f107 0214 	add.w	r2, r7, #20
 800a34e:	f107 0310 	add.w	r3, r7, #16
 800a352:	4611      	mov	r1, r2
 800a354:	4618      	mov	r0, r3
 800a356:	f7fc f9eb 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 800a35a:	4603      	mov	r3, r0
 800a35c:	681b      	ldr	r3, [r3, #0]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	371c      	adds	r7, #28
 800a362:	46bd      	mov	sp, r7
 800a364:	bd90      	pop	{r4, r7, pc}

0800a366 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
                                           quantized_multiplier);
}

inline int32 MultiplyByQuantizedMultiplier(int32 x, int32 quantized_multiplier,
                                           int shift) {
 800a366:	b580      	push	{r7, lr}
 800a368:	b086      	sub	sp, #24
 800a36a:	af00      	add	r7, sp, #0
 800a36c:	60f8      	str	r0, [r7, #12]
 800a36e:	60b9      	str	r1, [r7, #8]
 800a370:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a378:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	dc02      	bgt.n	800a386 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	425b      	negs	r3, r3
 800a384:	e000      	b.n	800a388 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 800a386:	2300      	movs	r3, #0
 800a388:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 800a38a:	68fa      	ldr	r2, [r7, #12]
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	fa02 f303 	lsl.w	r3, r2, r3
 800a392:	68b9      	ldr	r1, [r7, #8]
 800a394:	4618      	mov	r0, r3
 800a396:	f7ff fde7 	bl	8009f68 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800a39a:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 800a39c:	6939      	ldr	r1, [r7, #16]
 800a39e:	4618      	mov	r0, r3
 800a3a0:	f7ff fe72 	bl	800a088 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800a3a4:	4603      	mov	r3, r0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3718      	adds	r7, #24
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	60f8      	str	r0, [r7, #12]
 800a3b6:	60b9      	str	r1, [r7, #8]
 800a3b8:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	68b9      	ldr	r1, [r7, #8]
 800a3be:	68f8      	ldr	r0, [r7, #12]
 800a3c0:	f7ff fc1c 	bl	8009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a3c4:	4603      	mov	r3, r0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3710      	adds	r7, #16
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b086      	sub	sp, #24
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800a3d8:	6878      	ldr	r0, [r7, #4]
 800a3da:	f7ff fca2 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a3de:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	db03      	blt.n	800a3ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800a3e6:	683a      	ldr	r2, [r7, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	db01      	blt.n	800a3f2 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800a3ee:	f001 fb75 	bl	800badc <abort>
  const auto* dims_data = shape.DimsData();
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff fcd9 	bl	8009daa <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800a3f8:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800a3fe:	2300      	movs	r3, #0
 800a400:	613b      	str	r3, [r7, #16]
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	429a      	cmp	r2, r3
 800a408:	da12      	bge.n	800a430 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	429a      	cmp	r2, r3
 800a410:	d005      	beq.n	800a41e <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800a412:	693b      	ldr	r3, [r7, #16]
 800a414:	009b      	lsls	r3, r3, #2
 800a416:	68ba      	ldr	r2, [r7, #8]
 800a418:	4413      	add	r3, r2
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	e000      	b.n	800a420 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800a41e:	2301      	movs	r3, #1
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	fb03 f302 	mul.w	r3, r3, r2
 800a426:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800a428:	693b      	ldr	r3, [r7, #16]
 800a42a:	3301      	adds	r3, #1
 800a42c:	613b      	str	r3, [r7, #16]
 800a42e:	e7e8      	b.n	800a402 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800a430:	697b      	ldr	r3, [r7, #20]
}
 800a432:	4618      	mov	r0, r3
 800a434:	3718      	adds	r7, #24
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}

0800a43a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800a43a:	b590      	push	{r4, r7, lr}
 800a43c:	b091      	sub	sp, #68	; 0x44
 800a43e:	af00      	add	r7, sp, #0
 800a440:	60f8      	str	r0, [r7, #12]
 800a442:	60b9      	str	r1, [r7, #8]
 800a444:	607a      	str	r2, [r7, #4]
 800a446:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	69db      	ldr	r3, [r3, #28]
 800a44c:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6a1b      	ldr	r3, [r3, #32]
 800a452:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800a454:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a456:	f7ff fc64 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a45a:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800a45c:	6838      	ldr	r0, [r7, #0]
 800a45e:	f7ff fc60 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a462:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800a464:	6a3b      	ldr	r3, [r7, #32]
 800a466:	3b01      	subs	r3, #1
 800a468:	4619      	mov	r1, r3
 800a46a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800a46c:	f7ff ffaf 	bl	800a3ce <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800a470:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	1e99      	subs	r1, r3, #2
 800a476:	6a3b      	ldr	r3, [r7, #32]
 800a478:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 800a47a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a47c:	6838      	ldr	r0, [r7, #0]
 800a47e:	f7ff ff43 	bl	800a308 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a482:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800a484:	69fb      	ldr	r3, [r7, #28]
 800a486:	3b01      	subs	r3, #1
 800a488:	4619      	mov	r1, r3
 800a48a:	6838      	ldr	r0, [r7, #0]
 800a48c:	f7ff fc55 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a490:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800a492:	2300      	movs	r3, #0
 800a494:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a496:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a498:	69bb      	ldr	r3, [r7, #24]
 800a49a:	429a      	cmp	r2, r3
 800a49c:	da5f      	bge.n	800a55e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a49e:	2300      	movs	r3, #0
 800a4a0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a4a4:	697b      	ldr	r3, [r7, #20]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	da55      	bge.n	800a556 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800a4aa:	f04f 0300 	mov.w	r3, #0
 800a4ae:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	633b      	str	r3, [r7, #48]	; 0x30
 800a4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4b6:	693b      	ldr	r3, [r7, #16]
 800a4b8:	429a      	cmp	r2, r3
 800a4ba:	da21      	bge.n	800a500 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800a4bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	fb02 f203 	mul.w	r2, r2, r3
 800a4c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4c6:	4413      	add	r3, r2
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800a4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d4:	693a      	ldr	r2, [r7, #16]
 800a4d6:	fb02 f203 	mul.w	r2, r2, r3
 800a4da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4e2:	4413      	add	r3, r2
 800a4e4:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800a4e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4ec:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a4f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4f4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	633b      	str	r3, [r7, #48]	; 0x30
 800a4fe:	e7d9      	b.n	800a4b4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800a500:	f04f 0300 	mov.w	r3, #0
 800a504:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800a506:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d005      	beq.n	800a518 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800a50c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a512:	4413      	add	r3, r2
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800a518:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800a51c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a520:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a528:	fb02 f203 	mul.w	r2, r2, r3
 800a52c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52e:	4413      	add	r3, r2
 800a530:	009b      	lsls	r3, r3, #2
 800a532:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a534:	18d4      	adds	r4, r2, r3
 800a536:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800a53a:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800a53e:	eeb0 0a67 	vmov.f32	s0, s15
 800a542:	f7ff fd81 	bl	800a048 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800a546:	eef0 7a40 	vmov.f32	s15, s0
 800a54a:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a550:	3301      	adds	r3, #1
 800a552:	63bb      	str	r3, [r7, #56]	; 0x38
 800a554:	e7a5      	b.n	800a4a2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800a556:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a558:	3301      	adds	r3, #1
 800a55a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a55c:	e79b      	b.n	800a496 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800a55e:	bf00      	nop
 800a560:	3744      	adds	r7, #68	; 0x44
 800a562:	46bd      	mov	sp, r7
 800a564:	bd90      	pop	{r4, r7, pc}

0800a566 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 800a566:	b580      	push	{r7, lr}
 800a568:	b096      	sub	sp, #88	; 0x58
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	60f8      	str	r0, [r7, #12]
 800a56e:	60b9      	str	r1, [r7, #8]
 800a570:	607a      	str	r2, [r7, #4]
 800a572:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	689b      	ldr	r3, [r3, #8]
 800a584:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	68db      	ldr	r3, [r3, #12]
 800a58a:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	699b      	ldr	r3, [r3, #24]
 800a59c:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800a59e:	6838      	ldr	r0, [r7, #0]
 800a5a0:	f7ff fbbf 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	2b01      	cmp	r3, #1
 800a5a8:	dc01      	bgt.n	800a5ae <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800a5aa:	f001 fa97 	bl	800badc <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800a5ae:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5b0:	f7ff fbb7 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dc01      	bgt.n	800a5be <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800a5ba:	f001 fa8f 	bl	800badc <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a5be:	69ba      	ldr	r2, [r7, #24]
 800a5c0:	697b      	ldr	r3, [r7, #20]
 800a5c2:	429a      	cmp	r2, r3
 800a5c4:	dd01      	ble.n	800a5ca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800a5c6:	f001 fa89 	bl	800badc <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800a5ca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5cc:	f7ff fba9 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a5d0:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a5d2:	6838      	ldr	r0, [r7, #0]
 800a5d4:	f7ff fba5 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a5d8:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800a5da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5dc:	3b01      	subs	r3, #1
 800a5de:	4619      	mov	r1, r3
 800a5e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a5e2:	f7ff fef4 	bl	800a3ce <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800a5e6:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800a5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5ea:	1e99      	subs	r1, r3, #2
 800a5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a5ee:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800a5f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a5f2:	6838      	ldr	r0, [r7, #0]
 800a5f4:	f7ff fe88 	bl	800a308 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a5f8:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5fc:	3b01      	subs	r3, #1
 800a5fe:	4619      	mov	r1, r3
 800a600:	6838      	ldr	r0, [r7, #0]
 800a602:	f7ff fb9a 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a606:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800a608:	2300      	movs	r3, #0
 800a60a:	657b      	str	r3, [r7, #84]	; 0x54
 800a60c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a610:	429a      	cmp	r2, r3
 800a612:	da73      	bge.n	800a6fc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a614:	2300      	movs	r3, #0
 800a616:	653b      	str	r3, [r7, #80]	; 0x50
 800a618:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a61c:	429a      	cmp	r2, r3
 800a61e:	da69      	bge.n	800a6f4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800a624:	2300      	movs	r3, #0
 800a626:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a62c:	429a      	cmp	r2, r3
 800a62e:	da24      	bge.n	800a67a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 800a630:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a634:	fb02 f203 	mul.w	r2, r2, r3
 800a638:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a63a:	4413      	add	r3, r2
 800a63c:	461a      	mov	r2, r3
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	4413      	add	r3, r2
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800a646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a648:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a64a:	fb02 f203 	mul.w	r2, r2, r3
 800a64e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a650:	4413      	add	r3, r2
 800a652:	461a      	mov	r2, r3
 800a654:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a656:	4413      	add	r3, r2
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a660:	4413      	add	r3, r2
 800a662:	6a39      	ldr	r1, [r7, #32]
 800a664:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a666:	440a      	add	r2, r1
 800a668:	fb02 f203 	mul.w	r2, r2, r3
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	4413      	add	r3, r2
 800a670:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800a672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a674:	3301      	adds	r3, #1
 800a676:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a678:	e7d6      	b.n	800a628 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 800a67a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d007      	beq.n	800a690 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800a680:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a682:	009b      	lsls	r3, r3, #2
 800a684:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a686:	4413      	add	r3, r2
 800a688:	681a      	ldr	r2, [r3, #0]
 800a68a:	693b      	ldr	r3, [r7, #16]
 800a68c:	4413      	add	r3, r2
 800a68e:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fe65 	bl	800a366 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a69c:	4603      	mov	r3, r0
 800a69e:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800a6a0:	693a      	ldr	r2, [r7, #16]
 800a6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a6a4:	4413      	add	r3, r2
 800a6a6:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800a6a8:	f107 0218 	add.w	r2, r7, #24
 800a6ac:	f107 0310 	add.w	r3, r7, #16
 800a6b0:	4611      	mov	r1, r2
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	f7fc f850 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 800a6b8:	4603      	mov	r3, r0
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800a6be:	f107 0214 	add.w	r2, r7, #20
 800a6c2:	f107 0310 	add.w	r3, r7, #16
 800a6c6:	4611      	mov	r1, r2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fc f831 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 800a6d4:	6939      	ldr	r1, [r7, #16]
 800a6d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a6da:	fb02 f203 	mul.w	r2, r2, r3
 800a6de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6e0:	4413      	add	r3, r2
 800a6e2:	461a      	mov	r2, r3
 800a6e4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a6e6:	4413      	add	r3, r2
 800a6e8:	b2ca      	uxtb	r2, r1
 800a6ea:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a6ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	653b      	str	r3, [r7, #80]	; 0x50
 800a6f2:	e791      	b.n	800a618 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 800a6f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	657b      	str	r3, [r7, #84]	; 0x54
 800a6fa:	e787      	b.n	800a60c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 800a6fc:	bf00      	nop
 800a6fe:	3758      	adds	r7, #88	; 0x58
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}

0800a704 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b098      	sub	sp, #96	; 0x60
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
 800a710:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	685b      	ldr	r3, [r3, #4]
 800a71c:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	689b      	ldr	r3, [r3, #8]
 800a722:	623b      	str	r3, [r7, #32]
  const int32 output_multiplier = params.output_multiplier;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	691b      	ldr	r3, [r3, #16]
 800a72e:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_activation_min = params.quantized_activation_min;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	695b      	ldr	r3, [r3, #20]
 800a734:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	69bb      	ldr	r3, [r7, #24]
 800a740:	429a      	cmp	r2, r3
 800a742:	dd01      	ble.n	800a748 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800a744:	f001 f9ca 	bl	800badc <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800a748:	6a3b      	ldr	r3, [r7, #32]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d001      	beq.n	800a752 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800a74e:	f001 f9c5 	bl	800badc <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800a752:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a754:	f7ff fae5 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a758:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a75a:	6838      	ldr	r0, [r7, #0]
 800a75c:	f7ff fae1 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a760:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800a762:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a764:	3b01      	subs	r3, #1
 800a766:	4619      	mov	r1, r3
 800a768:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800a76a:	f7ff fe30 	bl	800a3ce <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800a76e:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800a770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a772:	1e99      	subs	r1, r3, #2
 800a774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a776:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800a778:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a77a:	6838      	ldr	r0, [r7, #0]
 800a77c:	f7ff fdc4 	bl	800a308 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800a780:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a782:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a784:	3b01      	subs	r3, #1
 800a786:	4619      	mov	r1, r3
 800a788:	6838      	ldr	r0, [r7, #0]
 800a78a:	f7ff fad6 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a78e:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 800a790:	2300      	movs	r3, #0
 800a792:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a794:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	429a      	cmp	r2, r3
 800a79a:	da7c      	bge.n	800a896 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a79c:	2300      	movs	r3, #0
 800a79e:	65bb      	str	r3, [r7, #88]	; 0x58
 800a7a0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a7a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	da72      	bge.n	800a88e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 800a7a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7aa:	009b      	lsls	r3, r3, #2
 800a7ac:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800a7ae:	4413      	add	r3, r2
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	657b      	str	r3, [r7, #84]	; 0x54
 800a7b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a7ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	da2c      	bge.n	800a81a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 800a7c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a7c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7c4:	fb02 f203 	mul.w	r2, r2, r3
 800a7c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ca:	4413      	add	r3, r2
 800a7cc:	461a      	mov	r2, r3
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	4413      	add	r3, r2
 800a7d2:	781b      	ldrb	r3, [r3, #0]
 800a7d4:	b29a      	uxth	r2, r3
 800a7d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a7d8:	b29b      	uxth	r3, r3
 800a7da:	4413      	add	r3, r2
 800a7dc:	b29b      	uxth	r3, r3
 800a7de:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 800a7e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a7e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7e4:	fb02 f203 	mul.w	r2, r2, r3
 800a7e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a7ea:	4413      	add	r3, r2
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a7f0:	4413      	add	r3, r2
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	b29a      	uxth	r2, r3
 800a7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	4413      	add	r3, r2
 800a7fc:	b29b      	uxth	r3, r3
 800a7fe:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 800a800:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800a804:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800a808:	fb02 f203 	mul.w	r2, r2, r3
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	4413      	add	r3, r2
 800a810:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a812:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a814:	3301      	adds	r3, #1
 800a816:	657b      	str	r3, [r7, #84]	; 0x54
 800a818:	e7ce      	b.n	800a7b8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a81e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff fda0 	bl	800a366 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a826:	4603      	mov	r3, r0
      accum =
 800a828:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800a82a:	69fa      	ldr	r2, [r7, #28]
 800a82c:	6a3b      	ldr	r3, [r7, #32]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
 800a832:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a836:	f107 0314 	add.w	r3, r7, #20
 800a83a:	4611      	mov	r1, r2
 800a83c:	4618      	mov	r0, r3
 800a83e:	f7fb ff8b 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 800a842:	4603      	mov	r3, r0
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800a848:	69ba      	ldr	r2, [r7, #24]
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	1ad3      	subs	r3, r2, r3
 800a84e:	62bb      	str	r3, [r7, #40]	; 0x28
 800a850:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800a854:	f107 0314 	add.w	r3, r7, #20
 800a858:	4611      	mov	r1, r2
 800a85a:	4618      	mov	r0, r3
 800a85c:	f7fb ff68 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 800a860:	4603      	mov	r3, r0
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800a866:	697a      	ldr	r2, [r7, #20]
 800a868:	6a3b      	ldr	r3, [r7, #32]
 800a86a:	4413      	add	r3, r2
 800a86c:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800a86e:	6979      	ldr	r1, [r7, #20]
 800a870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a872:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a874:	fb02 f203 	mul.w	r2, r2, r3
 800a878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a87a:	4413      	add	r3, r2
 800a87c:	005b      	lsls	r3, r3, #1
 800a87e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a880:	4413      	add	r3, r2
 800a882:	b20a      	sxth	r2, r1
 800a884:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a886:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a888:	3301      	adds	r3, #1
 800a88a:	65bb      	str	r3, [r7, #88]	; 0x58
 800a88c:	e788      	b.n	800a7a0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800a88e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a890:	3301      	adds	r3, #1
 800a892:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a894:	e77e      	b.n	800a794 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800a896:	bf00      	nop
 800a898:	3760      	adds	r7, #96	; 0x60
 800a89a:	46bd      	mov	sp, r7
 800a89c:	bd80      	pop	{r7, pc}

0800a89e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800a89e:	b580      	push	{r7, lr}
 800a8a0:	b096      	sub	sp, #88	; 0x58
 800a8a2:	af00      	add	r7, sp, #0
 800a8a4:	60f8      	str	r0, [r7, #12]
 800a8a6:	60b9      	str	r1, [r7, #8]
 800a8a8:	607a      	str	r2, [r7, #4]
 800a8aa:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	689b      	ldr	r3, [r3, #8]
 800a8bc:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	691b      	ldr	r3, [r3, #16]
 800a8c8:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	695b      	ldr	r3, [r3, #20]
 800a8ce:	623b      	str	r3, [r7, #32]
  const int32 output_activation_max = params.quantized_activation_max;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	699b      	ldr	r3, [r3, #24]
 800a8d4:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800a8d6:	6838      	ldr	r0, [r7, #0]
 800a8d8:	f7ff fa23 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a8dc:	4603      	mov	r3, r0
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	dc01      	bgt.n	800a8e6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800a8e2:	f001 f8fb 	bl	800badc <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800a8e6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a8e8:	f7ff fa1b 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a8ec:	4603      	mov	r3, r0
 800a8ee:	2b02      	cmp	r3, #2
 800a8f0:	d001      	beq.n	800a8f6 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800a8f2:	f001 f8f3 	bl	800badc <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800a8f6:	6a3a      	ldr	r2, [r7, #32]
 800a8f8:	69fb      	ldr	r3, [r7, #28]
 800a8fa:	429a      	cmp	r2, r3
 800a8fc:	dd01      	ble.n	800a902 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800a8fe:	f001 f8ed 	bl	800badc <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800a902:	6838      	ldr	r0, [r7, #0]
 800a904:	f7ff fa0d 	bl	8009d22 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800a908:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800a90a:	2100      	movs	r1, #0
 800a90c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a90e:	f7ff fa14 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a912:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800a914:	2101      	movs	r1, #1
 800a916:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a918:	f7ff fa0f 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a91c:	4603      	mov	r3, r0
 800a91e:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800a920:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a922:	3b02      	subs	r3, #2
 800a924:	4619      	mov	r1, r3
 800a926:	6838      	ldr	r0, [r7, #0]
 800a928:	f7ff fa07 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a92c:	4602      	mov	r2, r0
 800a92e:	69bb      	ldr	r3, [r7, #24]
 800a930:	429a      	cmp	r2, r3
 800a932:	da01      	bge.n	800a938 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 800a934:	f001 f8d2 	bl	800badc <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800a938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a93a:	3b01      	subs	r3, #1
 800a93c:	4619      	mov	r1, r3
 800a93e:	6838      	ldr	r0, [r7, #0]
 800a940:	f7ff f9fb 	bl	8009d3a <_ZNK6tflite12RuntimeShape4DimsEi>
 800a944:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 800a946:	2300      	movs	r3, #0
 800a948:	657b      	str	r3, [r7, #84]	; 0x54
 800a94a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a94e:	429a      	cmp	r2, r3
 800a950:	da75      	bge.n	800aa3e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800a952:	2300      	movs	r3, #0
 800a954:	653b      	str	r3, [r7, #80]	; 0x50
 800a956:	69bb      	ldr	r3, [r7, #24]
 800a958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a95a:	429a      	cmp	r2, r3
 800a95c:	da6b      	bge.n	800aa36 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32 acc = 0;
 800a95e:	2300      	movs	r3, #0
 800a960:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a962:	2300      	movs	r3, #0
 800a964:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a966:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	429a      	cmp	r2, r3
 800a96c:	da26      	bge.n	800a9bc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32 input_val = input_data[b * accum_depth + d];
 800a96e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a972:	fb02 f203 	mul.w	r2, r2, r3
 800a976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a978:	4413      	add	r3, r2
 800a97a:	461a      	mov	r2, r3
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4413      	add	r3, r2
 800a980:	f993 3000 	ldrsb.w	r3, [r3]
 800a984:	62bb      	str	r3, [r7, #40]	; 0x28
        int32 filter_val = filter_data[out_c * accum_depth + d];
 800a986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a988:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a98a:	fb02 f203 	mul.w	r2, r2, r3
 800a98e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a990:	4413      	add	r3, r2
 800a992:	461a      	mov	r2, r3
 800a994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a996:	4413      	add	r3, r2
 800a998:	f993 3000 	ldrsb.w	r3, [r3]
 800a99c:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800a99e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a9a2:	4413      	add	r3, r2
 800a9a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a9a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9a8:	440a      	add	r2, r1
 800a9aa:	fb02 f203 	mul.w	r2, r2, r3
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	4413      	add	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800a9b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9ba:	e7d4      	b.n	800a966 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 800a9bc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d007      	beq.n	800a9d2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 800a9c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9c4:	009b      	lsls	r3, r3, #2
 800a9c6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a9c8:	4413      	add	r3, r2
 800a9ca:	681a      	ldr	r2, [r3, #0]
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	4413      	add	r3, r2
 800a9d0:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800a9d2:	697b      	ldr	r3, [r7, #20]
 800a9d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a9d6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a9d8:	4618      	mov	r0, r3
 800a9da:	f7ff fcc4 	bl	800a366 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9e6:	4413      	add	r3, r2
 800a9e8:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800a9ea:	f107 0220 	add.w	r2, r7, #32
 800a9ee:	f107 0314 	add.w	r3, r7, #20
 800a9f2:	4611      	mov	r1, r2
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fb feaf 	bl	8006758 <_ZSt3maxIlERKT_S2_S2_>
 800a9fa:	4603      	mov	r3, r0
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800aa00:	f107 021c 	add.w	r2, r7, #28
 800aa04:	f107 0314 	add.w	r3, r7, #20
 800aa08:	4611      	mov	r1, r2
 800aa0a:	4618      	mov	r0, r3
 800aa0c:	f7fb fe90 	bl	8006730 <_ZSt3minIlERKT_S2_S2_>
 800aa10:	4603      	mov	r3, r0
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800aa16:	6979      	ldr	r1, [r7, #20]
 800aa18:	69bb      	ldr	r3, [r7, #24]
 800aa1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa1c:	fb02 f203 	mul.w	r2, r2, r3
 800aa20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa22:	4413      	add	r3, r2
 800aa24:	461a      	mov	r2, r3
 800aa26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa28:	4413      	add	r3, r2
 800aa2a:	b24a      	sxtb	r2, r1
 800aa2c:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800aa2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aa30:	3301      	adds	r3, #1
 800aa32:	653b      	str	r3, [r7, #80]	; 0x50
 800aa34:	e78f      	b.n	800a956 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 800aa36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa38:	3301      	adds	r3, #1
 800aa3a:	657b      	str	r3, [r7, #84]	; 0x54
 800aa3c:	e785      	b.n	800a94a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800aa3e:	bf00      	nop
 800aa40:	3758      	adds	r7, #88	; 0x58
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800aa46:	b590      	push	{r4, r7, lr}
 800aa48:	b08d      	sub	sp, #52	; 0x34
 800aa4a:	af02      	add	r7, sp, #8
 800aa4c:	60f8      	str	r0, [r7, #12]
 800aa4e:	607b      	str	r3, [r7, #4]
 800aa50:	460b      	mov	r3, r1
 800aa52:	72fb      	strb	r3, [r7, #11]
 800aa54:	4613      	mov	r3, r2
 800aa56:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800aa58:	2300      	movs	r3, #0
 800aa5a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800aa5e:	7abb      	ldrb	r3, [r7, #10]
 800aa60:	2b01      	cmp	r3, #1
 800aa62:	d041      	beq.n	800aae8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 800aa64:	f04f 0300 	mov.w	r3, #0
 800aa68:	f04f 0400 	mov.w	r4, #0
 800aa6c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800aa70:	f107 0318 	add.w	r3, r7, #24
 800aa74:	9301      	str	r3, [sp, #4]
 800aa76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa78:	9300      	str	r3, [sp, #0]
 800aa7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800aa7e:	6879      	ldr	r1, [r7, #4]
 800aa80:	68f8      	ldr	r0, [r7, #12]
 800aa82:	f7fb fc79 	bl	8006378 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800aa86:	4603      	mov	r3, r0
 800aa88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800aa8c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d002      	beq.n	800aa9a <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 800aa94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800aa98:	e028      	b.n	800aaec <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800aa9a:	ed97 7b06 	vldr	d7, [r7, #24]
 800aa9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaa0:	f107 0214 	add.w	r2, r7, #20
 800aaa4:	4611      	mov	r1, r2
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	eeb0 0a47 	vmov.f32	s0, s14
 800aaac:	eef0 0a67 	vmov.f32	s1, s15
 800aab0:	f7fb fb36 	bl	8006120 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	425a      	negs	r2, r3
 800aab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aaba:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800aabc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aabe:	f103 0208 	add.w	r2, r3, #8
 800aac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aac4:	330c      	adds	r3, #12
 800aac6:	7af9      	ldrb	r1, [r7, #11]
 800aac8:	9300      	str	r3, [sp, #0]
 800aaca:	4613      	mov	r3, r2
 800aacc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7fb fdda 	bl	8006688 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800aad4:	4603      	mov	r3, r0
 800aad6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800aada:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d002      	beq.n	800aae8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 800aae2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800aae6:	e001      	b.n	800aaec <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 800aae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	372c      	adds	r7, #44	; 0x2c
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	bd90      	pop	{r4, r7, pc}

0800aaf4 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800aaf4:	b580      	push	{r7, lr}
 800aaf6:	b086      	sub	sp, #24
 800aaf8:	af00      	add	r7, sp, #0
 800aafa:	60f8      	str	r0, [r7, #12]
 800aafc:	60b9      	str	r1, [r7, #8]
 800aafe:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d101      	bne.n	800ab0c <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 800ab08:	f000 ffe8 	bl	800badc <abort>
  void* data = nullptr;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab14:	f107 0214 	add.w	r2, r7, #20
 800ab18:	2114      	movs	r1, #20
 800ab1a:	68f8      	ldr	r0, [r7, #12]
 800ab1c:	4798      	blx	r3
 800ab1e:	4603      	mov	r3, r0
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	bf0c      	ite	eq
 800ab24:	2301      	moveq	r3, #1
 800ab26:	2300      	movne	r3, #0
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d001      	beq.n	800ab32 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	e000      	b.n	800ab34 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 800ab32:	697b      	ldr	r3, [r7, #20]
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	3718      	adds	r7, #24
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	bd80      	pop	{r7, pc}

0800ab3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800ab3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab3e:	b08d      	sub	sp, #52	; 0x34
 800ab40:	af04      	add	r7, sp, #16
 800ab42:	6078      	str	r0, [r7, #4]
 800ab44:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d101      	bne.n	800ab52 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800ab4e:	f000 ffc5 	bl	800badc <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	695b      	ldr	r3, [r3, #20]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d101      	bne.n	800ab5e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800ab5a:	f000 ffbf 	bl	800badc <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800ab5e:	683b      	ldr	r3, [r7, #0]
 800ab60:	691b      	ldr	r3, [r3, #16]
 800ab62:	61fb      	str	r3, [r7, #28]
  const auto params =
 800ab64:	683b      	ldr	r3, [r7, #0]
 800ab66:	695b      	ldr	r3, [r3, #20]
 800ab68:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	6839      	ldr	r1, [r7, #0]
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7ff f843 	bl	8009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800ab76:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	6839      	ldr	r1, [r7, #0]
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f7ff f83c 	bl	8009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800ab84:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	2202      	movs	r2, #2
 800ab8a:	6839      	ldr	r1, [r7, #0]
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7ff fc0e 	bl	800a3ae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800ab92:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2200      	movs	r2, #0
 800ab98:	6839      	ldr	r1, [r7, #0]
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7ff f84b 	bl	8009c36 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800aba0:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800aba2:	697b      	ldr	r3, [r7, #20]
 800aba4:	781a      	ldrb	r2, [r3, #0]
 800aba6:	68bb      	ldr	r3, [r7, #8]
 800aba8:	781b      	ldrb	r3, [r3, #0]
 800abaa:	429a      	cmp	r2, r3
 800abac:	d01b      	beq.n	800abe6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xaa>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	695c      	ldr	r4, [r3, #20]
 800abb2:	687d      	ldr	r5, [r7, #4]
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	781b      	ldrb	r3, [r3, #0]
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fa fb07 	bl	80051cc <TfLiteTypeGetName>
 800abbe:	4606      	mov	r6, r0
 800abc0:	68bb      	ldr	r3, [r7, #8]
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7fa fb01 	bl	80051cc <TfLiteTypeGetName>
 800abca:	4603      	mov	r3, r0
 800abcc:	9303      	str	r3, [sp, #12]
 800abce:	9602      	str	r6, [sp, #8]
 800abd0:	4b16      	ldr	r3, [pc, #88]	; (800ac2c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	4b16      	ldr	r3, [pc, #88]	; (800ac30 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 800abd6:	9300      	str	r3, [sp, #0]
 800abd8:	2360      	movs	r3, #96	; 0x60
 800abda:	4a16      	ldr	r2, [pc, #88]	; (800ac34 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 800abdc:	4916      	ldr	r1, [pc, #88]	; (800ac38 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xfc>)
 800abde:	4628      	mov	r0, r5
 800abe0:	47a0      	blx	r4
 800abe2:	2301      	movs	r3, #1
 800abe4:	e01e      	b.n	800ac24 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	781a      	ldrb	r2, [r3, #0]
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	429a      	cmp	r2, r3
 800abf0:	d007      	beq.n	800ac02 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	695b      	ldr	r3, [r3, #20]
 800abf6:	687a      	ldr	r2, [r7, #4]
 800abf8:	4910      	ldr	r1, [pc, #64]	; (800ac3c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x100>)
 800abfa:	4610      	mov	r0, r2
 800abfc:	4798      	blx	r3
 800abfe:	2301      	movs	r3, #1
 800ac00:	e010      	b.n	800ac24 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	69bb      	ldr	r3, [r7, #24]
 800ac06:	7819      	ldrb	r1, [r3, #0]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 800ac0c:	69fb      	ldr	r3, [r7, #28]
 800ac0e:	9303      	str	r3, [sp, #12]
 800ac10:	68bb      	ldr	r3, [r7, #8]
 800ac12:	9302      	str	r3, [sp, #8]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	9301      	str	r3, [sp, #4]
 800ac18:	693b      	ldr	r3, [r7, #16]
 800ac1a:	9300      	str	r3, [sp, #0]
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f7ff ff12 	bl	800aa46 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 800ac22:	4603      	mov	r3, r0
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3724      	adds	r7, #36	; 0x24
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac2c:	08010cd4 	.word	0x08010cd4
 800ac30:	08010ce4 	.word	0x08010ce4
 800ac34:	08010c74 	.word	0x08010c74
 800ac38:	08010cb8 	.word	0x08010cb8
 800ac3c:	08010cf0 	.word	0x08010cf0

0800ac40 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 800ac40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac42:	b0ad      	sub	sp, #180	; 0xb4
 800ac44:	af06      	add	r7, sp, #24
 800ac46:	60f8      	str	r0, [r7, #12]
 800ac48:	60b9      	str	r1, [r7, #8]
 800ac4a:	607a      	str	r2, [r7, #4]
 800ac4c:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	425b      	negs	r3, r3
 800ac54:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 800ac56:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	425b      	negs	r3, r3
 800ac5e:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 800ac60:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	425b      	negs	r3, r3
 800ac74:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	689b      	ldr	r3, [r3, #8]
 800ac7a:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	68db      	ldr	r3, [r3, #12]
 800ac80:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800ac82:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	4618      	mov	r0, r3
 800ac8a:	f7ff f8e8 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800ac8e:	6838      	ldr	r0, [r7, #0]
 800ac90:	f7ff f925 	bl	8009ede <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800ac94:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800ac96:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ac9a:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800ac9e:	4618      	mov	r0, r3
 800aca0:	f7ff f8dd 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800aca4:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800aca8:	f7ff f919 	bl	8009ede <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 800acac:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800acae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800acb2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800acb6:	4618      	mov	r0, r3
 800acb8:	f7ff f8d1 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800acbc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800acc0:	f7ff fb11 	bl	800a2e6 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800acc4:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800acc6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800acca:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800acce:	4618      	mov	r0, r3
 800acd0:	f7ff f8c5 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 800acd4:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800acd8:	f7ff f912 	bl	8009f00 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 800acdc:	4603      	mov	r3, r0
 800acde:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800ace2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800ace6:	f107 0010 	add.w	r0, r7, #16
 800acea:	9304      	str	r3, [sp, #16]
 800acec:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9502      	str	r5, [sp, #8]
 800acf4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	9400      	str	r4, [sp, #0]
 800acfc:	4613      	mov	r3, r2
 800acfe:	4632      	mov	r2, r6
 800ad00:	f7ff fdcd 	bl	800a89e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 800ad04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800ad08:	4618      	mov	r0, r3
 800ad0a:	f7fe fff4 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 800ad0e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800ad12:	4618      	mov	r0, r3
 800ad14:	f7fe ffef 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 800ad18:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	f7fe ffea 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 800ad22:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800ad26:	4618      	mov	r0, r3
 800ad28:	f7fe ffe5 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 800ad2c:	2300      	movs	r3, #0
}
 800ad2e:	4618      	mov	r0, r3
 800ad30:	379c      	adds	r7, #156	; 0x9c
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800ad38 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 800ad38:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad3a:	b0c9      	sub	sp, #292	; 0x124
 800ad3c:	af06      	add	r7, sp, #24
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	f107 0008 	add.w	r0, r7, #8
 800ad44:	6001      	str	r1, [r0, #0]
 800ad46:	1d39      	adds	r1, r7, #4
 800ad48:	600a      	str	r2, [r1, #0]
 800ad4a:	463a      	mov	r2, r7
 800ad4c:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 800ad4e:	463b      	mov	r3, r7
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	691b      	ldr	r3, [r3, #16]
 800ad54:	425b      	negs	r3, r3
 800ad56:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 800ad5a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	425b      	negs	r3, r3
 800ad62:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 800ad66:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ad6a:	691b      	ldr	r3, [r3, #16]
 800ad6c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800ad70:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800ad74:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800ad76:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800ad7a:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800ad7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ad80:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800ad82:	1d3b      	adds	r3, r7, #4
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681b      	ldr	r3, [r3, #0]
 800ad88:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800ad8a:	1d3b      	adds	r3, r7, #4
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	425b      	negs	r3, r3
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800ad94:	1d3b      	adds	r3, r7, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	689b      	ldr	r3, [r3, #8]
 800ad9a:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800ad9c:	1d3b      	adds	r3, r7, #4
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	68db      	ldr	r3, [r3, #12]
 800ada2:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 800ada4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ada8:	781b      	ldrb	r3, [r3, #0]
 800adaa:	2b03      	cmp	r3, #3
 800adac:	d002      	beq.n	800adb4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 800adae:	2b07      	cmp	r3, #7
 800adb0:	d058      	beq.n	800ae64 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 800adb2:	e0af      	b.n	800af14 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800adb4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800adb8:	463b      	mov	r3, r7
 800adba:	6819      	ldr	r1, [r3, #0]
 800adbc:	4610      	mov	r0, r2
 800adbe:	f7ff f84e 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800adc2:	463b      	mov	r3, r7
 800adc4:	6818      	ldr	r0, [r3, #0]
 800adc6:	f7fe ff53 	bl	8009c70 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800adca:	4606      	mov	r6, r0
 800adcc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800add0:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800add4:	4618      	mov	r0, r3
 800add6:	f7ff f842 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800adda:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800adde:	f7fe ff47 	bl	8009c70 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800ade2:	4604      	mov	r4, r0
 800ade4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ade8:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff f836 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800adf2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800adf6:	f7ff fa76 	bl	800a2e6 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800adfa:	4605      	mov	r5, r0
 800adfc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ae00:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800ae04:	4618      	mov	r0, r3
 800ae06:	f7ff f82a 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ae0a:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800ae0e:	f7fe ff40 	bl	8009c92 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 800ae12:	4603      	mov	r3, r0
 800ae14:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800ae18:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800ae1c:	f107 0014 	add.w	r0, r7, #20
 800ae20:	9304      	str	r3, [sp, #16]
 800ae22:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ae26:	9303      	str	r3, [sp, #12]
 800ae28:	9502      	str	r5, [sp, #8]
 800ae2a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	9400      	str	r4, [sp, #0]
 800ae32:	4613      	mov	r3, r2
 800ae34:	4632      	mov	r2, r6
 800ae36:	f7ff fb96 	bl	800a566 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800ae3a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe ff59 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800ae44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f7fe ff54 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800ae4e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800ae52:	4618      	mov	r0, r3
 800ae54:	f7fe ff4f 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800ae58:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f7fe ff4a 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800ae62:	e069      	b.n	800af38 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800ae64:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800ae68:	463b      	mov	r3, r7
 800ae6a:	6819      	ldr	r1, [r3, #0]
 800ae6c:	4610      	mov	r0, r2
 800ae6e:	f7fe fff6 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ae72:	463b      	mov	r3, r7
 800ae74:	6818      	ldr	r0, [r3, #0]
 800ae76:	f7fe fefb 	bl	8009c70 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800ae7a:	4606      	mov	r6, r0
 800ae7c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800ae80:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe ffea 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800ae8a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800ae8e:	f7fe feef 	bl	8009c70 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 800ae92:	4604      	mov	r4, r0
 800ae94:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800ae98:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f7fe ffde 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800aea2:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800aea6:	f7ff fa1e 	bl	800a2e6 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 800aeaa:	4605      	mov	r5, r0
 800aeac:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aeb0:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7fe ffd2 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 800aeba:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800aebe:	f000 f937 	bl	800b130 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 800aec2:	4603      	mov	r3, r0
 800aec4:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800aec8:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800aecc:	f107 0014 	add.w	r0, r7, #20
 800aed0:	9304      	str	r3, [sp, #16]
 800aed2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aed6:	9303      	str	r3, [sp, #12]
 800aed8:	9502      	str	r5, [sp, #8]
 800aeda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aede:	9301      	str	r3, [sp, #4]
 800aee0:	9400      	str	r4, [sp, #0]
 800aee2:	4613      	mov	r3, r2
 800aee4:	4632      	mov	r2, r6
 800aee6:	f7ff fc0d 	bl	800a704 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800aeea:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800aeee:	4618      	mov	r0, r3
 800aef0:	f7fe ff01 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800aef4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800aef8:	4618      	mov	r0, r3
 800aefa:	f7fe fefc 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800aefe:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800af02:	4618      	mov	r0, r3
 800af04:	f7fe fef7 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800af08:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800af0c:	4618      	mov	r0, r3
 800af0e:	f7fe fef2 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800af12:	e011      	b.n	800af38 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	695c      	ldr	r4, [r3, #20]
 800af18:	68fd      	ldr	r5, [r7, #12]
 800af1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	4618      	mov	r0, r3
 800af22:	f7fa f953 	bl	80051cc <TfLiteTypeGetName>
 800af26:	4602      	mov	r2, r0
 800af28:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	4905      	ldr	r1, [pc, #20]	; (800af44 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 800af30:	4628      	mov	r0, r5
 800af32:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800af34:	2301      	movs	r3, #1
 800af36:	e000      	b.n	800af3a <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x202>
  }

  return kTfLiteOk;
 800af38:	2300      	movs	r3, #0
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800af40:	46bd      	mov	sp, r7
 800af42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af44:	08010d68 	.word	0x08010d68

0800af48 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 800af48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af4a:	b0af      	sub	sp, #188	; 0xbc
 800af4c:	af06      	add	r7, sp, #24
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	4613      	mov	r3, r2
 800af56:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800af58:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800af5c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800af60:	79fb      	ldrb	r3, [r7, #7]
 800af62:	4618      	mov	r0, r3
 800af64:	f7ff f902 	bl	800a16c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800af68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800af6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af6e:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800af70:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	4618      	mov	r0, r3
 800af78:	f7fe ff71 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800af7c:	6838      	ldr	r0, [r7, #0]
 800af7e:	f7fe ff8c 	bl	8009e9a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800af82:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 800af84:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800af88:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800af8c:	4618      	mov	r0, r3
 800af8e:	f7fe ff66 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800af92:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800af96:	f7fe ff80 	bl	8009e9a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800af9a:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800af9c:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800afa0:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800afa4:	4618      	mov	r0, r3
 800afa6:	f7fe ff5a 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800afaa:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800afae:	f7fe ff74 	bl	8009e9a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 800afb2:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800afb4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800afb8:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800afbc:	4618      	mov	r0, r3
 800afbe:	f7fe ff4e 	bl	8009e5e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 800afc2:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800afc6:	f7fe ff79 	bl	8009ebc <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 800afca:	4603      	mov	r3, r0
 800afcc:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800afd0:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800afd4:	f107 0010 	add.w	r0, r7, #16
 800afd8:	9304      	str	r3, [sp, #16]
 800afda:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800afde:	9303      	str	r3, [sp, #12]
 800afe0:	9502      	str	r5, [sp, #8]
 800afe2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800afe6:	9301      	str	r3, [sp, #4]
 800afe8:	9400      	str	r4, [sp, #0]
 800afea:	4613      	mov	r3, r2
 800afec:	4632      	mov	r2, r6
 800afee:	f7ff fa24 	bl	800a43a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 800aff2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800aff6:	4618      	mov	r0, r3
 800aff8:	f7fe fe7d 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
 800affc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b000:	4618      	mov	r0, r3
 800b002:	f7fe fe78 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 800b006:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b00a:	4618      	mov	r0, r3
 800b00c:	f7fe fe73 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 800b010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b014:	4618      	mov	r0, r3
 800b016:	f7fe fe6e 	bl	8009cf6 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	37a4      	adds	r7, #164	; 0xa4
 800b020:	46bd      	mov	sp, r7
 800b022:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b024 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800b024:	b5b0      	push	{r4, r5, r7, lr}
 800b026:	b08c      	sub	sp, #48	; 0x30
 800b028:	af04      	add	r7, sp, #16
 800b02a:	6078      	str	r0, [r7, #4]
 800b02c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	695b      	ldr	r3, [r3, #20]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d101      	bne.n	800b03a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800b036:	f000 fd51 	bl	800badc <abort>
  const auto* params =
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	695b      	ldr	r3, [r3, #20]
 800b03e:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2200      	movs	r2, #0
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	4618      	mov	r0, r3
 800b048:	f7fe fdd8 	bl	8009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b04c:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2201      	movs	r2, #1
 800b052:	6839      	ldr	r1, [r7, #0]
 800b054:	4618      	mov	r0, r3
 800b056:	f7fe fdd1 	bl	8009bfc <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b05a:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2202      	movs	r2, #2
 800b060:	6839      	ldr	r1, [r7, #0]
 800b062:	4618      	mov	r0, r3
 800b064:	f7ff f9a3 	bl	800a3ae <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 800b068:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe fde0 	bl	8009c36 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b076:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	691b      	ldr	r3, [r3, #16]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d101      	bne.n	800b084 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x60>
 800b080:	f000 fd2c 	bl	800badc <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	691b      	ldr	r3, [r3, #16]
 800b088:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b03      	cmp	r3, #3
 800b090:	d020      	beq.n	800b0d4 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 800b092:	2b09      	cmp	r3, #9
 800b094:	d010      	beq.n	800b0b8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 800b096:	2b01      	cmp	r3, #1
 800b098:	d12a      	bne.n	800b0f0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800b09a:	6878      	ldr	r0, [r7, #4]
 800b09c:	69fb      	ldr	r3, [r7, #28]
 800b09e:	781a      	ldrb	r2, [r3, #0]
                       output);
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	9302      	str	r3, [sp, #8]
 800b0a4:	693b      	ldr	r3, [r7, #16]
 800b0a6:	9301      	str	r3, [sp, #4]
 800b0a8:	697b      	ldr	r3, [r7, #20]
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	69bb      	ldr	r3, [r7, #24]
 800b0ae:	6839      	ldr	r1, [r7, #0]
 800b0b0:	f7ff ff4a 	bl	800af48 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	e02a      	b.n	800b10e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800b0b8:	6878      	ldr	r0, [r7, #4]
                               output);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	9302      	str	r3, [sp, #8]
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	9301      	str	r3, [sp, #4]
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	9300      	str	r3, [sp, #0]
 800b0c6:	69bb      	ldr	r3, [r7, #24]
 800b0c8:	68ba      	ldr	r2, [r7, #8]
 800b0ca:	6839      	ldr	r1, [r7, #0]
 800b0cc:	f7ff fdb8 	bl	800ac40 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	e01c      	b.n	800b10e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	9302      	str	r3, [sp, #8]
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	9301      	str	r3, [sp, #4]
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	9300      	str	r3, [sp, #0]
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	68ba      	ldr	r2, [r7, #8]
 800b0e6:	6839      	ldr	r1, [r7, #0]
 800b0e8:	f7ff fe26 	bl	800ad38 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 800b0ec:	4603      	mov	r3, r0
 800b0ee:	e00e      	b.n	800b10e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	695c      	ldr	r4, [r3, #20]
 800b0f4:	687d      	ldr	r5, [r7, #4]
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	f7fa f866 	bl	80051cc <TfLiteTypeGetName>
 800b100:	4602      	mov	r2, r0
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	4904      	ldr	r1, [pc, #16]	; (800b118 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 800b108:	4628      	mov	r0, r5
 800b10a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800b10c:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800b10e:	4618      	mov	r0, r3
 800b110:	3720      	adds	r7, #32
 800b112:	46bd      	mov	sp, r7
 800b114:	bdb0      	pop	{r4, r5, r7, pc}
 800b116:	bf00      	nop
 800b118:	08010d68 	.word	0x08010d68

0800b11c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 800b11c:	b480      	push	{r7}
 800b11e:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 800b120:	4b02      	ldr	r3, [pc, #8]	; (800b12c <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 800b122:	4618      	mov	r0, r3
 800b124:	46bd      	mov	sp, r7
 800b126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12a:	4770      	bx	lr
 800b12c:	20000018 	.word	0x20000018

0800b130 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800b130:	b480      	push	{r7}
 800b132:	b083      	sub	sp, #12
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	685b      	ldr	r3, [r3, #4]
 800b142:	e000      	b.n	800b146 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 800b144:	2300      	movs	r3, #0
}
 800b146:	4618      	mov	r0, r3
 800b148:	370c      	adds	r7, #12
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr
	...

0800b154 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800b154:	b480      	push	{r7}
 800b156:	b083      	sub	sp, #12
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	4a04      	ldr	r2, [pc, #16]	; (800b170 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	601a      	str	r2, [r3, #0]
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	4618      	mov	r0, r3
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr
 800b170:	080dd2b4 	.word	0x080dd2b4

0800b174 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800b174:	b480      	push	{r7}
 800b176:	b083      	sub	sp, #12
 800b178:	af00      	add	r7, sp, #0
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	4a04      	ldr	r2, [pc, #16]	; (800b190 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	4618      	mov	r0, r3
 800b186:	370c      	adds	r7, #12
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr
 800b190:	080dd2b4 	.word	0x080dd2b4

0800b194 <_ZN6tflite13MemoryPlannerD0Ev>:
 800b194:	b580      	push	{r7, lr}
 800b196:	b082      	sub	sp, #8
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f7ff ffe9 	bl	800b174 <_ZN6tflite13MemoryPlannerD1Ev>
 800b1a2:	2104      	movs	r1, #4
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f000 fbb4 	bl	800b912 <_ZdlPvj>
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	3708      	adds	r7, #8
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800b1ba:	2328      	movs	r3, #40	; 0x28
 800b1bc:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800b1be:	2328      	movs	r3, #40	; 0x28
  }
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	370c      	adds	r7, #12
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800b1cc:	b480      	push	{r7}
 800b1ce:	b089      	sub	sp, #36	; 0x24
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800b1d8:	2300      	movs	r3, #0
 800b1da:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800b1dc:	2301      	movs	r3, #1
 800b1de:	61bb      	str	r3, [r7, #24]
 800b1e0:	69ba      	ldr	r2, [r7, #24]
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	429a      	cmp	r2, r3
 800b1e6:	da4c      	bge.n	800b282 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800b1e8:	69bb      	ldr	r3, [r7, #24]
 800b1ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b1ee:	3b01      	subs	r3, #1
 800b1f0:	009b      	lsls	r3, r3, #2
 800b1f2:	68fa      	ldr	r2, [r7, #12]
 800b1f4:	4413      	add	r3, r2
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	009b      	lsls	r3, r3, #2
 800b1fc:	68f9      	ldr	r1, [r7, #12]
 800b1fe:	440b      	add	r3, r1
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	da39      	bge.n	800b27a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b20c:	3b01      	subs	r3, #1
 800b20e:	009b      	lsls	r3, r3, #2
 800b210:	68fa      	ldr	r2, [r7, #12]
 800b212:	4413      	add	r3, r2
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	441a      	add	r2, r3
 800b220:	69bb      	ldr	r3, [r7, #24]
 800b222:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b226:	3b01      	subs	r3, #1
 800b228:	009b      	lsls	r3, r3, #2
 800b22a:	68f9      	ldr	r1, [r7, #12]
 800b22c:	440b      	add	r3, r1
 800b22e:	6812      	ldr	r2, [r2, #0]
 800b230:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	009b      	lsls	r3, r3, #2
 800b236:	68fa      	ldr	r2, [r7, #12]
 800b238:	4413      	add	r3, r2
 800b23a:	697a      	ldr	r2, [r7, #20]
 800b23c:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800b23e:	69bb      	ldr	r3, [r7, #24]
 800b240:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b244:	3b01      	subs	r3, #1
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	68ba      	ldr	r2, [r7, #8]
 800b24a:	4413      	add	r3, r2
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	009b      	lsls	r3, r3, #2
 800b254:	68ba      	ldr	r2, [r7, #8]
 800b256:	441a      	add	r2, r3
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b25e:	3b01      	subs	r3, #1
 800b260:	009b      	lsls	r3, r3, #2
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	440b      	add	r3, r1
 800b266:	6812      	ldr	r2, [r2, #0]
 800b268:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800b26a:	69bb      	ldr	r3, [r7, #24]
 800b26c:	009b      	lsls	r3, r3, #2
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	4413      	add	r3, r2
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800b276:	2301      	movs	r3, #1
 800b278:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	3301      	adds	r3, #1
 800b27e:	61bb      	str	r3, [r7, #24]
 800b280:	e7ae      	b.n	800b1e0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800b282:	7ffb      	ldrb	r3, [r7, #31]
 800b284:	2b00      	cmp	r3, #0
 800b286:	d000      	beq.n	800b28a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800b288:	e7a6      	b.n	800b1d8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800b28a:	bf00      	nop
 800b28c:	3724      	adds	r7, #36	; 0x24
 800b28e:	46bd      	mov	sp, r7
 800b290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b294:	4770      	bx	lr
	...

0800b298 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800b298:	b590      	push	{r4, r7, lr}
 800b29a:	b087      	sub	sp, #28
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f7ff ff54 	bl	800b154 <_ZN6tflite13MemoryPlannerC1Ev>
 800b2ac:	4a22      	ldr	r2, [pc, #136]	; (800b338 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	601a      	str	r2, [r3, #0]
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	609a      	str	r2, [r3, #8]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800b2c0:	687c      	ldr	r4, [r7, #4]
 800b2c2:	f7ff ff77 	bl	800b1b4 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800b2c6:	4603      	mov	r3, r0
 800b2c8:	fbb4 f3f3 	udiv	r3, r4, r3
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	697a      	ldr	r2, [r7, #20]
 800b2da:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	011b      	lsls	r3, r3, #4
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	685b      	ldr	r3, [r3, #4]
 800b2f2:	009b      	lsls	r3, r3, #2
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	697a      	ldr	r2, [r7, #20]
 800b2fe:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	685b      	ldr	r3, [r3, #4]
 800b304:	009b      	lsls	r3, r3, #2
 800b306:	697a      	ldr	r2, [r7, #20]
 800b308:	4413      	add	r3, r2
 800b30a:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	697a      	ldr	r2, [r7, #20]
 800b310:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	685b      	ldr	r3, [r3, #4]
 800b316:	461a      	mov	r2, r3
 800b318:	4613      	mov	r3, r2
 800b31a:	005b      	lsls	r3, r3, #1
 800b31c:	4413      	add	r3, r2
 800b31e:	009b      	lsls	r3, r3, #2
 800b320:	461a      	mov	r2, r3
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	4413      	add	r3, r2
 800b326:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	697a      	ldr	r2, [r7, #20]
 800b32c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	4618      	mov	r0, r3
 800b332:	371c      	adds	r7, #28
 800b334:	46bd      	mov	sp, r7
 800b336:	bd90      	pop	{r4, r7, pc}
 800b338:	080dd294 	.word	0x080dd294

0800b33c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
 800b344:	4a05      	ldr	r2, [pc, #20]	; (800b35c <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	601a      	str	r2, [r3, #0]
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7ff ff11 	bl	800b174 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	4618      	mov	r0, r3
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}
 800b35c:	080dd294 	.word	0x080dd294

0800b360 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
}
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff ffe7 	bl	800b33c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800b36e:	212c      	movs	r1, #44	; 0x2c
 800b370:	6878      	ldr	r0, [r7, #4]
 800b372:	f000 face 	bl	800b912 <_ZdlPvj>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	4618      	mov	r0, r3
 800b37a:	3708      	adds	r7, #8
 800b37c:	46bd      	mov	sp, r7
 800b37e:	bd80      	pop	{r7, pc}

0800b380 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	60f8      	str	r0, [r7, #12]
 800b388:	60b9      	str	r1, [r7, #8]
 800b38a:	607a      	str	r2, [r7, #4]
 800b38c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	685b      	ldr	r3, [r3, #4]
 800b396:	429a      	cmp	r2, r3
 800b398:	db08      	blt.n	800b3ac <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	4913      	ldr	r1, [pc, #76]	; (800b3f0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800b3a2:	68b8      	ldr	r0, [r7, #8]
 800b3a4:	f7f9 ff70 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e01d      	b.n	800b3e8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	68da      	ldr	r2, [r3, #12]
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	011b      	lsls	r3, r3, #4
 800b3b6:	4413      	add	r3, r2
 800b3b8:	617b      	str	r3, [r7, #20]
  current->size = size;
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800b3c0:	697b      	ldr	r3, [r7, #20]
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	6a3a      	ldr	r2, [r7, #32]
 800b3ca:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800b3cc:	697b      	ldr	r3, [r7, #20]
 800b3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800b3d2:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	689b      	ldr	r3, [r3, #8]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3718      	adds	r7, #24
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	08010e0c 	.word	0x08010e0c

0800b3f4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800b3f4:	b590      	push	{r4, r7, lr}
 800b3f6:	b089      	sub	sp, #36	; 0x24
 800b3f8:	af02      	add	r7, sp, #8
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
 800b400:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	68da      	ldr	r2, [r3, #12]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	689b      	ldr	r3, [r3, #8]
 800b40a:	011b      	lsls	r3, r3, #4
 800b40c:	4413      	add	r3, r2
 800b40e:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3308      	adds	r3, #8
 800b416:	681c      	ldr	r4, [r3, #0]
 800b418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	687a      	ldr	r2, [r7, #4]
 800b420:	68b9      	ldr	r1, [r7, #8]
 800b422:	68f8      	ldr	r0, [r7, #12]
 800b424:	47a0      	blx	r4
 800b426:	4603      	mov	r3, r0
 800b428:	2b00      	cmp	r3, #0
 800b42a:	bf14      	ite	ne
 800b42c:	2301      	movne	r3, #1
 800b42e:	2300      	moveq	r3, #0
 800b430:	b2db      	uxtb	r3, r3
 800b432:	2b00      	cmp	r3, #0
 800b434:	d001      	beq.n	800b43a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800b436:	2301      	movs	r3, #1
 800b438:	e003      	b.n	800b442 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b43e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800b440:	2300      	movs	r3, #0
}
 800b442:	4618      	mov	r0, r3
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	bd90      	pop	{r4, r7, pc}

0800b44a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800b44a:	b480      	push	{r7}
 800b44c:	b087      	sub	sp, #28
 800b44e:	af00      	add	r7, sp, #0
 800b450:	60f8      	str	r0, [r7, #12]
 800b452:	60b9      	str	r1, [r7, #8]
 800b454:	607a      	str	r2, [r7, #4]
 800b456:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	68da      	ldr	r2, [r3, #12]
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	685b      	ldr	r3, [r3, #4]
 800b460:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800b462:	4413      	add	r3, r2
 800b464:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	689b      	ldr	r3, [r3, #8]
 800b46a:	683a      	ldr	r2, [r7, #0]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	da01      	bge.n	800b474 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800b470:	2300      	movs	r3, #0
 800b472:	e007      	b.n	800b484 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	687a      	ldr	r2, [r7, #4]
 800b47a:	429a      	cmp	r2, r3
 800b47c:	dd01      	ble.n	800b482 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800b47e:	2300      	movs	r3, #0
 800b480:	e000      	b.n	800b484 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800b482:	2301      	movs	r3, #1
}
 800b484:	4618      	mov	r0, r3
 800b486:	371c      	adds	r7, #28
 800b488:	46bd      	mov	sp, r7
 800b48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48e:	4770      	bx	lr

0800b490 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	60f8      	str	r0, [r7, #12]
 800b498:	60b9      	str	r1, [r7, #8]
 800b49a:	607a      	str	r2, [r7, #4]
 800b49c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800b49e:	2300      	movs	r3, #0
 800b4a0:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d10b      	bne.n	800b4c0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	699a      	ldr	r2, [r3, #24]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6a1b      	ldr	r3, [r3, #32]
 800b4b0:	4619      	mov	r1, r3
 800b4b2:	460b      	mov	r3, r1
 800b4b4:	005b      	lsls	r3, r3, #1
 800b4b6:	440b      	add	r3, r1
 800b4b8:	009b      	lsls	r3, r3, #2
 800b4ba:	4413      	add	r3, r2
 800b4bc:	613b      	str	r3, [r7, #16]
 800b4be:	e011      	b.n	800b4e4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800b4c0:	68bb      	ldr	r3, [r7, #8]
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c8:	d101      	bne.n	800b4ce <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e029      	b.n	800b522 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800b4ce:	68fb      	ldr	r3, [r7, #12]
 800b4d0:	699a      	ldr	r2, [r3, #24]
 800b4d2:	68bb      	ldr	r3, [r7, #8]
 800b4d4:	689b      	ldr	r3, [r3, #8]
 800b4d6:	4619      	mov	r1, r3
 800b4d8:	460b      	mov	r3, r1
 800b4da:	005b      	lsls	r3, r3, #1
 800b4dc:	440b      	add	r3, r1
 800b4de:	009b      	lsls	r3, r3, #2
 800b4e0:	4413      	add	r3, r2
 800b4e2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	6939      	ldr	r1, [r7, #16]
 800b4ea:	68f8      	ldr	r0, [r7, #12]
 800b4ec:	f7ff ffad 	bl	800b44a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d002      	beq.n	800b4fc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800b4f6:	693b      	ldr	r3, [r7, #16]
 800b4f8:	617b      	str	r3, [r7, #20]
      break;
 800b4fa:	e011      	b.n	800b520 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800b4fc:	693b      	ldr	r3, [r7, #16]
 800b4fe:	689b      	ldr	r3, [r3, #8]
 800b500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b504:	d00b      	beq.n	800b51e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	699a      	ldr	r2, [r3, #24]
 800b50a:	693b      	ldr	r3, [r7, #16]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	4619      	mov	r1, r3
 800b510:	460b      	mov	r3, r1
 800b512:	005b      	lsls	r3, r3, #1
 800b514:	440b      	add	r3, r1
 800b516:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800b518:	4413      	add	r3, r2
 800b51a:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800b51c:	e7e2      	b.n	800b4e4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800b51e:	bf00      	nop
  } while (true);
  return result;
 800b520:	697b      	ldr	r3, [r7, #20]
}
 800b522:	4618      	mov	r0, r3
 800b524:	3718      	adds	r7, #24
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b098      	sub	sp, #96	; 0x60
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b538:	f083 0301 	eor.w	r3, r3, #1
 800b53c:	b2db      	uxtb	r3, r3
 800b53e:	2b00      	cmp	r3, #0
 800b540:	f040 815f 	bne.w	800b802 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	f000 815a 	beq.w	800b802 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800b55c:	2300      	movs	r3, #0
 800b55e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800b560:	2300      	movs	r3, #0
 800b562:	657b      	str	r3, [r7, #84]	; 0x54
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	689b      	ldr	r3, [r3, #8]
 800b568:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b56a:	429a      	cmp	r2, r3
 800b56c:	da4d      	bge.n	800b60a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	68da      	ldr	r2, [r3, #12]
 800b572:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b574:	011b      	lsls	r3, r3, #4
 800b576:	4413      	add	r3, r2
 800b578:	685b      	ldr	r3, [r3, #4]
 800b57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b57e:	d11e      	bne.n	800b5be <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800b580:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b582:	3b01      	subs	r3, #1
 800b584:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	68da      	ldr	r2, [r3, #12]
 800b58a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b58c:	011b      	lsls	r3, r3, #4
 800b58e:	441a      	add	r2, r3
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6919      	ldr	r1, [r3, #16]
 800b594:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b596:	009b      	lsls	r3, r3, #2
 800b598:	440b      	add	r3, r1
 800b59a:	6812      	ldr	r2, [r2, #0]
 800b59c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	695a      	ldr	r2, [r3, #20]
 800b5a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b5a4:	009b      	lsls	r3, r3, #2
 800b5a6:	4413      	add	r3, r2
 800b5a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5aa:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b5b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5b2:	009b      	lsls	r3, r3, #2
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f04f 32ff 	mov.w	r2, #4294967295
 800b5ba:	601a      	str	r2, [r3, #0]
 800b5bc:	e021      	b.n	800b602 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5c4:	011b      	lsls	r3, r3, #4
 800b5c6:	441a      	add	r2, r3
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6919      	ldr	r1, [r3, #16]
 800b5cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5ce:	009b      	lsls	r3, r3, #2
 800b5d0:	440b      	add	r3, r1
 800b5d2:	6812      	ldr	r2, [r2, #0]
 800b5d4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	695a      	ldr	r2, [r3, #20]
 800b5da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5dc:	009b      	lsls	r3, r3, #2
 800b5de:	4413      	add	r3, r2
 800b5e0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b5e2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	68da      	ldr	r2, [r3, #12]
 800b5e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5ea:	011b      	lsls	r3, r3, #4
 800b5ec:	441a      	add	r2, r3
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800b5f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5f4:	009b      	lsls	r3, r3, #2
 800b5f6:	440b      	add	r3, r1
 800b5f8:	6852      	ldr	r2, [r2, #4]
 800b5fa:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800b5fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b5fe:	3301      	adds	r3, #1
 800b600:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800b602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b604:	3301      	adds	r3, #1
 800b606:	657b      	str	r3, [r7, #84]	; 0x54
 800b608:	e7ac      	b.n	800b564 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691a      	ldr	r2, [r3, #16]
 800b60e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	695a      	ldr	r2, [r3, #20]
 800b618:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b61a:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b61c:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800b622:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b624:	1ad3      	subs	r3, r2, r3
 800b626:	461a      	mov	r2, r3
 800b628:	f7ff fdd0 	bl	800b1cc <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	2200      	movs	r2, #0
 800b630:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	2201      	movs	r2, #1
 800b636:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	699a      	ldr	r2, [r3, #24]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	4619      	mov	r1, r3
 800b642:	460b      	mov	r3, r1
 800b644:	005b      	lsls	r3, r3, #1
 800b646:	440b      	add	r3, r1
 800b648:	009b      	lsls	r3, r3, #2
 800b64a:	4413      	add	r3, r2
 800b64c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800b64e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b650:	f04f 32ff 	mov.w	r2, #4294967295
 800b654:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	695b      	ldr	r3, [r3, #20]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800b65e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b660:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b662:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68da      	ldr	r2, [r3, #12]
 800b668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b66a:	011b      	lsls	r3, r3, #4
 800b66c:	4413      	add	r3, r2
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b674:	d106      	bne.n	800b684 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b67a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b67c:	009b      	lsls	r3, r3, #2
 800b67e:	4413      	add	r3, r2
 800b680:	2200      	movs	r2, #0
 800b682:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b68a:	009b      	lsls	r3, r3, #2
 800b68c:	4413      	add	r3, r2
 800b68e:	681a      	ldr	r2, [r3, #0]
 800b690:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b692:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800b694:	2301      	movs	r3, #1
 800b696:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	689b      	ldr	r3, [r3, #8]
 800b69c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b69e:	429a      	cmp	r2, r3
 800b6a0:	f280 80b0 	bge.w	800b804 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	695a      	ldr	r2, [r3, #20]
 800b6a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6aa:	009b      	lsls	r3, r3, #2
 800b6ac:	4413      	add	r3, r2
 800b6ae:	681b      	ldr	r3, [r3, #0]
 800b6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	68da      	ldr	r2, [r3, #12]
 800b6b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b6b8:	011b      	lsls	r3, r3, #4
 800b6ba:	4413      	add	r3, r2
 800b6bc:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800b6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c0:	681b      	ldr	r3, [r3, #0]
 800b6c2:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800b6c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c6:	689b      	ldr	r3, [r3, #8]
 800b6c8:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800b6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6cc:	68db      	ldr	r3, [r3, #12]
 800b6ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800b6d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6d6:	685b      	ldr	r3, [r3, #4]
 800b6d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6dc:	d12d      	bne.n	800b73a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800b6de:	2300      	movs	r3, #0
 800b6e0:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 800b6e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f7ff fed1 	bl	800b490 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800b6ee:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 800b6f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d012      	beq.n	800b71c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	68da      	ldr	r2, [r3, #12]
 800b6fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800b700:	4413      	add	r3, r2
 800b702:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800b704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70a:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800b70c:	4413      	add	r3, r2
 800b70e:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800b710:	6a3a      	ldr	r2, [r7, #32]
 800b712:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b714:	429a      	cmp	r2, r3
 800b716:	dd01      	ble.n	800b71c <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800b718:	6a3b      	ldr	r3, [r7, #32]
 800b71a:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800b71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d00f      	beq.n	800b742 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800b722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b728:	1ad3      	subs	r3, r2, r3
 800b72a:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800b72c:	69fa      	ldr	r2, [r7, #28]
 800b72e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b730:	429a      	cmp	r2, r3
 800b732:	da08      	bge.n	800b746 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800b734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b736:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800b738:	e7d3      	b.n	800b6e2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800b73a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b740:	e002      	b.n	800b748 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800b742:	bf00      	nop
 800b744:	e000      	b.n	800b748 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800b746:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b74e:	009b      	lsls	r3, r3, #2
 800b750:	4413      	add	r3, r2
 800b752:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b754:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	699a      	ldr	r2, [r3, #24]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	69db      	ldr	r3, [r3, #28]
 800b75e:	4619      	mov	r1, r3
 800b760:	460b      	mov	r3, r1
 800b762:	005b      	lsls	r3, r3, #1
 800b764:	440b      	add	r3, r1
 800b766:	009b      	lsls	r3, r3, #2
 800b768:	4413      	add	r3, r2
 800b76a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b770:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b776:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	69db      	ldr	r3, [r3, #28]
 800b77c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	69db      	ldr	r3, [r3, #28]
 800b782:	1c5a      	adds	r2, r3, #1
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800b788:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b78e:	429a      	cmp	r2, r3
 800b790:	da09      	bge.n	800b7a6 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6a1a      	ldr	r2, [r3, #32]
 800b79a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b79c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	697a      	ldr	r2, [r7, #20]
 800b7a2:	621a      	str	r2, [r3, #32]
 800b7a4:	e029      	b.n	800b7fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800b7a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b7a8:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800b7aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b6:	d107      	bne.n	800b7c8 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800b7b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ba:	697a      	ldr	r2, [r7, #20]
 800b7bc:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	f04f 32ff 	mov.w	r2, #4294967295
 800b7c4:	609a      	str	r2, [r3, #8]
          break;
 800b7c6:	e018      	b.n	800b7fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6999      	ldr	r1, [r3, #24]
 800b7cc:	693a      	ldr	r2, [r7, #16]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	005b      	lsls	r3, r3, #1
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	da07      	bge.n	800b7f4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800b7e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7e6:	689a      	ldr	r2, [r3, #8]
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800b7ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b7ee:	697a      	ldr	r2, [r7, #20]
 800b7f0:	609a      	str	r2, [r3, #8]
          break;
 800b7f2:	e002      	b.n	800b7fa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800b7f8:	e7d7      	b.n	800b7aa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800b7fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b800:	e74a      	b.n	800b698 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800b802:	bf00      	nop
    }
  }
}
 800b804:	3760      	adds	r7, #96	; 0x60
 800b806:	46bd      	mov	sp, r7
 800b808:	bd80      	pop	{r7, pc}

0800b80a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800b80a:	b580      	push	{r7, lr}
 800b80c:	b086      	sub	sp, #24
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800b812:	6878      	ldr	r0, [r7, #4]
 800b814:	f7ff fe89 	bl	800b52a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800b820:	2300      	movs	r3, #0
 800b822:	e035      	b.n	800b890 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	699a      	ldr	r2, [r3, #24]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6a1b      	ldr	r3, [r3, #32]
 800b82c:	4619      	mov	r1, r3
 800b82e:	460b      	mov	r3, r1
 800b830:	005b      	lsls	r3, r3, #1
 800b832:	440b      	add	r3, r1
 800b834:	009b      	lsls	r3, r3, #2
 800b836:	4413      	add	r3, r2
 800b838:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	613b      	str	r3, [r7, #16]
  while (entry) {
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d024      	beq.n	800b88e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	68da      	ldr	r2, [r3, #12]
 800b848:	697b      	ldr	r3, [r7, #20]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800b84e:	4413      	add	r3, r2
 800b850:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	681a      	ldr	r2, [r3, #0]
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4413      	add	r3, r2
 800b85c:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800b85e:	68ba      	ldr	r2, [r7, #8]
 800b860:	693b      	ldr	r3, [r7, #16]
 800b862:	429a      	cmp	r2, r3
 800b864:	d901      	bls.n	800b86a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800b866:	68bb      	ldr	r3, [r7, #8]
 800b868:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b872:	d00b      	beq.n	800b88c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	699a      	ldr	r2, [r3, #24]
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	4619      	mov	r1, r3
 800b87e:	460b      	mov	r3, r1
 800b880:	005b      	lsls	r3, r3, #1
 800b882:	440b      	add	r3, r1
 800b884:	009b      	lsls	r3, r3, #2
 800b886:	4413      	add	r3, r2
 800b888:	617b      	str	r3, [r7, #20]
  while (entry) {
 800b88a:	e7d8      	b.n	800b83e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800b88c:	bf00      	nop
  }
  return max_size;
 800b88e:	693b      	ldr	r3, [r7, #16]
}
 800b890:	4618      	mov	r0, r3
 800b892:	3718      	adds	r7, #24
 800b894:	46bd      	mov	sp, r7
 800b896:	bd80      	pop	{r7, pc}

0800b898 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800b898:	b480      	push	{r7}
 800b89a:	b083      	sub	sp, #12
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	60b9      	str	r1, [r7, #8]
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff fe33 	bl	800b52a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	db04      	blt.n	800b8d4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	687a      	ldr	r2, [r7, #4]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	db08      	blt.n	800b8e6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	689b      	ldr	r3, [r3, #8]
 800b8d8:	687a      	ldr	r2, [r7, #4]
 800b8da:	4909      	ldr	r1, [pc, #36]	; (800b900 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800b8dc:	68b8      	ldr	r0, [r7, #8]
 800b8de:	f7f9 fcd3 	bl	8005288 <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e008      	b.n	800b8f8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	681a      	ldr	r2, [r3, #0]
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3710      	adds	r7, #16
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	08010e9c 	.word	0x08010e9c

0800b904 <_ZdaPv>:
 800b904:	f000 b830 	b.w	800b968 <_ZdlPv>

0800b908 <__cxa_pure_virtual>:
 800b908:	b508      	push	{r3, lr}
 800b90a:	f000 f83b 	bl	800b984 <_ZSt9terminatev>

0800b90e <_Znaj>:
 800b90e:	f000 b802 	b.w	800b916 <_Znwj>

0800b912 <_ZdlPvj>:
 800b912:	f000 b829 	b.w	800b968 <_ZdlPv>

0800b916 <_Znwj>:
 800b916:	b510      	push	{r4, lr}
 800b918:	2800      	cmp	r0, #0
 800b91a:	bf14      	ite	ne
 800b91c:	4604      	movne	r4, r0
 800b91e:	2401      	moveq	r4, #1
 800b920:	4620      	mov	r0, r4
 800b922:	f000 f943 	bl	800bbac <malloc>
 800b926:	b930      	cbnz	r0, 800b936 <_Znwj+0x20>
 800b928:	f000 f816 	bl	800b958 <_ZSt15get_new_handlerv>
 800b92c:	b908      	cbnz	r0, 800b932 <_Znwj+0x1c>
 800b92e:	f000 f8d5 	bl	800badc <abort>
 800b932:	4780      	blx	r0
 800b934:	e7f4      	b.n	800b920 <_Znwj+0xa>
 800b936:	bd10      	pop	{r4, pc}

0800b938 <__cxa_guard_acquire>:
 800b938:	6803      	ldr	r3, [r0, #0]
 800b93a:	07db      	lsls	r3, r3, #31
 800b93c:	d406      	bmi.n	800b94c <__cxa_guard_acquire+0x14>
 800b93e:	7843      	ldrb	r3, [r0, #1]
 800b940:	b103      	cbz	r3, 800b944 <__cxa_guard_acquire+0xc>
 800b942:	deff      	udf	#255	; 0xff
 800b944:	2301      	movs	r3, #1
 800b946:	7043      	strb	r3, [r0, #1]
 800b948:	4618      	mov	r0, r3
 800b94a:	4770      	bx	lr
 800b94c:	2000      	movs	r0, #0
 800b94e:	4770      	bx	lr

0800b950 <__cxa_guard_release>:
 800b950:	2301      	movs	r3, #1
 800b952:	6003      	str	r3, [r0, #0]
 800b954:	4770      	bx	lr
	...

0800b958 <_ZSt15get_new_handlerv>:
 800b958:	4b02      	ldr	r3, [pc, #8]	; (800b964 <_ZSt15get_new_handlerv+0xc>)
 800b95a:	6818      	ldr	r0, [r3, #0]
 800b95c:	f3bf 8f5b 	dmb	ish
 800b960:	4770      	bx	lr
 800b962:	bf00      	nop
 800b964:	20000e10 	.word	0x20000e10

0800b968 <_ZdlPv>:
 800b968:	f000 b928 	b.w	800bbbc <free>

0800b96c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800b96c:	b508      	push	{r3, lr}
 800b96e:	4780      	blx	r0
 800b970:	f000 f8b4 	bl	800badc <abort>

0800b974 <_ZSt13get_terminatev>:
 800b974:	4b02      	ldr	r3, [pc, #8]	; (800b980 <_ZSt13get_terminatev+0xc>)
 800b976:	6818      	ldr	r0, [r3, #0]
 800b978:	f3bf 8f5b 	dmb	ish
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	20000038 	.word	0x20000038

0800b984 <_ZSt9terminatev>:
 800b984:	b508      	push	{r3, lr}
 800b986:	f7ff fff5 	bl	800b974 <_ZSt13get_terminatev>
 800b98a:	f7ff ffef 	bl	800b96c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800b990 <frexp>:
 800b990:	b570      	push	{r4, r5, r6, lr}
 800b992:	2100      	movs	r1, #0
 800b994:	ec55 4b10 	vmov	r4, r5, d0
 800b998:	6001      	str	r1, [r0, #0]
 800b99a:	4916      	ldr	r1, [pc, #88]	; (800b9f4 <frexp+0x64>)
 800b99c:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b9a0:	428b      	cmp	r3, r1
 800b9a2:	4606      	mov	r6, r0
 800b9a4:	462a      	mov	r2, r5
 800b9a6:	dc22      	bgt.n	800b9ee <frexp+0x5e>
 800b9a8:	ee10 1a10 	vmov	r1, s0
 800b9ac:	4319      	orrs	r1, r3
 800b9ae:	d01e      	beq.n	800b9ee <frexp+0x5e>
 800b9b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b9b4:	da0d      	bge.n	800b9d2 <frexp+0x42>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	4b0f      	ldr	r3, [pc, #60]	; (800b9f8 <frexp+0x68>)
 800b9ba:	ee10 0a10 	vmov	r0, s0
 800b9be:	4629      	mov	r1, r5
 800b9c0:	f7f4 fe2a 	bl	8000618 <__aeabi_dmul>
 800b9c4:	460a      	mov	r2, r1
 800b9c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800b9ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	6031      	str	r1, [r6, #0]
 800b9d2:	6831      	ldr	r1, [r6, #0]
 800b9d4:	151b      	asrs	r3, r3, #20
 800b9d6:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800b9da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b9de:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800b9e2:	440b      	add	r3, r1
 800b9e4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b9e8:	6033      	str	r3, [r6, #0]
 800b9ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800b9ee:	ec45 4b10 	vmov	d0, r4, r5
 800b9f2:	bd70      	pop	{r4, r5, r6, pc}
 800b9f4:	7fefffff 	.word	0x7fefffff
 800b9f8:	43500000 	.word	0x43500000

0800b9fc <round>:
 800b9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9fe:	ec57 6b10 	vmov	r6, r7, d0
 800ba02:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800ba06:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800ba0a:	2c13      	cmp	r4, #19
 800ba0c:	463b      	mov	r3, r7
 800ba0e:	463d      	mov	r5, r7
 800ba10:	dc17      	bgt.n	800ba42 <round+0x46>
 800ba12:	2c00      	cmp	r4, #0
 800ba14:	da09      	bge.n	800ba2a <round+0x2e>
 800ba16:	3401      	adds	r4, #1
 800ba18:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800ba1c:	d103      	bne.n	800ba26 <round+0x2a>
 800ba1e:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ba22:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ba26:	2100      	movs	r1, #0
 800ba28:	e02c      	b.n	800ba84 <round+0x88>
 800ba2a:	4a18      	ldr	r2, [pc, #96]	; (800ba8c <round+0x90>)
 800ba2c:	4122      	asrs	r2, r4
 800ba2e:	4217      	tst	r7, r2
 800ba30:	d100      	bne.n	800ba34 <round+0x38>
 800ba32:	b19e      	cbz	r6, 800ba5c <round+0x60>
 800ba34:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800ba38:	4123      	asrs	r3, r4
 800ba3a:	442b      	add	r3, r5
 800ba3c:	ea23 0302 	bic.w	r3, r3, r2
 800ba40:	e7f1      	b.n	800ba26 <round+0x2a>
 800ba42:	2c33      	cmp	r4, #51	; 0x33
 800ba44:	dd0d      	ble.n	800ba62 <round+0x66>
 800ba46:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ba4a:	d107      	bne.n	800ba5c <round+0x60>
 800ba4c:	4630      	mov	r0, r6
 800ba4e:	4639      	mov	r1, r7
 800ba50:	ee10 2a10 	vmov	r2, s0
 800ba54:	f7f4 fc2a 	bl	80002ac <__adddf3>
 800ba58:	4606      	mov	r6, r0
 800ba5a:	460f      	mov	r7, r1
 800ba5c:	ec47 6b10 	vmov	d0, r6, r7
 800ba60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba62:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800ba66:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6a:	40d0      	lsrs	r0, r2
 800ba6c:	4206      	tst	r6, r0
 800ba6e:	d0f5      	beq.n	800ba5c <round+0x60>
 800ba70:	2201      	movs	r2, #1
 800ba72:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ba76:	fa02 f404 	lsl.w	r4, r2, r4
 800ba7a:	1931      	adds	r1, r6, r4
 800ba7c:	bf28      	it	cs
 800ba7e:	189b      	addcs	r3, r3, r2
 800ba80:	ea21 0100 	bic.w	r1, r1, r0
 800ba84:	461f      	mov	r7, r3
 800ba86:	460e      	mov	r6, r1
 800ba88:	e7e8      	b.n	800ba5c <round+0x60>
 800ba8a:	bf00      	nop
 800ba8c:	000fffff 	.word	0x000fffff

0800ba90 <roundf>:
 800ba90:	ee10 0a10 	vmov	r0, s0
 800ba94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800ba98:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800ba9c:	2a16      	cmp	r2, #22
 800ba9e:	dc15      	bgt.n	800bacc <roundf+0x3c>
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	da08      	bge.n	800bab6 <roundf+0x26>
 800baa4:	3201      	adds	r2, #1
 800baa6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800baaa:	d101      	bne.n	800bab0 <roundf+0x20>
 800baac:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800bab0:	ee00 3a10 	vmov	s0, r3
 800bab4:	4770      	bx	lr
 800bab6:	4908      	ldr	r1, [pc, #32]	; (800bad8 <roundf+0x48>)
 800bab8:	4111      	asrs	r1, r2
 800baba:	4208      	tst	r0, r1
 800babc:	d0fa      	beq.n	800bab4 <roundf+0x24>
 800babe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bac2:	4113      	asrs	r3, r2
 800bac4:	4403      	add	r3, r0
 800bac6:	ea23 0301 	bic.w	r3, r3, r1
 800baca:	e7f1      	b.n	800bab0 <roundf+0x20>
 800bacc:	2a80      	cmp	r2, #128	; 0x80
 800bace:	d1f1      	bne.n	800bab4 <roundf+0x24>
 800bad0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bad4:	4770      	bx	lr
 800bad6:	bf00      	nop
 800bad8:	007fffff 	.word	0x007fffff

0800badc <abort>:
 800badc:	b508      	push	{r3, lr}
 800bade:	2006      	movs	r0, #6
 800bae0:	f000 ff1c 	bl	800c91c <raise>
 800bae4:	2001      	movs	r0, #1
 800bae6:	f7f6 fd91 	bl	800260c <_exit>
	...

0800baec <__assert_func>:
 800baec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800baee:	461c      	mov	r4, r3
 800baf0:	4b09      	ldr	r3, [pc, #36]	; (800bb18 <__assert_func+0x2c>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4605      	mov	r5, r0
 800baf6:	68d8      	ldr	r0, [r3, #12]
 800baf8:	b152      	cbz	r2, 800bb10 <__assert_func+0x24>
 800bafa:	4b08      	ldr	r3, [pc, #32]	; (800bb1c <__assert_func+0x30>)
 800bafc:	9100      	str	r1, [sp, #0]
 800bafe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bb02:	4907      	ldr	r1, [pc, #28]	; (800bb20 <__assert_func+0x34>)
 800bb04:	462b      	mov	r3, r5
 800bb06:	4622      	mov	r2, r4
 800bb08:	f000 f81a 	bl	800bb40 <fiprintf>
 800bb0c:	f7ff ffe6 	bl	800badc <abort>
 800bb10:	4b04      	ldr	r3, [pc, #16]	; (800bb24 <__assert_func+0x38>)
 800bb12:	461a      	mov	r2, r3
 800bb14:	e7f2      	b.n	800bafc <__assert_func+0x10>
 800bb16:	bf00      	nop
 800bb18:	2000003c 	.word	0x2000003c
 800bb1c:	080dd2cc 	.word	0x080dd2cc
 800bb20:	080dd2d9 	.word	0x080dd2d9
 800bb24:	080dd307 	.word	0x080dd307

0800bb28 <atexit>:
 800bb28:	2300      	movs	r3, #0
 800bb2a:	4601      	mov	r1, r0
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	4618      	mov	r0, r3
 800bb30:	f001 b802 	b.w	800cb38 <__register_exitproc>

0800bb34 <__errno>:
 800bb34:	4b01      	ldr	r3, [pc, #4]	; (800bb3c <__errno+0x8>)
 800bb36:	6818      	ldr	r0, [r3, #0]
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	2000003c 	.word	0x2000003c

0800bb40 <fiprintf>:
 800bb40:	b40e      	push	{r1, r2, r3}
 800bb42:	b503      	push	{r0, r1, lr}
 800bb44:	4601      	mov	r1, r0
 800bb46:	ab03      	add	r3, sp, #12
 800bb48:	4805      	ldr	r0, [pc, #20]	; (800bb60 <fiprintf+0x20>)
 800bb4a:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb4e:	6800      	ldr	r0, [r0, #0]
 800bb50:	9301      	str	r3, [sp, #4]
 800bb52:	f000 f939 	bl	800bdc8 <_vfiprintf_r>
 800bb56:	b002      	add	sp, #8
 800bb58:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb5c:	b003      	add	sp, #12
 800bb5e:	4770      	bx	lr
 800bb60:	2000003c 	.word	0x2000003c

0800bb64 <__libc_init_array>:
 800bb64:	b570      	push	{r4, r5, r6, lr}
 800bb66:	4e0d      	ldr	r6, [pc, #52]	; (800bb9c <__libc_init_array+0x38>)
 800bb68:	4c0d      	ldr	r4, [pc, #52]	; (800bba0 <__libc_init_array+0x3c>)
 800bb6a:	1ba4      	subs	r4, r4, r6
 800bb6c:	10a4      	asrs	r4, r4, #2
 800bb6e:	2500      	movs	r5, #0
 800bb70:	42a5      	cmp	r5, r4
 800bb72:	d109      	bne.n	800bb88 <__libc_init_array+0x24>
 800bb74:	4e0b      	ldr	r6, [pc, #44]	; (800bba4 <__libc_init_array+0x40>)
 800bb76:	4c0c      	ldr	r4, [pc, #48]	; (800bba8 <__libc_init_array+0x44>)
 800bb78:	f002 fdaa 	bl	800e6d0 <_init>
 800bb7c:	1ba4      	subs	r4, r4, r6
 800bb7e:	10a4      	asrs	r4, r4, #2
 800bb80:	2500      	movs	r5, #0
 800bb82:	42a5      	cmp	r5, r4
 800bb84:	d105      	bne.n	800bb92 <__libc_init_array+0x2e>
 800bb86:	bd70      	pop	{r4, r5, r6, pc}
 800bb88:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb8c:	4798      	blx	r3
 800bb8e:	3501      	adds	r5, #1
 800bb90:	e7ee      	b.n	800bb70 <__libc_init_array+0xc>
 800bb92:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bb96:	4798      	blx	r3
 800bb98:	3501      	adds	r5, #1
 800bb9a:	e7f2      	b.n	800bb82 <__libc_init_array+0x1e>
 800bb9c:	080dd5d0 	.word	0x080dd5d0
 800bba0:	080dd5d0 	.word	0x080dd5d0
 800bba4:	080dd5d0 	.word	0x080dd5d0
 800bba8:	080dd5d4 	.word	0x080dd5d4

0800bbac <malloc>:
 800bbac:	4b02      	ldr	r3, [pc, #8]	; (800bbb8 <malloc+0xc>)
 800bbae:	4601      	mov	r1, r0
 800bbb0:	6818      	ldr	r0, [r3, #0]
 800bbb2:	f000 b885 	b.w	800bcc0 <_malloc_r>
 800bbb6:	bf00      	nop
 800bbb8:	2000003c 	.word	0x2000003c

0800bbbc <free>:
 800bbbc:	4b02      	ldr	r3, [pc, #8]	; (800bbc8 <free+0xc>)
 800bbbe:	4601      	mov	r1, r0
 800bbc0:	6818      	ldr	r0, [r3, #0]
 800bbc2:	f000 b82f 	b.w	800bc24 <_free_r>
 800bbc6:	bf00      	nop
 800bbc8:	2000003c 	.word	0x2000003c

0800bbcc <memcpy>:
 800bbcc:	b510      	push	{r4, lr}
 800bbce:	1e43      	subs	r3, r0, #1
 800bbd0:	440a      	add	r2, r1
 800bbd2:	4291      	cmp	r1, r2
 800bbd4:	d100      	bne.n	800bbd8 <memcpy+0xc>
 800bbd6:	bd10      	pop	{r4, pc}
 800bbd8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbdc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bbe0:	e7f7      	b.n	800bbd2 <memcpy+0x6>

0800bbe2 <memmove>:
 800bbe2:	4288      	cmp	r0, r1
 800bbe4:	b510      	push	{r4, lr}
 800bbe6:	eb01 0302 	add.w	r3, r1, r2
 800bbea:	d807      	bhi.n	800bbfc <memmove+0x1a>
 800bbec:	1e42      	subs	r2, r0, #1
 800bbee:	4299      	cmp	r1, r3
 800bbf0:	d00a      	beq.n	800bc08 <memmove+0x26>
 800bbf2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bbf6:	f802 4f01 	strb.w	r4, [r2, #1]!
 800bbfa:	e7f8      	b.n	800bbee <memmove+0xc>
 800bbfc:	4283      	cmp	r3, r0
 800bbfe:	d9f5      	bls.n	800bbec <memmove+0xa>
 800bc00:	1881      	adds	r1, r0, r2
 800bc02:	1ad2      	subs	r2, r2, r3
 800bc04:	42d3      	cmn	r3, r2
 800bc06:	d100      	bne.n	800bc0a <memmove+0x28>
 800bc08:	bd10      	pop	{r4, pc}
 800bc0a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc0e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bc12:	e7f7      	b.n	800bc04 <memmove+0x22>

0800bc14 <memset>:
 800bc14:	4402      	add	r2, r0
 800bc16:	4603      	mov	r3, r0
 800bc18:	4293      	cmp	r3, r2
 800bc1a:	d100      	bne.n	800bc1e <memset+0xa>
 800bc1c:	4770      	bx	lr
 800bc1e:	f803 1b01 	strb.w	r1, [r3], #1
 800bc22:	e7f9      	b.n	800bc18 <memset+0x4>

0800bc24 <_free_r>:
 800bc24:	b538      	push	{r3, r4, r5, lr}
 800bc26:	4605      	mov	r5, r0
 800bc28:	2900      	cmp	r1, #0
 800bc2a:	d045      	beq.n	800bcb8 <_free_r+0x94>
 800bc2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc30:	1f0c      	subs	r4, r1, #4
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfb8      	it	lt
 800bc36:	18e4      	addlt	r4, r4, r3
 800bc38:	f002 f812 	bl	800dc60 <__malloc_lock>
 800bc3c:	4a1f      	ldr	r2, [pc, #124]	; (800bcbc <_free_r+0x98>)
 800bc3e:	6813      	ldr	r3, [r2, #0]
 800bc40:	4610      	mov	r0, r2
 800bc42:	b933      	cbnz	r3, 800bc52 <_free_r+0x2e>
 800bc44:	6063      	str	r3, [r4, #4]
 800bc46:	6014      	str	r4, [r2, #0]
 800bc48:	4628      	mov	r0, r5
 800bc4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc4e:	f002 b808 	b.w	800dc62 <__malloc_unlock>
 800bc52:	42a3      	cmp	r3, r4
 800bc54:	d90c      	bls.n	800bc70 <_free_r+0x4c>
 800bc56:	6821      	ldr	r1, [r4, #0]
 800bc58:	1862      	adds	r2, r4, r1
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	bf04      	itt	eq
 800bc5e:	681a      	ldreq	r2, [r3, #0]
 800bc60:	685b      	ldreq	r3, [r3, #4]
 800bc62:	6063      	str	r3, [r4, #4]
 800bc64:	bf04      	itt	eq
 800bc66:	1852      	addeq	r2, r2, r1
 800bc68:	6022      	streq	r2, [r4, #0]
 800bc6a:	6004      	str	r4, [r0, #0]
 800bc6c:	e7ec      	b.n	800bc48 <_free_r+0x24>
 800bc6e:	4613      	mov	r3, r2
 800bc70:	685a      	ldr	r2, [r3, #4]
 800bc72:	b10a      	cbz	r2, 800bc78 <_free_r+0x54>
 800bc74:	42a2      	cmp	r2, r4
 800bc76:	d9fa      	bls.n	800bc6e <_free_r+0x4a>
 800bc78:	6819      	ldr	r1, [r3, #0]
 800bc7a:	1858      	adds	r0, r3, r1
 800bc7c:	42a0      	cmp	r0, r4
 800bc7e:	d10b      	bne.n	800bc98 <_free_r+0x74>
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	4401      	add	r1, r0
 800bc84:	1858      	adds	r0, r3, r1
 800bc86:	4282      	cmp	r2, r0
 800bc88:	6019      	str	r1, [r3, #0]
 800bc8a:	d1dd      	bne.n	800bc48 <_free_r+0x24>
 800bc8c:	6810      	ldr	r0, [r2, #0]
 800bc8e:	6852      	ldr	r2, [r2, #4]
 800bc90:	605a      	str	r2, [r3, #4]
 800bc92:	4401      	add	r1, r0
 800bc94:	6019      	str	r1, [r3, #0]
 800bc96:	e7d7      	b.n	800bc48 <_free_r+0x24>
 800bc98:	d902      	bls.n	800bca0 <_free_r+0x7c>
 800bc9a:	230c      	movs	r3, #12
 800bc9c:	602b      	str	r3, [r5, #0]
 800bc9e:	e7d3      	b.n	800bc48 <_free_r+0x24>
 800bca0:	6820      	ldr	r0, [r4, #0]
 800bca2:	1821      	adds	r1, r4, r0
 800bca4:	428a      	cmp	r2, r1
 800bca6:	bf04      	itt	eq
 800bca8:	6811      	ldreq	r1, [r2, #0]
 800bcaa:	6852      	ldreq	r2, [r2, #4]
 800bcac:	6062      	str	r2, [r4, #4]
 800bcae:	bf04      	itt	eq
 800bcb0:	1809      	addeq	r1, r1, r0
 800bcb2:	6021      	streq	r1, [r4, #0]
 800bcb4:	605c      	str	r4, [r3, #4]
 800bcb6:	e7c7      	b.n	800bc48 <_free_r+0x24>
 800bcb8:	bd38      	pop	{r3, r4, r5, pc}
 800bcba:	bf00      	nop
 800bcbc:	20000e14 	.word	0x20000e14

0800bcc0 <_malloc_r>:
 800bcc0:	b570      	push	{r4, r5, r6, lr}
 800bcc2:	1ccd      	adds	r5, r1, #3
 800bcc4:	f025 0503 	bic.w	r5, r5, #3
 800bcc8:	3508      	adds	r5, #8
 800bcca:	2d0c      	cmp	r5, #12
 800bccc:	bf38      	it	cc
 800bcce:	250c      	movcc	r5, #12
 800bcd0:	2d00      	cmp	r5, #0
 800bcd2:	4606      	mov	r6, r0
 800bcd4:	db01      	blt.n	800bcda <_malloc_r+0x1a>
 800bcd6:	42a9      	cmp	r1, r5
 800bcd8:	d903      	bls.n	800bce2 <_malloc_r+0x22>
 800bcda:	230c      	movs	r3, #12
 800bcdc:	6033      	str	r3, [r6, #0]
 800bcde:	2000      	movs	r0, #0
 800bce0:	bd70      	pop	{r4, r5, r6, pc}
 800bce2:	f001 ffbd 	bl	800dc60 <__malloc_lock>
 800bce6:	4a21      	ldr	r2, [pc, #132]	; (800bd6c <_malloc_r+0xac>)
 800bce8:	6814      	ldr	r4, [r2, #0]
 800bcea:	4621      	mov	r1, r4
 800bcec:	b991      	cbnz	r1, 800bd14 <_malloc_r+0x54>
 800bcee:	4c20      	ldr	r4, [pc, #128]	; (800bd70 <_malloc_r+0xb0>)
 800bcf0:	6823      	ldr	r3, [r4, #0]
 800bcf2:	b91b      	cbnz	r3, 800bcfc <_malloc_r+0x3c>
 800bcf4:	4630      	mov	r0, r6
 800bcf6:	f000 fdd9 	bl	800c8ac <_sbrk_r>
 800bcfa:	6020      	str	r0, [r4, #0]
 800bcfc:	4629      	mov	r1, r5
 800bcfe:	4630      	mov	r0, r6
 800bd00:	f000 fdd4 	bl	800c8ac <_sbrk_r>
 800bd04:	1c43      	adds	r3, r0, #1
 800bd06:	d124      	bne.n	800bd52 <_malloc_r+0x92>
 800bd08:	230c      	movs	r3, #12
 800bd0a:	6033      	str	r3, [r6, #0]
 800bd0c:	4630      	mov	r0, r6
 800bd0e:	f001 ffa8 	bl	800dc62 <__malloc_unlock>
 800bd12:	e7e4      	b.n	800bcde <_malloc_r+0x1e>
 800bd14:	680b      	ldr	r3, [r1, #0]
 800bd16:	1b5b      	subs	r3, r3, r5
 800bd18:	d418      	bmi.n	800bd4c <_malloc_r+0x8c>
 800bd1a:	2b0b      	cmp	r3, #11
 800bd1c:	d90f      	bls.n	800bd3e <_malloc_r+0x7e>
 800bd1e:	600b      	str	r3, [r1, #0]
 800bd20:	50cd      	str	r5, [r1, r3]
 800bd22:	18cc      	adds	r4, r1, r3
 800bd24:	4630      	mov	r0, r6
 800bd26:	f001 ff9c 	bl	800dc62 <__malloc_unlock>
 800bd2a:	f104 000b 	add.w	r0, r4, #11
 800bd2e:	1d23      	adds	r3, r4, #4
 800bd30:	f020 0007 	bic.w	r0, r0, #7
 800bd34:	1ac3      	subs	r3, r0, r3
 800bd36:	d0d3      	beq.n	800bce0 <_malloc_r+0x20>
 800bd38:	425a      	negs	r2, r3
 800bd3a:	50e2      	str	r2, [r4, r3]
 800bd3c:	e7d0      	b.n	800bce0 <_malloc_r+0x20>
 800bd3e:	428c      	cmp	r4, r1
 800bd40:	684b      	ldr	r3, [r1, #4]
 800bd42:	bf16      	itet	ne
 800bd44:	6063      	strne	r3, [r4, #4]
 800bd46:	6013      	streq	r3, [r2, #0]
 800bd48:	460c      	movne	r4, r1
 800bd4a:	e7eb      	b.n	800bd24 <_malloc_r+0x64>
 800bd4c:	460c      	mov	r4, r1
 800bd4e:	6849      	ldr	r1, [r1, #4]
 800bd50:	e7cc      	b.n	800bcec <_malloc_r+0x2c>
 800bd52:	1cc4      	adds	r4, r0, #3
 800bd54:	f024 0403 	bic.w	r4, r4, #3
 800bd58:	42a0      	cmp	r0, r4
 800bd5a:	d005      	beq.n	800bd68 <_malloc_r+0xa8>
 800bd5c:	1a21      	subs	r1, r4, r0
 800bd5e:	4630      	mov	r0, r6
 800bd60:	f000 fda4 	bl	800c8ac <_sbrk_r>
 800bd64:	3001      	adds	r0, #1
 800bd66:	d0cf      	beq.n	800bd08 <_malloc_r+0x48>
 800bd68:	6025      	str	r5, [r4, #0]
 800bd6a:	e7db      	b.n	800bd24 <_malloc_r+0x64>
 800bd6c:	20000e14 	.word	0x20000e14
 800bd70:	20000e18 	.word	0x20000e18

0800bd74 <__sfputc_r>:
 800bd74:	6893      	ldr	r3, [r2, #8]
 800bd76:	3b01      	subs	r3, #1
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	b410      	push	{r4}
 800bd7c:	6093      	str	r3, [r2, #8]
 800bd7e:	da08      	bge.n	800bd92 <__sfputc_r+0x1e>
 800bd80:	6994      	ldr	r4, [r2, #24]
 800bd82:	42a3      	cmp	r3, r4
 800bd84:	db01      	blt.n	800bd8a <__sfputc_r+0x16>
 800bd86:	290a      	cmp	r1, #10
 800bd88:	d103      	bne.n	800bd92 <__sfputc_r+0x1e>
 800bd8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd8e:	f000 be13 	b.w	800c9b8 <__swbuf_r>
 800bd92:	6813      	ldr	r3, [r2, #0]
 800bd94:	1c58      	adds	r0, r3, #1
 800bd96:	6010      	str	r0, [r2, #0]
 800bd98:	7019      	strb	r1, [r3, #0]
 800bd9a:	4608      	mov	r0, r1
 800bd9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bda0:	4770      	bx	lr

0800bda2 <__sfputs_r>:
 800bda2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bda4:	4606      	mov	r6, r0
 800bda6:	460f      	mov	r7, r1
 800bda8:	4614      	mov	r4, r2
 800bdaa:	18d5      	adds	r5, r2, r3
 800bdac:	42ac      	cmp	r4, r5
 800bdae:	d101      	bne.n	800bdb4 <__sfputs_r+0x12>
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	e007      	b.n	800bdc4 <__sfputs_r+0x22>
 800bdb4:	463a      	mov	r2, r7
 800bdb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f7ff ffda 	bl	800bd74 <__sfputc_r>
 800bdc0:	1c43      	adds	r3, r0, #1
 800bdc2:	d1f3      	bne.n	800bdac <__sfputs_r+0xa>
 800bdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bdc8 <_vfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	460c      	mov	r4, r1
 800bdce:	b09d      	sub	sp, #116	; 0x74
 800bdd0:	4617      	mov	r7, r2
 800bdd2:	461d      	mov	r5, r3
 800bdd4:	4606      	mov	r6, r0
 800bdd6:	b118      	cbz	r0, 800bde0 <_vfiprintf_r+0x18>
 800bdd8:	6983      	ldr	r3, [r0, #24]
 800bdda:	b90b      	cbnz	r3, 800bde0 <_vfiprintf_r+0x18>
 800bddc:	f001 fe44 	bl	800da68 <__sinit>
 800bde0:	4b7c      	ldr	r3, [pc, #496]	; (800bfd4 <_vfiprintf_r+0x20c>)
 800bde2:	429c      	cmp	r4, r3
 800bde4:	d158      	bne.n	800be98 <_vfiprintf_r+0xd0>
 800bde6:	6874      	ldr	r4, [r6, #4]
 800bde8:	89a3      	ldrh	r3, [r4, #12]
 800bdea:	0718      	lsls	r0, r3, #28
 800bdec:	d55e      	bpl.n	800beac <_vfiprintf_r+0xe4>
 800bdee:	6923      	ldr	r3, [r4, #16]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d05b      	beq.n	800beac <_vfiprintf_r+0xe4>
 800bdf4:	2300      	movs	r3, #0
 800bdf6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdf8:	2320      	movs	r3, #32
 800bdfa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdfe:	2330      	movs	r3, #48	; 0x30
 800be00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be04:	9503      	str	r5, [sp, #12]
 800be06:	f04f 0b01 	mov.w	fp, #1
 800be0a:	46b8      	mov	r8, r7
 800be0c:	4645      	mov	r5, r8
 800be0e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be12:	b10b      	cbz	r3, 800be18 <_vfiprintf_r+0x50>
 800be14:	2b25      	cmp	r3, #37	; 0x25
 800be16:	d154      	bne.n	800bec2 <_vfiprintf_r+0xfa>
 800be18:	ebb8 0a07 	subs.w	sl, r8, r7
 800be1c:	d00b      	beq.n	800be36 <_vfiprintf_r+0x6e>
 800be1e:	4653      	mov	r3, sl
 800be20:	463a      	mov	r2, r7
 800be22:	4621      	mov	r1, r4
 800be24:	4630      	mov	r0, r6
 800be26:	f7ff ffbc 	bl	800bda2 <__sfputs_r>
 800be2a:	3001      	adds	r0, #1
 800be2c:	f000 80c2 	beq.w	800bfb4 <_vfiprintf_r+0x1ec>
 800be30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be32:	4453      	add	r3, sl
 800be34:	9309      	str	r3, [sp, #36]	; 0x24
 800be36:	f898 3000 	ldrb.w	r3, [r8]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	f000 80ba 	beq.w	800bfb4 <_vfiprintf_r+0x1ec>
 800be40:	2300      	movs	r3, #0
 800be42:	f04f 32ff 	mov.w	r2, #4294967295
 800be46:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be4a:	9304      	str	r3, [sp, #16]
 800be4c:	9307      	str	r3, [sp, #28]
 800be4e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be52:	931a      	str	r3, [sp, #104]	; 0x68
 800be54:	46a8      	mov	r8, r5
 800be56:	2205      	movs	r2, #5
 800be58:	f818 1b01 	ldrb.w	r1, [r8], #1
 800be5c:	485e      	ldr	r0, [pc, #376]	; (800bfd8 <_vfiprintf_r+0x210>)
 800be5e:	f7f4 f9cf 	bl	8000200 <memchr>
 800be62:	9b04      	ldr	r3, [sp, #16]
 800be64:	bb78      	cbnz	r0, 800bec6 <_vfiprintf_r+0xfe>
 800be66:	06d9      	lsls	r1, r3, #27
 800be68:	bf44      	itt	mi
 800be6a:	2220      	movmi	r2, #32
 800be6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be70:	071a      	lsls	r2, r3, #28
 800be72:	bf44      	itt	mi
 800be74:	222b      	movmi	r2, #43	; 0x2b
 800be76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be7a:	782a      	ldrb	r2, [r5, #0]
 800be7c:	2a2a      	cmp	r2, #42	; 0x2a
 800be7e:	d02a      	beq.n	800bed6 <_vfiprintf_r+0x10e>
 800be80:	9a07      	ldr	r2, [sp, #28]
 800be82:	46a8      	mov	r8, r5
 800be84:	2000      	movs	r0, #0
 800be86:	250a      	movs	r5, #10
 800be88:	4641      	mov	r1, r8
 800be8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be8e:	3b30      	subs	r3, #48	; 0x30
 800be90:	2b09      	cmp	r3, #9
 800be92:	d969      	bls.n	800bf68 <_vfiprintf_r+0x1a0>
 800be94:	b360      	cbz	r0, 800bef0 <_vfiprintf_r+0x128>
 800be96:	e024      	b.n	800bee2 <_vfiprintf_r+0x11a>
 800be98:	4b50      	ldr	r3, [pc, #320]	; (800bfdc <_vfiprintf_r+0x214>)
 800be9a:	429c      	cmp	r4, r3
 800be9c:	d101      	bne.n	800bea2 <_vfiprintf_r+0xda>
 800be9e:	68b4      	ldr	r4, [r6, #8]
 800bea0:	e7a2      	b.n	800bde8 <_vfiprintf_r+0x20>
 800bea2:	4b4f      	ldr	r3, [pc, #316]	; (800bfe0 <_vfiprintf_r+0x218>)
 800bea4:	429c      	cmp	r4, r3
 800bea6:	bf08      	it	eq
 800bea8:	68f4      	ldreq	r4, [r6, #12]
 800beaa:	e79d      	b.n	800bde8 <_vfiprintf_r+0x20>
 800beac:	4621      	mov	r1, r4
 800beae:	4630      	mov	r0, r6
 800beb0:	f000 fdd4 	bl	800ca5c <__swsetup_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d09d      	beq.n	800bdf4 <_vfiprintf_r+0x2c>
 800beb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bebc:	b01d      	add	sp, #116	; 0x74
 800bebe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bec2:	46a8      	mov	r8, r5
 800bec4:	e7a2      	b.n	800be0c <_vfiprintf_r+0x44>
 800bec6:	4a44      	ldr	r2, [pc, #272]	; (800bfd8 <_vfiprintf_r+0x210>)
 800bec8:	1a80      	subs	r0, r0, r2
 800beca:	fa0b f000 	lsl.w	r0, fp, r0
 800bece:	4318      	orrs	r0, r3
 800bed0:	9004      	str	r0, [sp, #16]
 800bed2:	4645      	mov	r5, r8
 800bed4:	e7be      	b.n	800be54 <_vfiprintf_r+0x8c>
 800bed6:	9a03      	ldr	r2, [sp, #12]
 800bed8:	1d11      	adds	r1, r2, #4
 800beda:	6812      	ldr	r2, [r2, #0]
 800bedc:	9103      	str	r1, [sp, #12]
 800bede:	2a00      	cmp	r2, #0
 800bee0:	db01      	blt.n	800bee6 <_vfiprintf_r+0x11e>
 800bee2:	9207      	str	r2, [sp, #28]
 800bee4:	e004      	b.n	800bef0 <_vfiprintf_r+0x128>
 800bee6:	4252      	negs	r2, r2
 800bee8:	f043 0302 	orr.w	r3, r3, #2
 800beec:	9207      	str	r2, [sp, #28]
 800beee:	9304      	str	r3, [sp, #16]
 800bef0:	f898 3000 	ldrb.w	r3, [r8]
 800bef4:	2b2e      	cmp	r3, #46	; 0x2e
 800bef6:	d10e      	bne.n	800bf16 <_vfiprintf_r+0x14e>
 800bef8:	f898 3001 	ldrb.w	r3, [r8, #1]
 800befc:	2b2a      	cmp	r3, #42	; 0x2a
 800befe:	d138      	bne.n	800bf72 <_vfiprintf_r+0x1aa>
 800bf00:	9b03      	ldr	r3, [sp, #12]
 800bf02:	1d1a      	adds	r2, r3, #4
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	9203      	str	r2, [sp, #12]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	bfb8      	it	lt
 800bf0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bf10:	f108 0802 	add.w	r8, r8, #2
 800bf14:	9305      	str	r3, [sp, #20]
 800bf16:	4d33      	ldr	r5, [pc, #204]	; (800bfe4 <_vfiprintf_r+0x21c>)
 800bf18:	f898 1000 	ldrb.w	r1, [r8]
 800bf1c:	2203      	movs	r2, #3
 800bf1e:	4628      	mov	r0, r5
 800bf20:	f7f4 f96e 	bl	8000200 <memchr>
 800bf24:	b140      	cbz	r0, 800bf38 <_vfiprintf_r+0x170>
 800bf26:	2340      	movs	r3, #64	; 0x40
 800bf28:	1b40      	subs	r0, r0, r5
 800bf2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	4303      	orrs	r3, r0
 800bf32:	f108 0801 	add.w	r8, r8, #1
 800bf36:	9304      	str	r3, [sp, #16]
 800bf38:	f898 1000 	ldrb.w	r1, [r8]
 800bf3c:	482a      	ldr	r0, [pc, #168]	; (800bfe8 <_vfiprintf_r+0x220>)
 800bf3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf42:	2206      	movs	r2, #6
 800bf44:	f108 0701 	add.w	r7, r8, #1
 800bf48:	f7f4 f95a 	bl	8000200 <memchr>
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	d037      	beq.n	800bfc0 <_vfiprintf_r+0x1f8>
 800bf50:	4b26      	ldr	r3, [pc, #152]	; (800bfec <_vfiprintf_r+0x224>)
 800bf52:	bb1b      	cbnz	r3, 800bf9c <_vfiprintf_r+0x1d4>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	3307      	adds	r3, #7
 800bf58:	f023 0307 	bic.w	r3, r3, #7
 800bf5c:	3308      	adds	r3, #8
 800bf5e:	9303      	str	r3, [sp, #12]
 800bf60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf62:	444b      	add	r3, r9
 800bf64:	9309      	str	r3, [sp, #36]	; 0x24
 800bf66:	e750      	b.n	800be0a <_vfiprintf_r+0x42>
 800bf68:	fb05 3202 	mla	r2, r5, r2, r3
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	4688      	mov	r8, r1
 800bf70:	e78a      	b.n	800be88 <_vfiprintf_r+0xc0>
 800bf72:	2300      	movs	r3, #0
 800bf74:	f108 0801 	add.w	r8, r8, #1
 800bf78:	9305      	str	r3, [sp, #20]
 800bf7a:	4619      	mov	r1, r3
 800bf7c:	250a      	movs	r5, #10
 800bf7e:	4640      	mov	r0, r8
 800bf80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf84:	3a30      	subs	r2, #48	; 0x30
 800bf86:	2a09      	cmp	r2, #9
 800bf88:	d903      	bls.n	800bf92 <_vfiprintf_r+0x1ca>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d0c3      	beq.n	800bf16 <_vfiprintf_r+0x14e>
 800bf8e:	9105      	str	r1, [sp, #20]
 800bf90:	e7c1      	b.n	800bf16 <_vfiprintf_r+0x14e>
 800bf92:	fb05 2101 	mla	r1, r5, r1, r2
 800bf96:	2301      	movs	r3, #1
 800bf98:	4680      	mov	r8, r0
 800bf9a:	e7f0      	b.n	800bf7e <_vfiprintf_r+0x1b6>
 800bf9c:	ab03      	add	r3, sp, #12
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	4622      	mov	r2, r4
 800bfa2:	4b13      	ldr	r3, [pc, #76]	; (800bff0 <_vfiprintf_r+0x228>)
 800bfa4:	a904      	add	r1, sp, #16
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f000 f8b8 	bl	800c11c <_printf_float>
 800bfac:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bfb0:	4681      	mov	r9, r0
 800bfb2:	d1d5      	bne.n	800bf60 <_vfiprintf_r+0x198>
 800bfb4:	89a3      	ldrh	r3, [r4, #12]
 800bfb6:	065b      	lsls	r3, r3, #25
 800bfb8:	f53f af7e 	bmi.w	800beb8 <_vfiprintf_r+0xf0>
 800bfbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bfbe:	e77d      	b.n	800bebc <_vfiprintf_r+0xf4>
 800bfc0:	ab03      	add	r3, sp, #12
 800bfc2:	9300      	str	r3, [sp, #0]
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4b0a      	ldr	r3, [pc, #40]	; (800bff0 <_vfiprintf_r+0x228>)
 800bfc8:	a904      	add	r1, sp, #16
 800bfca:	4630      	mov	r0, r6
 800bfcc:	f000 fb5c 	bl	800c688 <_printf_i>
 800bfd0:	e7ec      	b.n	800bfac <_vfiprintf_r+0x1e4>
 800bfd2:	bf00      	nop
 800bfd4:	080dd380 	.word	0x080dd380
 800bfd8:	080dd30c 	.word	0x080dd30c
 800bfdc:	080dd3a0 	.word	0x080dd3a0
 800bfe0:	080dd360 	.word	0x080dd360
 800bfe4:	080dd312 	.word	0x080dd312
 800bfe8:	080dd316 	.word	0x080dd316
 800bfec:	0800c11d 	.word	0x0800c11d
 800bff0:	0800bda3 	.word	0x0800bda3

0800bff4 <__cvt>:
 800bff4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bff8:	ec55 4b10 	vmov	r4, r5, d0
 800bffc:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800bffe:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c002:	2d00      	cmp	r5, #0
 800c004:	460e      	mov	r6, r1
 800c006:	4691      	mov	r9, r2
 800c008:	4619      	mov	r1, r3
 800c00a:	bfb8      	it	lt
 800c00c:	4622      	movlt	r2, r4
 800c00e:	462b      	mov	r3, r5
 800c010:	f027 0720 	bic.w	r7, r7, #32
 800c014:	bfbb      	ittet	lt
 800c016:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c01a:	461d      	movlt	r5, r3
 800c01c:	2300      	movge	r3, #0
 800c01e:	232d      	movlt	r3, #45	; 0x2d
 800c020:	bfb8      	it	lt
 800c022:	4614      	movlt	r4, r2
 800c024:	2f46      	cmp	r7, #70	; 0x46
 800c026:	700b      	strb	r3, [r1, #0]
 800c028:	d004      	beq.n	800c034 <__cvt+0x40>
 800c02a:	2f45      	cmp	r7, #69	; 0x45
 800c02c:	d100      	bne.n	800c030 <__cvt+0x3c>
 800c02e:	3601      	adds	r6, #1
 800c030:	2102      	movs	r1, #2
 800c032:	e000      	b.n	800c036 <__cvt+0x42>
 800c034:	2103      	movs	r1, #3
 800c036:	ab03      	add	r3, sp, #12
 800c038:	9301      	str	r3, [sp, #4]
 800c03a:	ab02      	add	r3, sp, #8
 800c03c:	9300      	str	r3, [sp, #0]
 800c03e:	4632      	mov	r2, r6
 800c040:	4653      	mov	r3, sl
 800c042:	ec45 4b10 	vmov	d0, r4, r5
 800c046:	f000 fe67 	bl	800cd18 <_dtoa_r>
 800c04a:	2f47      	cmp	r7, #71	; 0x47
 800c04c:	4680      	mov	r8, r0
 800c04e:	d102      	bne.n	800c056 <__cvt+0x62>
 800c050:	f019 0f01 	tst.w	r9, #1
 800c054:	d026      	beq.n	800c0a4 <__cvt+0xb0>
 800c056:	2f46      	cmp	r7, #70	; 0x46
 800c058:	eb08 0906 	add.w	r9, r8, r6
 800c05c:	d111      	bne.n	800c082 <__cvt+0x8e>
 800c05e:	f898 3000 	ldrb.w	r3, [r8]
 800c062:	2b30      	cmp	r3, #48	; 0x30
 800c064:	d10a      	bne.n	800c07c <__cvt+0x88>
 800c066:	2200      	movs	r2, #0
 800c068:	2300      	movs	r3, #0
 800c06a:	4620      	mov	r0, r4
 800c06c:	4629      	mov	r1, r5
 800c06e:	f7f4 fd3b 	bl	8000ae8 <__aeabi_dcmpeq>
 800c072:	b918      	cbnz	r0, 800c07c <__cvt+0x88>
 800c074:	f1c6 0601 	rsb	r6, r6, #1
 800c078:	f8ca 6000 	str.w	r6, [sl]
 800c07c:	f8da 3000 	ldr.w	r3, [sl]
 800c080:	4499      	add	r9, r3
 800c082:	2200      	movs	r2, #0
 800c084:	2300      	movs	r3, #0
 800c086:	4620      	mov	r0, r4
 800c088:	4629      	mov	r1, r5
 800c08a:	f7f4 fd2d 	bl	8000ae8 <__aeabi_dcmpeq>
 800c08e:	b938      	cbnz	r0, 800c0a0 <__cvt+0xac>
 800c090:	2230      	movs	r2, #48	; 0x30
 800c092:	9b03      	ldr	r3, [sp, #12]
 800c094:	454b      	cmp	r3, r9
 800c096:	d205      	bcs.n	800c0a4 <__cvt+0xb0>
 800c098:	1c59      	adds	r1, r3, #1
 800c09a:	9103      	str	r1, [sp, #12]
 800c09c:	701a      	strb	r2, [r3, #0]
 800c09e:	e7f8      	b.n	800c092 <__cvt+0x9e>
 800c0a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800c0a4:	9b03      	ldr	r3, [sp, #12]
 800c0a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c0a8:	eba3 0308 	sub.w	r3, r3, r8
 800c0ac:	4640      	mov	r0, r8
 800c0ae:	6013      	str	r3, [r2, #0]
 800c0b0:	b004      	add	sp, #16
 800c0b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c0b6 <__exponent>:
 800c0b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0b8:	2900      	cmp	r1, #0
 800c0ba:	4604      	mov	r4, r0
 800c0bc:	bfba      	itte	lt
 800c0be:	4249      	neglt	r1, r1
 800c0c0:	232d      	movlt	r3, #45	; 0x2d
 800c0c2:	232b      	movge	r3, #43	; 0x2b
 800c0c4:	2909      	cmp	r1, #9
 800c0c6:	f804 2b02 	strb.w	r2, [r4], #2
 800c0ca:	7043      	strb	r3, [r0, #1]
 800c0cc:	dd20      	ble.n	800c110 <__exponent+0x5a>
 800c0ce:	f10d 0307 	add.w	r3, sp, #7
 800c0d2:	461f      	mov	r7, r3
 800c0d4:	260a      	movs	r6, #10
 800c0d6:	fb91 f5f6 	sdiv	r5, r1, r6
 800c0da:	fb06 1115 	mls	r1, r6, r5, r1
 800c0de:	3130      	adds	r1, #48	; 0x30
 800c0e0:	2d09      	cmp	r5, #9
 800c0e2:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c0e6:	f103 32ff 	add.w	r2, r3, #4294967295
 800c0ea:	4629      	mov	r1, r5
 800c0ec:	dc09      	bgt.n	800c102 <__exponent+0x4c>
 800c0ee:	3130      	adds	r1, #48	; 0x30
 800c0f0:	3b02      	subs	r3, #2
 800c0f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c0f6:	42bb      	cmp	r3, r7
 800c0f8:	4622      	mov	r2, r4
 800c0fa:	d304      	bcc.n	800c106 <__exponent+0x50>
 800c0fc:	1a10      	subs	r0, r2, r0
 800c0fe:	b003      	add	sp, #12
 800c100:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c102:	4613      	mov	r3, r2
 800c104:	e7e7      	b.n	800c0d6 <__exponent+0x20>
 800c106:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c10a:	f804 2b01 	strb.w	r2, [r4], #1
 800c10e:	e7f2      	b.n	800c0f6 <__exponent+0x40>
 800c110:	2330      	movs	r3, #48	; 0x30
 800c112:	4419      	add	r1, r3
 800c114:	7083      	strb	r3, [r0, #2]
 800c116:	1d02      	adds	r2, r0, #4
 800c118:	70c1      	strb	r1, [r0, #3]
 800c11a:	e7ef      	b.n	800c0fc <__exponent+0x46>

0800c11c <_printf_float>:
 800c11c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c120:	b08d      	sub	sp, #52	; 0x34
 800c122:	460c      	mov	r4, r1
 800c124:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c128:	4616      	mov	r6, r2
 800c12a:	461f      	mov	r7, r3
 800c12c:	4605      	mov	r5, r0
 800c12e:	f001 fd25 	bl	800db7c <_localeconv_r>
 800c132:	6803      	ldr	r3, [r0, #0]
 800c134:	9304      	str	r3, [sp, #16]
 800c136:	4618      	mov	r0, r3
 800c138:	f7f4 f854 	bl	80001e4 <strlen>
 800c13c:	2300      	movs	r3, #0
 800c13e:	930a      	str	r3, [sp, #40]	; 0x28
 800c140:	f8d8 3000 	ldr.w	r3, [r8]
 800c144:	9005      	str	r0, [sp, #20]
 800c146:	3307      	adds	r3, #7
 800c148:	f023 0307 	bic.w	r3, r3, #7
 800c14c:	f103 0208 	add.w	r2, r3, #8
 800c150:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c154:	f8d4 b000 	ldr.w	fp, [r4]
 800c158:	f8c8 2000 	str.w	r2, [r8]
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c164:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c168:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c16c:	9307      	str	r3, [sp, #28]
 800c16e:	f8cd 8018 	str.w	r8, [sp, #24]
 800c172:	f04f 32ff 	mov.w	r2, #4294967295
 800c176:	4ba7      	ldr	r3, [pc, #668]	; (800c414 <_printf_float+0x2f8>)
 800c178:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c17c:	f7f4 fce6 	bl	8000b4c <__aeabi_dcmpun>
 800c180:	bb70      	cbnz	r0, 800c1e0 <_printf_float+0xc4>
 800c182:	f04f 32ff 	mov.w	r2, #4294967295
 800c186:	4ba3      	ldr	r3, [pc, #652]	; (800c414 <_printf_float+0x2f8>)
 800c188:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c18c:	f7f4 fcc0 	bl	8000b10 <__aeabi_dcmple>
 800c190:	bb30      	cbnz	r0, 800c1e0 <_printf_float+0xc4>
 800c192:	2200      	movs	r2, #0
 800c194:	2300      	movs	r3, #0
 800c196:	4640      	mov	r0, r8
 800c198:	4649      	mov	r1, r9
 800c19a:	f7f4 fcaf 	bl	8000afc <__aeabi_dcmplt>
 800c19e:	b110      	cbz	r0, 800c1a6 <_printf_float+0x8a>
 800c1a0:	232d      	movs	r3, #45	; 0x2d
 800c1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c1a6:	4a9c      	ldr	r2, [pc, #624]	; (800c418 <_printf_float+0x2fc>)
 800c1a8:	4b9c      	ldr	r3, [pc, #624]	; (800c41c <_printf_float+0x300>)
 800c1aa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c1ae:	bf8c      	ite	hi
 800c1b0:	4690      	movhi	r8, r2
 800c1b2:	4698      	movls	r8, r3
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	f02b 0204 	bic.w	r2, fp, #4
 800c1ba:	6123      	str	r3, [r4, #16]
 800c1bc:	6022      	str	r2, [r4, #0]
 800c1be:	f04f 0900 	mov.w	r9, #0
 800c1c2:	9700      	str	r7, [sp, #0]
 800c1c4:	4633      	mov	r3, r6
 800c1c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c1c8:	4621      	mov	r1, r4
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f000 f9e6 	bl	800c59c <_printf_common>
 800c1d0:	3001      	adds	r0, #1
 800c1d2:	f040 808d 	bne.w	800c2f0 <_printf_float+0x1d4>
 800c1d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c1da:	b00d      	add	sp, #52	; 0x34
 800c1dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1e0:	4642      	mov	r2, r8
 800c1e2:	464b      	mov	r3, r9
 800c1e4:	4640      	mov	r0, r8
 800c1e6:	4649      	mov	r1, r9
 800c1e8:	f7f4 fcb0 	bl	8000b4c <__aeabi_dcmpun>
 800c1ec:	b110      	cbz	r0, 800c1f4 <_printf_float+0xd8>
 800c1ee:	4a8c      	ldr	r2, [pc, #560]	; (800c420 <_printf_float+0x304>)
 800c1f0:	4b8c      	ldr	r3, [pc, #560]	; (800c424 <_printf_float+0x308>)
 800c1f2:	e7da      	b.n	800c1aa <_printf_float+0x8e>
 800c1f4:	6861      	ldr	r1, [r4, #4]
 800c1f6:	1c4b      	adds	r3, r1, #1
 800c1f8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c1fc:	a80a      	add	r0, sp, #40	; 0x28
 800c1fe:	d13e      	bne.n	800c27e <_printf_float+0x162>
 800c200:	2306      	movs	r3, #6
 800c202:	6063      	str	r3, [r4, #4]
 800c204:	2300      	movs	r3, #0
 800c206:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c20a:	ab09      	add	r3, sp, #36	; 0x24
 800c20c:	9300      	str	r3, [sp, #0]
 800c20e:	ec49 8b10 	vmov	d0, r8, r9
 800c212:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c216:	6022      	str	r2, [r4, #0]
 800c218:	f8cd a004 	str.w	sl, [sp, #4]
 800c21c:	6861      	ldr	r1, [r4, #4]
 800c21e:	4628      	mov	r0, r5
 800c220:	f7ff fee8 	bl	800bff4 <__cvt>
 800c224:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c228:	2b47      	cmp	r3, #71	; 0x47
 800c22a:	4680      	mov	r8, r0
 800c22c:	d109      	bne.n	800c242 <_printf_float+0x126>
 800c22e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c230:	1cd8      	adds	r0, r3, #3
 800c232:	db02      	blt.n	800c23a <_printf_float+0x11e>
 800c234:	6862      	ldr	r2, [r4, #4]
 800c236:	4293      	cmp	r3, r2
 800c238:	dd47      	ble.n	800c2ca <_printf_float+0x1ae>
 800c23a:	f1aa 0a02 	sub.w	sl, sl, #2
 800c23e:	fa5f fa8a 	uxtb.w	sl, sl
 800c242:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c246:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c248:	d824      	bhi.n	800c294 <_printf_float+0x178>
 800c24a:	3901      	subs	r1, #1
 800c24c:	4652      	mov	r2, sl
 800c24e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c252:	9109      	str	r1, [sp, #36]	; 0x24
 800c254:	f7ff ff2f 	bl	800c0b6 <__exponent>
 800c258:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c25a:	1813      	adds	r3, r2, r0
 800c25c:	2a01      	cmp	r2, #1
 800c25e:	4681      	mov	r9, r0
 800c260:	6123      	str	r3, [r4, #16]
 800c262:	dc02      	bgt.n	800c26a <_printf_float+0x14e>
 800c264:	6822      	ldr	r2, [r4, #0]
 800c266:	07d1      	lsls	r1, r2, #31
 800c268:	d501      	bpl.n	800c26e <_printf_float+0x152>
 800c26a:	3301      	adds	r3, #1
 800c26c:	6123      	str	r3, [r4, #16]
 800c26e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c272:	2b00      	cmp	r3, #0
 800c274:	d0a5      	beq.n	800c1c2 <_printf_float+0xa6>
 800c276:	232d      	movs	r3, #45	; 0x2d
 800c278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c27c:	e7a1      	b.n	800c1c2 <_printf_float+0xa6>
 800c27e:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c282:	f000 8177 	beq.w	800c574 <_printf_float+0x458>
 800c286:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c28a:	d1bb      	bne.n	800c204 <_printf_float+0xe8>
 800c28c:	2900      	cmp	r1, #0
 800c28e:	d1b9      	bne.n	800c204 <_printf_float+0xe8>
 800c290:	2301      	movs	r3, #1
 800c292:	e7b6      	b.n	800c202 <_printf_float+0xe6>
 800c294:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c298:	d119      	bne.n	800c2ce <_printf_float+0x1b2>
 800c29a:	2900      	cmp	r1, #0
 800c29c:	6863      	ldr	r3, [r4, #4]
 800c29e:	dd0c      	ble.n	800c2ba <_printf_float+0x19e>
 800c2a0:	6121      	str	r1, [r4, #16]
 800c2a2:	b913      	cbnz	r3, 800c2aa <_printf_float+0x18e>
 800c2a4:	6822      	ldr	r2, [r4, #0]
 800c2a6:	07d2      	lsls	r2, r2, #31
 800c2a8:	d502      	bpl.n	800c2b0 <_printf_float+0x194>
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	440b      	add	r3, r1
 800c2ae:	6123      	str	r3, [r4, #16]
 800c2b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c2b2:	65a3      	str	r3, [r4, #88]	; 0x58
 800c2b4:	f04f 0900 	mov.w	r9, #0
 800c2b8:	e7d9      	b.n	800c26e <_printf_float+0x152>
 800c2ba:	b913      	cbnz	r3, 800c2c2 <_printf_float+0x1a6>
 800c2bc:	6822      	ldr	r2, [r4, #0]
 800c2be:	07d0      	lsls	r0, r2, #31
 800c2c0:	d501      	bpl.n	800c2c6 <_printf_float+0x1aa>
 800c2c2:	3302      	adds	r3, #2
 800c2c4:	e7f3      	b.n	800c2ae <_printf_float+0x192>
 800c2c6:	2301      	movs	r3, #1
 800c2c8:	e7f1      	b.n	800c2ae <_printf_float+0x192>
 800c2ca:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c2ce:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	db05      	blt.n	800c2e2 <_printf_float+0x1c6>
 800c2d6:	6822      	ldr	r2, [r4, #0]
 800c2d8:	6123      	str	r3, [r4, #16]
 800c2da:	07d1      	lsls	r1, r2, #31
 800c2dc:	d5e8      	bpl.n	800c2b0 <_printf_float+0x194>
 800c2de:	3301      	adds	r3, #1
 800c2e0:	e7e5      	b.n	800c2ae <_printf_float+0x192>
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	bfd4      	ite	le
 800c2e6:	f1c3 0302 	rsble	r3, r3, #2
 800c2ea:	2301      	movgt	r3, #1
 800c2ec:	4413      	add	r3, r2
 800c2ee:	e7de      	b.n	800c2ae <_printf_float+0x192>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	055a      	lsls	r2, r3, #21
 800c2f4:	d407      	bmi.n	800c306 <_printf_float+0x1ea>
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	4642      	mov	r2, r8
 800c2fa:	4631      	mov	r1, r6
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	47b8      	blx	r7
 800c300:	3001      	adds	r0, #1
 800c302:	d12b      	bne.n	800c35c <_printf_float+0x240>
 800c304:	e767      	b.n	800c1d6 <_printf_float+0xba>
 800c306:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c30a:	f240 80dc 	bls.w	800c4c6 <_printf_float+0x3aa>
 800c30e:	2200      	movs	r2, #0
 800c310:	2300      	movs	r3, #0
 800c312:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c316:	f7f4 fbe7 	bl	8000ae8 <__aeabi_dcmpeq>
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d033      	beq.n	800c386 <_printf_float+0x26a>
 800c31e:	2301      	movs	r3, #1
 800c320:	4a41      	ldr	r2, [pc, #260]	; (800c428 <_printf_float+0x30c>)
 800c322:	4631      	mov	r1, r6
 800c324:	4628      	mov	r0, r5
 800c326:	47b8      	blx	r7
 800c328:	3001      	adds	r0, #1
 800c32a:	f43f af54 	beq.w	800c1d6 <_printf_float+0xba>
 800c32e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c332:	429a      	cmp	r2, r3
 800c334:	db02      	blt.n	800c33c <_printf_float+0x220>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	07d8      	lsls	r0, r3, #31
 800c33a:	d50f      	bpl.n	800c35c <_printf_float+0x240>
 800c33c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c340:	4631      	mov	r1, r6
 800c342:	4628      	mov	r0, r5
 800c344:	47b8      	blx	r7
 800c346:	3001      	adds	r0, #1
 800c348:	f43f af45 	beq.w	800c1d6 <_printf_float+0xba>
 800c34c:	f04f 0800 	mov.w	r8, #0
 800c350:	f104 091a 	add.w	r9, r4, #26
 800c354:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c356:	3b01      	subs	r3, #1
 800c358:	4543      	cmp	r3, r8
 800c35a:	dc09      	bgt.n	800c370 <_printf_float+0x254>
 800c35c:	6823      	ldr	r3, [r4, #0]
 800c35e:	079b      	lsls	r3, r3, #30
 800c360:	f100 8103 	bmi.w	800c56a <_printf_float+0x44e>
 800c364:	68e0      	ldr	r0, [r4, #12]
 800c366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c368:	4298      	cmp	r0, r3
 800c36a:	bfb8      	it	lt
 800c36c:	4618      	movlt	r0, r3
 800c36e:	e734      	b.n	800c1da <_printf_float+0xbe>
 800c370:	2301      	movs	r3, #1
 800c372:	464a      	mov	r2, r9
 800c374:	4631      	mov	r1, r6
 800c376:	4628      	mov	r0, r5
 800c378:	47b8      	blx	r7
 800c37a:	3001      	adds	r0, #1
 800c37c:	f43f af2b 	beq.w	800c1d6 <_printf_float+0xba>
 800c380:	f108 0801 	add.w	r8, r8, #1
 800c384:	e7e6      	b.n	800c354 <_printf_float+0x238>
 800c386:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c388:	2b00      	cmp	r3, #0
 800c38a:	dc2b      	bgt.n	800c3e4 <_printf_float+0x2c8>
 800c38c:	2301      	movs	r3, #1
 800c38e:	4a26      	ldr	r2, [pc, #152]	; (800c428 <_printf_float+0x30c>)
 800c390:	4631      	mov	r1, r6
 800c392:	4628      	mov	r0, r5
 800c394:	47b8      	blx	r7
 800c396:	3001      	adds	r0, #1
 800c398:	f43f af1d 	beq.w	800c1d6 <_printf_float+0xba>
 800c39c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c39e:	b923      	cbnz	r3, 800c3aa <_printf_float+0x28e>
 800c3a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3a2:	b913      	cbnz	r3, 800c3aa <_printf_float+0x28e>
 800c3a4:	6823      	ldr	r3, [r4, #0]
 800c3a6:	07d9      	lsls	r1, r3, #31
 800c3a8:	d5d8      	bpl.n	800c35c <_printf_float+0x240>
 800c3aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	47b8      	blx	r7
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	f43f af0e 	beq.w	800c1d6 <_printf_float+0xba>
 800c3ba:	f04f 0900 	mov.w	r9, #0
 800c3be:	f104 0a1a 	add.w	sl, r4, #26
 800c3c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c4:	425b      	negs	r3, r3
 800c3c6:	454b      	cmp	r3, r9
 800c3c8:	dc01      	bgt.n	800c3ce <_printf_float+0x2b2>
 800c3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3cc:	e794      	b.n	800c2f8 <_printf_float+0x1dc>
 800c3ce:	2301      	movs	r3, #1
 800c3d0:	4652      	mov	r2, sl
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4628      	mov	r0, r5
 800c3d6:	47b8      	blx	r7
 800c3d8:	3001      	adds	r0, #1
 800c3da:	f43f aefc 	beq.w	800c1d6 <_printf_float+0xba>
 800c3de:	f109 0901 	add.w	r9, r9, #1
 800c3e2:	e7ee      	b.n	800c3c2 <_printf_float+0x2a6>
 800c3e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c3e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	bfa8      	it	ge
 800c3ec:	461a      	movge	r2, r3
 800c3ee:	2a00      	cmp	r2, #0
 800c3f0:	4691      	mov	r9, r2
 800c3f2:	dd07      	ble.n	800c404 <_printf_float+0x2e8>
 800c3f4:	4613      	mov	r3, r2
 800c3f6:	4631      	mov	r1, r6
 800c3f8:	4642      	mov	r2, r8
 800c3fa:	4628      	mov	r0, r5
 800c3fc:	47b8      	blx	r7
 800c3fe:	3001      	adds	r0, #1
 800c400:	f43f aee9 	beq.w	800c1d6 <_printf_float+0xba>
 800c404:	f104 031a 	add.w	r3, r4, #26
 800c408:	f04f 0b00 	mov.w	fp, #0
 800c40c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c410:	9306      	str	r3, [sp, #24]
 800c412:	e015      	b.n	800c440 <_printf_float+0x324>
 800c414:	7fefffff 	.word	0x7fefffff
 800c418:	080dd321 	.word	0x080dd321
 800c41c:	080dd31d 	.word	0x080dd31d
 800c420:	080dd329 	.word	0x080dd329
 800c424:	080dd325 	.word	0x080dd325
 800c428:	080dd32d 	.word	0x080dd32d
 800c42c:	2301      	movs	r3, #1
 800c42e:	9a06      	ldr	r2, [sp, #24]
 800c430:	4631      	mov	r1, r6
 800c432:	4628      	mov	r0, r5
 800c434:	47b8      	blx	r7
 800c436:	3001      	adds	r0, #1
 800c438:	f43f aecd 	beq.w	800c1d6 <_printf_float+0xba>
 800c43c:	f10b 0b01 	add.w	fp, fp, #1
 800c440:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c444:	ebaa 0309 	sub.w	r3, sl, r9
 800c448:	455b      	cmp	r3, fp
 800c44a:	dcef      	bgt.n	800c42c <_printf_float+0x310>
 800c44c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c450:	429a      	cmp	r2, r3
 800c452:	44d0      	add	r8, sl
 800c454:	db15      	blt.n	800c482 <_printf_float+0x366>
 800c456:	6823      	ldr	r3, [r4, #0]
 800c458:	07da      	lsls	r2, r3, #31
 800c45a:	d412      	bmi.n	800c482 <_printf_float+0x366>
 800c45c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c45e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c460:	eba3 020a 	sub.w	r2, r3, sl
 800c464:	eba3 0a01 	sub.w	sl, r3, r1
 800c468:	4592      	cmp	sl, r2
 800c46a:	bfa8      	it	ge
 800c46c:	4692      	movge	sl, r2
 800c46e:	f1ba 0f00 	cmp.w	sl, #0
 800c472:	dc0e      	bgt.n	800c492 <_printf_float+0x376>
 800c474:	f04f 0800 	mov.w	r8, #0
 800c478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c47c:	f104 091a 	add.w	r9, r4, #26
 800c480:	e019      	b.n	800c4b6 <_printf_float+0x39a>
 800c482:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c486:	4631      	mov	r1, r6
 800c488:	4628      	mov	r0, r5
 800c48a:	47b8      	blx	r7
 800c48c:	3001      	adds	r0, #1
 800c48e:	d1e5      	bne.n	800c45c <_printf_float+0x340>
 800c490:	e6a1      	b.n	800c1d6 <_printf_float+0xba>
 800c492:	4653      	mov	r3, sl
 800c494:	4642      	mov	r2, r8
 800c496:	4631      	mov	r1, r6
 800c498:	4628      	mov	r0, r5
 800c49a:	47b8      	blx	r7
 800c49c:	3001      	adds	r0, #1
 800c49e:	d1e9      	bne.n	800c474 <_printf_float+0x358>
 800c4a0:	e699      	b.n	800c1d6 <_printf_float+0xba>
 800c4a2:	2301      	movs	r3, #1
 800c4a4:	464a      	mov	r2, r9
 800c4a6:	4631      	mov	r1, r6
 800c4a8:	4628      	mov	r0, r5
 800c4aa:	47b8      	blx	r7
 800c4ac:	3001      	adds	r0, #1
 800c4ae:	f43f ae92 	beq.w	800c1d6 <_printf_float+0xba>
 800c4b2:	f108 0801 	add.w	r8, r8, #1
 800c4b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c4ba:	1a9b      	subs	r3, r3, r2
 800c4bc:	eba3 030a 	sub.w	r3, r3, sl
 800c4c0:	4543      	cmp	r3, r8
 800c4c2:	dcee      	bgt.n	800c4a2 <_printf_float+0x386>
 800c4c4:	e74a      	b.n	800c35c <_printf_float+0x240>
 800c4c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c4c8:	2a01      	cmp	r2, #1
 800c4ca:	dc01      	bgt.n	800c4d0 <_printf_float+0x3b4>
 800c4cc:	07db      	lsls	r3, r3, #31
 800c4ce:	d53a      	bpl.n	800c546 <_printf_float+0x42a>
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	4642      	mov	r2, r8
 800c4d4:	4631      	mov	r1, r6
 800c4d6:	4628      	mov	r0, r5
 800c4d8:	47b8      	blx	r7
 800c4da:	3001      	adds	r0, #1
 800c4dc:	f43f ae7b 	beq.w	800c1d6 <_printf_float+0xba>
 800c4e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c4e4:	4631      	mov	r1, r6
 800c4e6:	4628      	mov	r0, r5
 800c4e8:	47b8      	blx	r7
 800c4ea:	3001      	adds	r0, #1
 800c4ec:	f108 0801 	add.w	r8, r8, #1
 800c4f0:	f43f ae71 	beq.w	800c1d6 <_printf_float+0xba>
 800c4f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	f103 3aff 	add.w	sl, r3, #4294967295
 800c4fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c500:	2300      	movs	r3, #0
 800c502:	f7f4 faf1 	bl	8000ae8 <__aeabi_dcmpeq>
 800c506:	b9c8      	cbnz	r0, 800c53c <_printf_float+0x420>
 800c508:	4653      	mov	r3, sl
 800c50a:	4642      	mov	r2, r8
 800c50c:	4631      	mov	r1, r6
 800c50e:	4628      	mov	r0, r5
 800c510:	47b8      	blx	r7
 800c512:	3001      	adds	r0, #1
 800c514:	d10e      	bne.n	800c534 <_printf_float+0x418>
 800c516:	e65e      	b.n	800c1d6 <_printf_float+0xba>
 800c518:	2301      	movs	r3, #1
 800c51a:	4652      	mov	r2, sl
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	47b8      	blx	r7
 800c522:	3001      	adds	r0, #1
 800c524:	f43f ae57 	beq.w	800c1d6 <_printf_float+0xba>
 800c528:	f108 0801 	add.w	r8, r8, #1
 800c52c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c52e:	3b01      	subs	r3, #1
 800c530:	4543      	cmp	r3, r8
 800c532:	dcf1      	bgt.n	800c518 <_printf_float+0x3fc>
 800c534:	464b      	mov	r3, r9
 800c536:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c53a:	e6de      	b.n	800c2fa <_printf_float+0x1de>
 800c53c:	f04f 0800 	mov.w	r8, #0
 800c540:	f104 0a1a 	add.w	sl, r4, #26
 800c544:	e7f2      	b.n	800c52c <_printf_float+0x410>
 800c546:	2301      	movs	r3, #1
 800c548:	e7df      	b.n	800c50a <_printf_float+0x3ee>
 800c54a:	2301      	movs	r3, #1
 800c54c:	464a      	mov	r2, r9
 800c54e:	4631      	mov	r1, r6
 800c550:	4628      	mov	r0, r5
 800c552:	47b8      	blx	r7
 800c554:	3001      	adds	r0, #1
 800c556:	f43f ae3e 	beq.w	800c1d6 <_printf_float+0xba>
 800c55a:	f108 0801 	add.w	r8, r8, #1
 800c55e:	68e3      	ldr	r3, [r4, #12]
 800c560:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c562:	1a9b      	subs	r3, r3, r2
 800c564:	4543      	cmp	r3, r8
 800c566:	dcf0      	bgt.n	800c54a <_printf_float+0x42e>
 800c568:	e6fc      	b.n	800c364 <_printf_float+0x248>
 800c56a:	f04f 0800 	mov.w	r8, #0
 800c56e:	f104 0919 	add.w	r9, r4, #25
 800c572:	e7f4      	b.n	800c55e <_printf_float+0x442>
 800c574:	2900      	cmp	r1, #0
 800c576:	f43f ae8b 	beq.w	800c290 <_printf_float+0x174>
 800c57a:	2300      	movs	r3, #0
 800c57c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c580:	ab09      	add	r3, sp, #36	; 0x24
 800c582:	9300      	str	r3, [sp, #0]
 800c584:	ec49 8b10 	vmov	d0, r8, r9
 800c588:	6022      	str	r2, [r4, #0]
 800c58a:	f8cd a004 	str.w	sl, [sp, #4]
 800c58e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c592:	4628      	mov	r0, r5
 800c594:	f7ff fd2e 	bl	800bff4 <__cvt>
 800c598:	4680      	mov	r8, r0
 800c59a:	e648      	b.n	800c22e <_printf_float+0x112>

0800c59c <_printf_common>:
 800c59c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5a0:	4691      	mov	r9, r2
 800c5a2:	461f      	mov	r7, r3
 800c5a4:	688a      	ldr	r2, [r1, #8]
 800c5a6:	690b      	ldr	r3, [r1, #16]
 800c5a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c5ac:	4293      	cmp	r3, r2
 800c5ae:	bfb8      	it	lt
 800c5b0:	4613      	movlt	r3, r2
 800c5b2:	f8c9 3000 	str.w	r3, [r9]
 800c5b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5ba:	4606      	mov	r6, r0
 800c5bc:	460c      	mov	r4, r1
 800c5be:	b112      	cbz	r2, 800c5c6 <_printf_common+0x2a>
 800c5c0:	3301      	adds	r3, #1
 800c5c2:	f8c9 3000 	str.w	r3, [r9]
 800c5c6:	6823      	ldr	r3, [r4, #0]
 800c5c8:	0699      	lsls	r1, r3, #26
 800c5ca:	bf42      	ittt	mi
 800c5cc:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c5d0:	3302      	addmi	r3, #2
 800c5d2:	f8c9 3000 	strmi.w	r3, [r9]
 800c5d6:	6825      	ldr	r5, [r4, #0]
 800c5d8:	f015 0506 	ands.w	r5, r5, #6
 800c5dc:	d107      	bne.n	800c5ee <_printf_common+0x52>
 800c5de:	f104 0a19 	add.w	sl, r4, #25
 800c5e2:	68e3      	ldr	r3, [r4, #12]
 800c5e4:	f8d9 2000 	ldr.w	r2, [r9]
 800c5e8:	1a9b      	subs	r3, r3, r2
 800c5ea:	42ab      	cmp	r3, r5
 800c5ec:	dc28      	bgt.n	800c640 <_printf_common+0xa4>
 800c5ee:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c5f2:	6822      	ldr	r2, [r4, #0]
 800c5f4:	3300      	adds	r3, #0
 800c5f6:	bf18      	it	ne
 800c5f8:	2301      	movne	r3, #1
 800c5fa:	0692      	lsls	r2, r2, #26
 800c5fc:	d42d      	bmi.n	800c65a <_printf_common+0xbe>
 800c5fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c602:	4639      	mov	r1, r7
 800c604:	4630      	mov	r0, r6
 800c606:	47c0      	blx	r8
 800c608:	3001      	adds	r0, #1
 800c60a:	d020      	beq.n	800c64e <_printf_common+0xb2>
 800c60c:	6823      	ldr	r3, [r4, #0]
 800c60e:	68e5      	ldr	r5, [r4, #12]
 800c610:	f8d9 2000 	ldr.w	r2, [r9]
 800c614:	f003 0306 	and.w	r3, r3, #6
 800c618:	2b04      	cmp	r3, #4
 800c61a:	bf08      	it	eq
 800c61c:	1aad      	subeq	r5, r5, r2
 800c61e:	68a3      	ldr	r3, [r4, #8]
 800c620:	6922      	ldr	r2, [r4, #16]
 800c622:	bf0c      	ite	eq
 800c624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c628:	2500      	movne	r5, #0
 800c62a:	4293      	cmp	r3, r2
 800c62c:	bfc4      	itt	gt
 800c62e:	1a9b      	subgt	r3, r3, r2
 800c630:	18ed      	addgt	r5, r5, r3
 800c632:	f04f 0900 	mov.w	r9, #0
 800c636:	341a      	adds	r4, #26
 800c638:	454d      	cmp	r5, r9
 800c63a:	d11a      	bne.n	800c672 <_printf_common+0xd6>
 800c63c:	2000      	movs	r0, #0
 800c63e:	e008      	b.n	800c652 <_printf_common+0xb6>
 800c640:	2301      	movs	r3, #1
 800c642:	4652      	mov	r2, sl
 800c644:	4639      	mov	r1, r7
 800c646:	4630      	mov	r0, r6
 800c648:	47c0      	blx	r8
 800c64a:	3001      	adds	r0, #1
 800c64c:	d103      	bne.n	800c656 <_printf_common+0xba>
 800c64e:	f04f 30ff 	mov.w	r0, #4294967295
 800c652:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c656:	3501      	adds	r5, #1
 800c658:	e7c3      	b.n	800c5e2 <_printf_common+0x46>
 800c65a:	18e1      	adds	r1, r4, r3
 800c65c:	1c5a      	adds	r2, r3, #1
 800c65e:	2030      	movs	r0, #48	; 0x30
 800c660:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c664:	4422      	add	r2, r4
 800c666:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c66a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c66e:	3302      	adds	r3, #2
 800c670:	e7c5      	b.n	800c5fe <_printf_common+0x62>
 800c672:	2301      	movs	r3, #1
 800c674:	4622      	mov	r2, r4
 800c676:	4639      	mov	r1, r7
 800c678:	4630      	mov	r0, r6
 800c67a:	47c0      	blx	r8
 800c67c:	3001      	adds	r0, #1
 800c67e:	d0e6      	beq.n	800c64e <_printf_common+0xb2>
 800c680:	f109 0901 	add.w	r9, r9, #1
 800c684:	e7d8      	b.n	800c638 <_printf_common+0x9c>
	...

0800c688 <_printf_i>:
 800c688:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c68c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c690:	460c      	mov	r4, r1
 800c692:	7e09      	ldrb	r1, [r1, #24]
 800c694:	b085      	sub	sp, #20
 800c696:	296e      	cmp	r1, #110	; 0x6e
 800c698:	4617      	mov	r7, r2
 800c69a:	4606      	mov	r6, r0
 800c69c:	4698      	mov	r8, r3
 800c69e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6a0:	f000 80b3 	beq.w	800c80a <_printf_i+0x182>
 800c6a4:	d822      	bhi.n	800c6ec <_printf_i+0x64>
 800c6a6:	2963      	cmp	r1, #99	; 0x63
 800c6a8:	d036      	beq.n	800c718 <_printf_i+0x90>
 800c6aa:	d80a      	bhi.n	800c6c2 <_printf_i+0x3a>
 800c6ac:	2900      	cmp	r1, #0
 800c6ae:	f000 80b9 	beq.w	800c824 <_printf_i+0x19c>
 800c6b2:	2958      	cmp	r1, #88	; 0x58
 800c6b4:	f000 8083 	beq.w	800c7be <_printf_i+0x136>
 800c6b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c6bc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c6c0:	e032      	b.n	800c728 <_printf_i+0xa0>
 800c6c2:	2964      	cmp	r1, #100	; 0x64
 800c6c4:	d001      	beq.n	800c6ca <_printf_i+0x42>
 800c6c6:	2969      	cmp	r1, #105	; 0x69
 800c6c8:	d1f6      	bne.n	800c6b8 <_printf_i+0x30>
 800c6ca:	6820      	ldr	r0, [r4, #0]
 800c6cc:	6813      	ldr	r3, [r2, #0]
 800c6ce:	0605      	lsls	r5, r0, #24
 800c6d0:	f103 0104 	add.w	r1, r3, #4
 800c6d4:	d52a      	bpl.n	800c72c <_printf_i+0xa4>
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	6011      	str	r1, [r2, #0]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	da03      	bge.n	800c6e6 <_printf_i+0x5e>
 800c6de:	222d      	movs	r2, #45	; 0x2d
 800c6e0:	425b      	negs	r3, r3
 800c6e2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c6e6:	486f      	ldr	r0, [pc, #444]	; (800c8a4 <_printf_i+0x21c>)
 800c6e8:	220a      	movs	r2, #10
 800c6ea:	e039      	b.n	800c760 <_printf_i+0xd8>
 800c6ec:	2973      	cmp	r1, #115	; 0x73
 800c6ee:	f000 809d 	beq.w	800c82c <_printf_i+0x1a4>
 800c6f2:	d808      	bhi.n	800c706 <_printf_i+0x7e>
 800c6f4:	296f      	cmp	r1, #111	; 0x6f
 800c6f6:	d020      	beq.n	800c73a <_printf_i+0xb2>
 800c6f8:	2970      	cmp	r1, #112	; 0x70
 800c6fa:	d1dd      	bne.n	800c6b8 <_printf_i+0x30>
 800c6fc:	6823      	ldr	r3, [r4, #0]
 800c6fe:	f043 0320 	orr.w	r3, r3, #32
 800c702:	6023      	str	r3, [r4, #0]
 800c704:	e003      	b.n	800c70e <_printf_i+0x86>
 800c706:	2975      	cmp	r1, #117	; 0x75
 800c708:	d017      	beq.n	800c73a <_printf_i+0xb2>
 800c70a:	2978      	cmp	r1, #120	; 0x78
 800c70c:	d1d4      	bne.n	800c6b8 <_printf_i+0x30>
 800c70e:	2378      	movs	r3, #120	; 0x78
 800c710:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c714:	4864      	ldr	r0, [pc, #400]	; (800c8a8 <_printf_i+0x220>)
 800c716:	e055      	b.n	800c7c4 <_printf_i+0x13c>
 800c718:	6813      	ldr	r3, [r2, #0]
 800c71a:	1d19      	adds	r1, r3, #4
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6011      	str	r1, [r2, #0]
 800c720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c728:	2301      	movs	r3, #1
 800c72a:	e08c      	b.n	800c846 <_printf_i+0x1be>
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	6011      	str	r1, [r2, #0]
 800c730:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c734:	bf18      	it	ne
 800c736:	b21b      	sxthne	r3, r3
 800c738:	e7cf      	b.n	800c6da <_printf_i+0x52>
 800c73a:	6813      	ldr	r3, [r2, #0]
 800c73c:	6825      	ldr	r5, [r4, #0]
 800c73e:	1d18      	adds	r0, r3, #4
 800c740:	6010      	str	r0, [r2, #0]
 800c742:	0628      	lsls	r0, r5, #24
 800c744:	d501      	bpl.n	800c74a <_printf_i+0xc2>
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	e002      	b.n	800c750 <_printf_i+0xc8>
 800c74a:	0668      	lsls	r0, r5, #25
 800c74c:	d5fb      	bpl.n	800c746 <_printf_i+0xbe>
 800c74e:	881b      	ldrh	r3, [r3, #0]
 800c750:	4854      	ldr	r0, [pc, #336]	; (800c8a4 <_printf_i+0x21c>)
 800c752:	296f      	cmp	r1, #111	; 0x6f
 800c754:	bf14      	ite	ne
 800c756:	220a      	movne	r2, #10
 800c758:	2208      	moveq	r2, #8
 800c75a:	2100      	movs	r1, #0
 800c75c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c760:	6865      	ldr	r5, [r4, #4]
 800c762:	60a5      	str	r5, [r4, #8]
 800c764:	2d00      	cmp	r5, #0
 800c766:	f2c0 8095 	blt.w	800c894 <_printf_i+0x20c>
 800c76a:	6821      	ldr	r1, [r4, #0]
 800c76c:	f021 0104 	bic.w	r1, r1, #4
 800c770:	6021      	str	r1, [r4, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d13d      	bne.n	800c7f2 <_printf_i+0x16a>
 800c776:	2d00      	cmp	r5, #0
 800c778:	f040 808e 	bne.w	800c898 <_printf_i+0x210>
 800c77c:	4665      	mov	r5, ip
 800c77e:	2a08      	cmp	r2, #8
 800c780:	d10b      	bne.n	800c79a <_printf_i+0x112>
 800c782:	6823      	ldr	r3, [r4, #0]
 800c784:	07db      	lsls	r3, r3, #31
 800c786:	d508      	bpl.n	800c79a <_printf_i+0x112>
 800c788:	6923      	ldr	r3, [r4, #16]
 800c78a:	6862      	ldr	r2, [r4, #4]
 800c78c:	429a      	cmp	r2, r3
 800c78e:	bfde      	ittt	le
 800c790:	2330      	movle	r3, #48	; 0x30
 800c792:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c796:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c79a:	ebac 0305 	sub.w	r3, ip, r5
 800c79e:	6123      	str	r3, [r4, #16]
 800c7a0:	f8cd 8000 	str.w	r8, [sp]
 800c7a4:	463b      	mov	r3, r7
 800c7a6:	aa03      	add	r2, sp, #12
 800c7a8:	4621      	mov	r1, r4
 800c7aa:	4630      	mov	r0, r6
 800c7ac:	f7ff fef6 	bl	800c59c <_printf_common>
 800c7b0:	3001      	adds	r0, #1
 800c7b2:	d14d      	bne.n	800c850 <_printf_i+0x1c8>
 800c7b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7b8:	b005      	add	sp, #20
 800c7ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c7be:	4839      	ldr	r0, [pc, #228]	; (800c8a4 <_printf_i+0x21c>)
 800c7c0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c7c4:	6813      	ldr	r3, [r2, #0]
 800c7c6:	6821      	ldr	r1, [r4, #0]
 800c7c8:	1d1d      	adds	r5, r3, #4
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	6015      	str	r5, [r2, #0]
 800c7ce:	060a      	lsls	r2, r1, #24
 800c7d0:	d50b      	bpl.n	800c7ea <_printf_i+0x162>
 800c7d2:	07ca      	lsls	r2, r1, #31
 800c7d4:	bf44      	itt	mi
 800c7d6:	f041 0120 	orrmi.w	r1, r1, #32
 800c7da:	6021      	strmi	r1, [r4, #0]
 800c7dc:	b91b      	cbnz	r3, 800c7e6 <_printf_i+0x15e>
 800c7de:	6822      	ldr	r2, [r4, #0]
 800c7e0:	f022 0220 	bic.w	r2, r2, #32
 800c7e4:	6022      	str	r2, [r4, #0]
 800c7e6:	2210      	movs	r2, #16
 800c7e8:	e7b7      	b.n	800c75a <_printf_i+0xd2>
 800c7ea:	064d      	lsls	r5, r1, #25
 800c7ec:	bf48      	it	mi
 800c7ee:	b29b      	uxthmi	r3, r3
 800c7f0:	e7ef      	b.n	800c7d2 <_printf_i+0x14a>
 800c7f2:	4665      	mov	r5, ip
 800c7f4:	fbb3 f1f2 	udiv	r1, r3, r2
 800c7f8:	fb02 3311 	mls	r3, r2, r1, r3
 800c7fc:	5cc3      	ldrb	r3, [r0, r3]
 800c7fe:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c802:	460b      	mov	r3, r1
 800c804:	2900      	cmp	r1, #0
 800c806:	d1f5      	bne.n	800c7f4 <_printf_i+0x16c>
 800c808:	e7b9      	b.n	800c77e <_printf_i+0xf6>
 800c80a:	6813      	ldr	r3, [r2, #0]
 800c80c:	6825      	ldr	r5, [r4, #0]
 800c80e:	6961      	ldr	r1, [r4, #20]
 800c810:	1d18      	adds	r0, r3, #4
 800c812:	6010      	str	r0, [r2, #0]
 800c814:	0628      	lsls	r0, r5, #24
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	d501      	bpl.n	800c81e <_printf_i+0x196>
 800c81a:	6019      	str	r1, [r3, #0]
 800c81c:	e002      	b.n	800c824 <_printf_i+0x19c>
 800c81e:	066a      	lsls	r2, r5, #25
 800c820:	d5fb      	bpl.n	800c81a <_printf_i+0x192>
 800c822:	8019      	strh	r1, [r3, #0]
 800c824:	2300      	movs	r3, #0
 800c826:	6123      	str	r3, [r4, #16]
 800c828:	4665      	mov	r5, ip
 800c82a:	e7b9      	b.n	800c7a0 <_printf_i+0x118>
 800c82c:	6813      	ldr	r3, [r2, #0]
 800c82e:	1d19      	adds	r1, r3, #4
 800c830:	6011      	str	r1, [r2, #0]
 800c832:	681d      	ldr	r5, [r3, #0]
 800c834:	6862      	ldr	r2, [r4, #4]
 800c836:	2100      	movs	r1, #0
 800c838:	4628      	mov	r0, r5
 800c83a:	f7f3 fce1 	bl	8000200 <memchr>
 800c83e:	b108      	cbz	r0, 800c844 <_printf_i+0x1bc>
 800c840:	1b40      	subs	r0, r0, r5
 800c842:	6060      	str	r0, [r4, #4]
 800c844:	6863      	ldr	r3, [r4, #4]
 800c846:	6123      	str	r3, [r4, #16]
 800c848:	2300      	movs	r3, #0
 800c84a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c84e:	e7a7      	b.n	800c7a0 <_printf_i+0x118>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	462a      	mov	r2, r5
 800c854:	4639      	mov	r1, r7
 800c856:	4630      	mov	r0, r6
 800c858:	47c0      	blx	r8
 800c85a:	3001      	adds	r0, #1
 800c85c:	d0aa      	beq.n	800c7b4 <_printf_i+0x12c>
 800c85e:	6823      	ldr	r3, [r4, #0]
 800c860:	079b      	lsls	r3, r3, #30
 800c862:	d413      	bmi.n	800c88c <_printf_i+0x204>
 800c864:	68e0      	ldr	r0, [r4, #12]
 800c866:	9b03      	ldr	r3, [sp, #12]
 800c868:	4298      	cmp	r0, r3
 800c86a:	bfb8      	it	lt
 800c86c:	4618      	movlt	r0, r3
 800c86e:	e7a3      	b.n	800c7b8 <_printf_i+0x130>
 800c870:	2301      	movs	r3, #1
 800c872:	464a      	mov	r2, r9
 800c874:	4639      	mov	r1, r7
 800c876:	4630      	mov	r0, r6
 800c878:	47c0      	blx	r8
 800c87a:	3001      	adds	r0, #1
 800c87c:	d09a      	beq.n	800c7b4 <_printf_i+0x12c>
 800c87e:	3501      	adds	r5, #1
 800c880:	68e3      	ldr	r3, [r4, #12]
 800c882:	9a03      	ldr	r2, [sp, #12]
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	42ab      	cmp	r3, r5
 800c888:	dcf2      	bgt.n	800c870 <_printf_i+0x1e8>
 800c88a:	e7eb      	b.n	800c864 <_printf_i+0x1dc>
 800c88c:	2500      	movs	r5, #0
 800c88e:	f104 0919 	add.w	r9, r4, #25
 800c892:	e7f5      	b.n	800c880 <_printf_i+0x1f8>
 800c894:	2b00      	cmp	r3, #0
 800c896:	d1ac      	bne.n	800c7f2 <_printf_i+0x16a>
 800c898:	7803      	ldrb	r3, [r0, #0]
 800c89a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c89e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c8a2:	e76c      	b.n	800c77e <_printf_i+0xf6>
 800c8a4:	080dd32f 	.word	0x080dd32f
 800c8a8:	080dd340 	.word	0x080dd340

0800c8ac <_sbrk_r>:
 800c8ac:	b538      	push	{r3, r4, r5, lr}
 800c8ae:	4c06      	ldr	r4, [pc, #24]	; (800c8c8 <_sbrk_r+0x1c>)
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	4605      	mov	r5, r0
 800c8b4:	4608      	mov	r0, r1
 800c8b6:	6023      	str	r3, [r4, #0]
 800c8b8:	f7f5 ff20 	bl	80026fc <_sbrk>
 800c8bc:	1c43      	adds	r3, r0, #1
 800c8be:	d102      	bne.n	800c8c6 <_sbrk_r+0x1a>
 800c8c0:	6823      	ldr	r3, [r4, #0]
 800c8c2:	b103      	cbz	r3, 800c8c6 <_sbrk_r+0x1a>
 800c8c4:	602b      	str	r3, [r5, #0]
 800c8c6:	bd38      	pop	{r3, r4, r5, pc}
 800c8c8:	20000eb0 	.word	0x20000eb0

0800c8cc <_raise_r>:
 800c8cc:	291f      	cmp	r1, #31
 800c8ce:	b538      	push	{r3, r4, r5, lr}
 800c8d0:	4604      	mov	r4, r0
 800c8d2:	460d      	mov	r5, r1
 800c8d4:	d904      	bls.n	800c8e0 <_raise_r+0x14>
 800c8d6:	2316      	movs	r3, #22
 800c8d8:	6003      	str	r3, [r0, #0]
 800c8da:	f04f 30ff 	mov.w	r0, #4294967295
 800c8de:	bd38      	pop	{r3, r4, r5, pc}
 800c8e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c8e2:	b112      	cbz	r2, 800c8ea <_raise_r+0x1e>
 800c8e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8e8:	b94b      	cbnz	r3, 800c8fe <_raise_r+0x32>
 800c8ea:	4620      	mov	r0, r4
 800c8ec:	f000 f830 	bl	800c950 <_getpid_r>
 800c8f0:	462a      	mov	r2, r5
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c8fa:	f000 b817 	b.w	800c92c <_kill_r>
 800c8fe:	2b01      	cmp	r3, #1
 800c900:	d00a      	beq.n	800c918 <_raise_r+0x4c>
 800c902:	1c59      	adds	r1, r3, #1
 800c904:	d103      	bne.n	800c90e <_raise_r+0x42>
 800c906:	2316      	movs	r3, #22
 800c908:	6003      	str	r3, [r0, #0]
 800c90a:	2001      	movs	r0, #1
 800c90c:	e7e7      	b.n	800c8de <_raise_r+0x12>
 800c90e:	2400      	movs	r4, #0
 800c910:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c914:	4628      	mov	r0, r5
 800c916:	4798      	blx	r3
 800c918:	2000      	movs	r0, #0
 800c91a:	e7e0      	b.n	800c8de <_raise_r+0x12>

0800c91c <raise>:
 800c91c:	4b02      	ldr	r3, [pc, #8]	; (800c928 <raise+0xc>)
 800c91e:	4601      	mov	r1, r0
 800c920:	6818      	ldr	r0, [r3, #0]
 800c922:	f7ff bfd3 	b.w	800c8cc <_raise_r>
 800c926:	bf00      	nop
 800c928:	2000003c 	.word	0x2000003c

0800c92c <_kill_r>:
 800c92c:	b538      	push	{r3, r4, r5, lr}
 800c92e:	4c07      	ldr	r4, [pc, #28]	; (800c94c <_kill_r+0x20>)
 800c930:	2300      	movs	r3, #0
 800c932:	4605      	mov	r5, r0
 800c934:	4608      	mov	r0, r1
 800c936:	4611      	mov	r1, r2
 800c938:	6023      	str	r3, [r4, #0]
 800c93a:	f7f5 fe57 	bl	80025ec <_kill>
 800c93e:	1c43      	adds	r3, r0, #1
 800c940:	d102      	bne.n	800c948 <_kill_r+0x1c>
 800c942:	6823      	ldr	r3, [r4, #0]
 800c944:	b103      	cbz	r3, 800c948 <_kill_r+0x1c>
 800c946:	602b      	str	r3, [r5, #0]
 800c948:	bd38      	pop	{r3, r4, r5, pc}
 800c94a:	bf00      	nop
 800c94c:	20000eb0 	.word	0x20000eb0

0800c950 <_getpid_r>:
 800c950:	f7f5 be44 	b.w	80025dc <_getpid>

0800c954 <siprintf>:
 800c954:	b40e      	push	{r1, r2, r3}
 800c956:	b500      	push	{lr}
 800c958:	b09c      	sub	sp, #112	; 0x70
 800c95a:	ab1d      	add	r3, sp, #116	; 0x74
 800c95c:	9002      	str	r0, [sp, #8]
 800c95e:	9006      	str	r0, [sp, #24]
 800c960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c964:	4809      	ldr	r0, [pc, #36]	; (800c98c <siprintf+0x38>)
 800c966:	9107      	str	r1, [sp, #28]
 800c968:	9104      	str	r1, [sp, #16]
 800c96a:	4909      	ldr	r1, [pc, #36]	; (800c990 <siprintf+0x3c>)
 800c96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c970:	9105      	str	r1, [sp, #20]
 800c972:	6800      	ldr	r0, [r0, #0]
 800c974:	9301      	str	r3, [sp, #4]
 800c976:	a902      	add	r1, sp, #8
 800c978:	f001 fcde 	bl	800e338 <_svfiprintf_r>
 800c97c:	9b02      	ldr	r3, [sp, #8]
 800c97e:	2200      	movs	r2, #0
 800c980:	701a      	strb	r2, [r3, #0]
 800c982:	b01c      	add	sp, #112	; 0x70
 800c984:	f85d eb04 	ldr.w	lr, [sp], #4
 800c988:	b003      	add	sp, #12
 800c98a:	4770      	bx	lr
 800c98c:	2000003c 	.word	0x2000003c
 800c990:	ffff0208 	.word	0xffff0208

0800c994 <strncmp>:
 800c994:	b510      	push	{r4, lr}
 800c996:	b16a      	cbz	r2, 800c9b4 <strncmp+0x20>
 800c998:	3901      	subs	r1, #1
 800c99a:	1884      	adds	r4, r0, r2
 800c99c:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c9a0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c9a4:	4293      	cmp	r3, r2
 800c9a6:	d103      	bne.n	800c9b0 <strncmp+0x1c>
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d001      	beq.n	800c9b0 <strncmp+0x1c>
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1f5      	bne.n	800c99c <strncmp+0x8>
 800c9b0:	1a98      	subs	r0, r3, r2
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	e7fc      	b.n	800c9b2 <strncmp+0x1e>

0800c9b8 <__swbuf_r>:
 800c9b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c9ba:	460e      	mov	r6, r1
 800c9bc:	4614      	mov	r4, r2
 800c9be:	4605      	mov	r5, r0
 800c9c0:	b118      	cbz	r0, 800c9ca <__swbuf_r+0x12>
 800c9c2:	6983      	ldr	r3, [r0, #24]
 800c9c4:	b90b      	cbnz	r3, 800c9ca <__swbuf_r+0x12>
 800c9c6:	f001 f84f 	bl	800da68 <__sinit>
 800c9ca:	4b21      	ldr	r3, [pc, #132]	; (800ca50 <__swbuf_r+0x98>)
 800c9cc:	429c      	cmp	r4, r3
 800c9ce:	d12a      	bne.n	800ca26 <__swbuf_r+0x6e>
 800c9d0:	686c      	ldr	r4, [r5, #4]
 800c9d2:	69a3      	ldr	r3, [r4, #24]
 800c9d4:	60a3      	str	r3, [r4, #8]
 800c9d6:	89a3      	ldrh	r3, [r4, #12]
 800c9d8:	071a      	lsls	r2, r3, #28
 800c9da:	d52e      	bpl.n	800ca3a <__swbuf_r+0x82>
 800c9dc:	6923      	ldr	r3, [r4, #16]
 800c9de:	b363      	cbz	r3, 800ca3a <__swbuf_r+0x82>
 800c9e0:	6923      	ldr	r3, [r4, #16]
 800c9e2:	6820      	ldr	r0, [r4, #0]
 800c9e4:	1ac0      	subs	r0, r0, r3
 800c9e6:	6963      	ldr	r3, [r4, #20]
 800c9e8:	b2f6      	uxtb	r6, r6
 800c9ea:	4283      	cmp	r3, r0
 800c9ec:	4637      	mov	r7, r6
 800c9ee:	dc04      	bgt.n	800c9fa <__swbuf_r+0x42>
 800c9f0:	4621      	mov	r1, r4
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	f000 ffce 	bl	800d994 <_fflush_r>
 800c9f8:	bb28      	cbnz	r0, 800ca46 <__swbuf_r+0x8e>
 800c9fa:	68a3      	ldr	r3, [r4, #8]
 800c9fc:	3b01      	subs	r3, #1
 800c9fe:	60a3      	str	r3, [r4, #8]
 800ca00:	6823      	ldr	r3, [r4, #0]
 800ca02:	1c5a      	adds	r2, r3, #1
 800ca04:	6022      	str	r2, [r4, #0]
 800ca06:	701e      	strb	r6, [r3, #0]
 800ca08:	6963      	ldr	r3, [r4, #20]
 800ca0a:	3001      	adds	r0, #1
 800ca0c:	4283      	cmp	r3, r0
 800ca0e:	d004      	beq.n	800ca1a <__swbuf_r+0x62>
 800ca10:	89a3      	ldrh	r3, [r4, #12]
 800ca12:	07db      	lsls	r3, r3, #31
 800ca14:	d519      	bpl.n	800ca4a <__swbuf_r+0x92>
 800ca16:	2e0a      	cmp	r6, #10
 800ca18:	d117      	bne.n	800ca4a <__swbuf_r+0x92>
 800ca1a:	4621      	mov	r1, r4
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f000 ffb9 	bl	800d994 <_fflush_r>
 800ca22:	b190      	cbz	r0, 800ca4a <__swbuf_r+0x92>
 800ca24:	e00f      	b.n	800ca46 <__swbuf_r+0x8e>
 800ca26:	4b0b      	ldr	r3, [pc, #44]	; (800ca54 <__swbuf_r+0x9c>)
 800ca28:	429c      	cmp	r4, r3
 800ca2a:	d101      	bne.n	800ca30 <__swbuf_r+0x78>
 800ca2c:	68ac      	ldr	r4, [r5, #8]
 800ca2e:	e7d0      	b.n	800c9d2 <__swbuf_r+0x1a>
 800ca30:	4b09      	ldr	r3, [pc, #36]	; (800ca58 <__swbuf_r+0xa0>)
 800ca32:	429c      	cmp	r4, r3
 800ca34:	bf08      	it	eq
 800ca36:	68ec      	ldreq	r4, [r5, #12]
 800ca38:	e7cb      	b.n	800c9d2 <__swbuf_r+0x1a>
 800ca3a:	4621      	mov	r1, r4
 800ca3c:	4628      	mov	r0, r5
 800ca3e:	f000 f80d 	bl	800ca5c <__swsetup_r>
 800ca42:	2800      	cmp	r0, #0
 800ca44:	d0cc      	beq.n	800c9e0 <__swbuf_r+0x28>
 800ca46:	f04f 37ff 	mov.w	r7, #4294967295
 800ca4a:	4638      	mov	r0, r7
 800ca4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca4e:	bf00      	nop
 800ca50:	080dd380 	.word	0x080dd380
 800ca54:	080dd3a0 	.word	0x080dd3a0
 800ca58:	080dd360 	.word	0x080dd360

0800ca5c <__swsetup_r>:
 800ca5c:	4b32      	ldr	r3, [pc, #200]	; (800cb28 <__swsetup_r+0xcc>)
 800ca5e:	b570      	push	{r4, r5, r6, lr}
 800ca60:	681d      	ldr	r5, [r3, #0]
 800ca62:	4606      	mov	r6, r0
 800ca64:	460c      	mov	r4, r1
 800ca66:	b125      	cbz	r5, 800ca72 <__swsetup_r+0x16>
 800ca68:	69ab      	ldr	r3, [r5, #24]
 800ca6a:	b913      	cbnz	r3, 800ca72 <__swsetup_r+0x16>
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	f000 fffb 	bl	800da68 <__sinit>
 800ca72:	4b2e      	ldr	r3, [pc, #184]	; (800cb2c <__swsetup_r+0xd0>)
 800ca74:	429c      	cmp	r4, r3
 800ca76:	d10f      	bne.n	800ca98 <__swsetup_r+0x3c>
 800ca78:	686c      	ldr	r4, [r5, #4]
 800ca7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca7e:	b29a      	uxth	r2, r3
 800ca80:	0715      	lsls	r5, r2, #28
 800ca82:	d42c      	bmi.n	800cade <__swsetup_r+0x82>
 800ca84:	06d0      	lsls	r0, r2, #27
 800ca86:	d411      	bmi.n	800caac <__swsetup_r+0x50>
 800ca88:	2209      	movs	r2, #9
 800ca8a:	6032      	str	r2, [r6, #0]
 800ca8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	f04f 30ff 	mov.w	r0, #4294967295
 800ca96:	e03e      	b.n	800cb16 <__swsetup_r+0xba>
 800ca98:	4b25      	ldr	r3, [pc, #148]	; (800cb30 <__swsetup_r+0xd4>)
 800ca9a:	429c      	cmp	r4, r3
 800ca9c:	d101      	bne.n	800caa2 <__swsetup_r+0x46>
 800ca9e:	68ac      	ldr	r4, [r5, #8]
 800caa0:	e7eb      	b.n	800ca7a <__swsetup_r+0x1e>
 800caa2:	4b24      	ldr	r3, [pc, #144]	; (800cb34 <__swsetup_r+0xd8>)
 800caa4:	429c      	cmp	r4, r3
 800caa6:	bf08      	it	eq
 800caa8:	68ec      	ldreq	r4, [r5, #12]
 800caaa:	e7e6      	b.n	800ca7a <__swsetup_r+0x1e>
 800caac:	0751      	lsls	r1, r2, #29
 800caae:	d512      	bpl.n	800cad6 <__swsetup_r+0x7a>
 800cab0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cab2:	b141      	cbz	r1, 800cac6 <__swsetup_r+0x6a>
 800cab4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cab8:	4299      	cmp	r1, r3
 800caba:	d002      	beq.n	800cac2 <__swsetup_r+0x66>
 800cabc:	4630      	mov	r0, r6
 800cabe:	f7ff f8b1 	bl	800bc24 <_free_r>
 800cac2:	2300      	movs	r3, #0
 800cac4:	6363      	str	r3, [r4, #52]	; 0x34
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cacc:	81a3      	strh	r3, [r4, #12]
 800cace:	2300      	movs	r3, #0
 800cad0:	6063      	str	r3, [r4, #4]
 800cad2:	6923      	ldr	r3, [r4, #16]
 800cad4:	6023      	str	r3, [r4, #0]
 800cad6:	89a3      	ldrh	r3, [r4, #12]
 800cad8:	f043 0308 	orr.w	r3, r3, #8
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	6923      	ldr	r3, [r4, #16]
 800cae0:	b94b      	cbnz	r3, 800caf6 <__swsetup_r+0x9a>
 800cae2:	89a3      	ldrh	r3, [r4, #12]
 800cae4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cae8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caec:	d003      	beq.n	800caf6 <__swsetup_r+0x9a>
 800caee:	4621      	mov	r1, r4
 800caf0:	4630      	mov	r0, r6
 800caf2:	f001 f875 	bl	800dbe0 <__smakebuf_r>
 800caf6:	89a2      	ldrh	r2, [r4, #12]
 800caf8:	f012 0301 	ands.w	r3, r2, #1
 800cafc:	d00c      	beq.n	800cb18 <__swsetup_r+0xbc>
 800cafe:	2300      	movs	r3, #0
 800cb00:	60a3      	str	r3, [r4, #8]
 800cb02:	6963      	ldr	r3, [r4, #20]
 800cb04:	425b      	negs	r3, r3
 800cb06:	61a3      	str	r3, [r4, #24]
 800cb08:	6923      	ldr	r3, [r4, #16]
 800cb0a:	b953      	cbnz	r3, 800cb22 <__swsetup_r+0xc6>
 800cb0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cb10:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800cb14:	d1ba      	bne.n	800ca8c <__swsetup_r+0x30>
 800cb16:	bd70      	pop	{r4, r5, r6, pc}
 800cb18:	0792      	lsls	r2, r2, #30
 800cb1a:	bf58      	it	pl
 800cb1c:	6963      	ldrpl	r3, [r4, #20]
 800cb1e:	60a3      	str	r3, [r4, #8]
 800cb20:	e7f2      	b.n	800cb08 <__swsetup_r+0xac>
 800cb22:	2000      	movs	r0, #0
 800cb24:	e7f7      	b.n	800cb16 <__swsetup_r+0xba>
 800cb26:	bf00      	nop
 800cb28:	2000003c 	.word	0x2000003c
 800cb2c:	080dd380 	.word	0x080dd380
 800cb30:	080dd3a0 	.word	0x080dd3a0
 800cb34:	080dd360 	.word	0x080dd360

0800cb38 <__register_exitproc>:
 800cb38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb3c:	4d2c      	ldr	r5, [pc, #176]	; (800cbf0 <__register_exitproc+0xb8>)
 800cb3e:	682c      	ldr	r4, [r5, #0]
 800cb40:	4607      	mov	r7, r0
 800cb42:	460e      	mov	r6, r1
 800cb44:	4691      	mov	r9, r2
 800cb46:	4698      	mov	r8, r3
 800cb48:	b934      	cbnz	r4, 800cb58 <__register_exitproc+0x20>
 800cb4a:	4b2a      	ldr	r3, [pc, #168]	; (800cbf4 <__register_exitproc+0xbc>)
 800cb4c:	4c2a      	ldr	r4, [pc, #168]	; (800cbf8 <__register_exitproc+0xc0>)
 800cb4e:	602c      	str	r4, [r5, #0]
 800cb50:	b113      	cbz	r3, 800cb58 <__register_exitproc+0x20>
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800cb58:	6863      	ldr	r3, [r4, #4]
 800cb5a:	2b1f      	cmp	r3, #31
 800cb5c:	dd3d      	ble.n	800cbda <__register_exitproc+0xa2>
 800cb5e:	4b27      	ldr	r3, [pc, #156]	; (800cbfc <__register_exitproc+0xc4>)
 800cb60:	b91b      	cbnz	r3, 800cb6a <__register_exitproc+0x32>
 800cb62:	f04f 30ff 	mov.w	r0, #4294967295
 800cb66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb6a:	208c      	movs	r0, #140	; 0x8c
 800cb6c:	f7ff f81e 	bl	800bbac <malloc>
 800cb70:	4604      	mov	r4, r0
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d0f5      	beq.n	800cb62 <__register_exitproc+0x2a>
 800cb76:	2300      	movs	r3, #0
 800cb78:	682a      	ldr	r2, [r5, #0]
 800cb7a:	6002      	str	r2, [r0, #0]
 800cb7c:	6043      	str	r3, [r0, #4]
 800cb7e:	6028      	str	r0, [r5, #0]
 800cb80:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800cb84:	b30f      	cbz	r7, 800cbca <__register_exitproc+0x92>
 800cb86:	f44f 7084 	mov.w	r0, #264	; 0x108
 800cb8a:	f7ff f80f 	bl	800bbac <malloc>
 800cb8e:	2800      	cmp	r0, #0
 800cb90:	d0e7      	beq.n	800cb62 <__register_exitproc+0x2a>
 800cb92:	2300      	movs	r3, #0
 800cb94:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800cb98:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800cb9c:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800cba0:	6862      	ldr	r2, [r4, #4]
 800cba2:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800cba6:	2301      	movs	r3, #1
 800cba8:	4093      	lsls	r3, r2
 800cbaa:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800cbae:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	2f02      	cmp	r7, #2
 800cbb6:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800cbba:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800cbbe:	bf02      	ittt	eq
 800cbc0:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800cbc4:	4313      	orreq	r3, r2
 800cbc6:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800cbca:	6863      	ldr	r3, [r4, #4]
 800cbcc:	1c5a      	adds	r2, r3, #1
 800cbce:	3302      	adds	r3, #2
 800cbd0:	6062      	str	r2, [r4, #4]
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800cbd8:	e7c5      	b.n	800cb66 <__register_exitproc+0x2e>
 800cbda:	2f00      	cmp	r7, #0
 800cbdc:	d0f5      	beq.n	800cbca <__register_exitproc+0x92>
 800cbde:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d1dc      	bne.n	800cba0 <__register_exitproc+0x68>
 800cbe6:	4b05      	ldr	r3, [pc, #20]	; (800cbfc <__register_exitproc+0xc4>)
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d0ba      	beq.n	800cb62 <__register_exitproc+0x2a>
 800cbec:	e7cb      	b.n	800cb86 <__register_exitproc+0x4e>
 800cbee:	bf00      	nop
 800cbf0:	20000ea8 	.word	0x20000ea8
 800cbf4:	00000000 	.word	0x00000000
 800cbf8:	20000e1c 	.word	0x20000e1c
 800cbfc:	0800bbad 	.word	0x0800bbad

0800cc00 <quorem>:
 800cc00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc04:	6903      	ldr	r3, [r0, #16]
 800cc06:	690c      	ldr	r4, [r1, #16]
 800cc08:	42a3      	cmp	r3, r4
 800cc0a:	4680      	mov	r8, r0
 800cc0c:	f2c0 8082 	blt.w	800cd14 <quorem+0x114>
 800cc10:	3c01      	subs	r4, #1
 800cc12:	f101 0714 	add.w	r7, r1, #20
 800cc16:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800cc1a:	f100 0614 	add.w	r6, r0, #20
 800cc1e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800cc22:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800cc26:	eb06 030c 	add.w	r3, r6, ip
 800cc2a:	3501      	adds	r5, #1
 800cc2c:	eb07 090c 	add.w	r9, r7, ip
 800cc30:	9301      	str	r3, [sp, #4]
 800cc32:	fbb0 f5f5 	udiv	r5, r0, r5
 800cc36:	b395      	cbz	r5, 800cc9e <quorem+0x9e>
 800cc38:	f04f 0a00 	mov.w	sl, #0
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	46b6      	mov	lr, r6
 800cc40:	46d3      	mov	fp, sl
 800cc42:	f850 2b04 	ldr.w	r2, [r0], #4
 800cc46:	b293      	uxth	r3, r2
 800cc48:	fb05 a303 	mla	r3, r5, r3, sl
 800cc4c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	ebab 0303 	sub.w	r3, fp, r3
 800cc56:	0c12      	lsrs	r2, r2, #16
 800cc58:	f8de b000 	ldr.w	fp, [lr]
 800cc5c:	fb05 a202 	mla	r2, r5, r2, sl
 800cc60:	fa13 f38b 	uxtah	r3, r3, fp
 800cc64:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800cc68:	fa1f fb82 	uxth.w	fp, r2
 800cc6c:	f8de 2000 	ldr.w	r2, [lr]
 800cc70:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800cc74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc78:	b29b      	uxth	r3, r3
 800cc7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc7e:	4581      	cmp	r9, r0
 800cc80:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cc84:	f84e 3b04 	str.w	r3, [lr], #4
 800cc88:	d2db      	bcs.n	800cc42 <quorem+0x42>
 800cc8a:	f856 300c 	ldr.w	r3, [r6, ip]
 800cc8e:	b933      	cbnz	r3, 800cc9e <quorem+0x9e>
 800cc90:	9b01      	ldr	r3, [sp, #4]
 800cc92:	3b04      	subs	r3, #4
 800cc94:	429e      	cmp	r6, r3
 800cc96:	461a      	mov	r2, r3
 800cc98:	d330      	bcc.n	800ccfc <quorem+0xfc>
 800cc9a:	f8c8 4010 	str.w	r4, [r8, #16]
 800cc9e:	4640      	mov	r0, r8
 800cca0:	f001 f9f6 	bl	800e090 <__mcmp>
 800cca4:	2800      	cmp	r0, #0
 800cca6:	db25      	blt.n	800ccf4 <quorem+0xf4>
 800cca8:	3501      	adds	r5, #1
 800ccaa:	4630      	mov	r0, r6
 800ccac:	f04f 0c00 	mov.w	ip, #0
 800ccb0:	f857 2b04 	ldr.w	r2, [r7], #4
 800ccb4:	f8d0 e000 	ldr.w	lr, [r0]
 800ccb8:	b293      	uxth	r3, r2
 800ccba:	ebac 0303 	sub.w	r3, ip, r3
 800ccbe:	0c12      	lsrs	r2, r2, #16
 800ccc0:	fa13 f38e 	uxtah	r3, r3, lr
 800ccc4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ccc8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cccc:	b29b      	uxth	r3, r3
 800ccce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ccd2:	45b9      	cmp	r9, r7
 800ccd4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ccd8:	f840 3b04 	str.w	r3, [r0], #4
 800ccdc:	d2e8      	bcs.n	800ccb0 <quorem+0xb0>
 800ccde:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cce2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cce6:	b92a      	cbnz	r2, 800ccf4 <quorem+0xf4>
 800cce8:	3b04      	subs	r3, #4
 800ccea:	429e      	cmp	r6, r3
 800ccec:	461a      	mov	r2, r3
 800ccee:	d30b      	bcc.n	800cd08 <quorem+0x108>
 800ccf0:	f8c8 4010 	str.w	r4, [r8, #16]
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	b003      	add	sp, #12
 800ccf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccfc:	6812      	ldr	r2, [r2, #0]
 800ccfe:	3b04      	subs	r3, #4
 800cd00:	2a00      	cmp	r2, #0
 800cd02:	d1ca      	bne.n	800cc9a <quorem+0x9a>
 800cd04:	3c01      	subs	r4, #1
 800cd06:	e7c5      	b.n	800cc94 <quorem+0x94>
 800cd08:	6812      	ldr	r2, [r2, #0]
 800cd0a:	3b04      	subs	r3, #4
 800cd0c:	2a00      	cmp	r2, #0
 800cd0e:	d1ef      	bne.n	800ccf0 <quorem+0xf0>
 800cd10:	3c01      	subs	r4, #1
 800cd12:	e7ea      	b.n	800ccea <quorem+0xea>
 800cd14:	2000      	movs	r0, #0
 800cd16:	e7ee      	b.n	800ccf6 <quorem+0xf6>

0800cd18 <_dtoa_r>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	ec57 6b10 	vmov	r6, r7, d0
 800cd20:	b097      	sub	sp, #92	; 0x5c
 800cd22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cd24:	9106      	str	r1, [sp, #24]
 800cd26:	4604      	mov	r4, r0
 800cd28:	920b      	str	r2, [sp, #44]	; 0x2c
 800cd2a:	9312      	str	r3, [sp, #72]	; 0x48
 800cd2c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cd30:	e9cd 6700 	strd	r6, r7, [sp]
 800cd34:	b93d      	cbnz	r5, 800cd46 <_dtoa_r+0x2e>
 800cd36:	2010      	movs	r0, #16
 800cd38:	f7fe ff38 	bl	800bbac <malloc>
 800cd3c:	6260      	str	r0, [r4, #36]	; 0x24
 800cd3e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cd42:	6005      	str	r5, [r0, #0]
 800cd44:	60c5      	str	r5, [r0, #12]
 800cd46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd48:	6819      	ldr	r1, [r3, #0]
 800cd4a:	b151      	cbz	r1, 800cd62 <_dtoa_r+0x4a>
 800cd4c:	685a      	ldr	r2, [r3, #4]
 800cd4e:	604a      	str	r2, [r1, #4]
 800cd50:	2301      	movs	r3, #1
 800cd52:	4093      	lsls	r3, r2
 800cd54:	608b      	str	r3, [r1, #8]
 800cd56:	4620      	mov	r0, r4
 800cd58:	f000 ffb8 	bl	800dccc <_Bfree>
 800cd5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd5e:	2200      	movs	r2, #0
 800cd60:	601a      	str	r2, [r3, #0]
 800cd62:	1e3b      	subs	r3, r7, #0
 800cd64:	bfbb      	ittet	lt
 800cd66:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cd6a:	9301      	strlt	r3, [sp, #4]
 800cd6c:	2300      	movge	r3, #0
 800cd6e:	2201      	movlt	r2, #1
 800cd70:	bfac      	ite	ge
 800cd72:	f8c8 3000 	strge.w	r3, [r8]
 800cd76:	f8c8 2000 	strlt.w	r2, [r8]
 800cd7a:	4baf      	ldr	r3, [pc, #700]	; (800d038 <_dtoa_r+0x320>)
 800cd7c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cd80:	ea33 0308 	bics.w	r3, r3, r8
 800cd84:	d114      	bne.n	800cdb0 <_dtoa_r+0x98>
 800cd86:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cd88:	f242 730f 	movw	r3, #9999	; 0x270f
 800cd8c:	6013      	str	r3, [r2, #0]
 800cd8e:	9b00      	ldr	r3, [sp, #0]
 800cd90:	b923      	cbnz	r3, 800cd9c <_dtoa_r+0x84>
 800cd92:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cd96:	2800      	cmp	r0, #0
 800cd98:	f000 8542 	beq.w	800d820 <_dtoa_r+0xb08>
 800cd9c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd9e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d04c <_dtoa_r+0x334>
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	f000 8544 	beq.w	800d830 <_dtoa_r+0xb18>
 800cda8:	f10b 0303 	add.w	r3, fp, #3
 800cdac:	f000 bd3e 	b.w	800d82c <_dtoa_r+0xb14>
 800cdb0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cdb4:	2200      	movs	r2, #0
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	4630      	mov	r0, r6
 800cdba:	4639      	mov	r1, r7
 800cdbc:	f7f3 fe94 	bl	8000ae8 <__aeabi_dcmpeq>
 800cdc0:	4681      	mov	r9, r0
 800cdc2:	b168      	cbz	r0, 800cde0 <_dtoa_r+0xc8>
 800cdc4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	6013      	str	r3, [r2, #0]
 800cdca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	f000 8524 	beq.w	800d81a <_dtoa_r+0xb02>
 800cdd2:	4b9a      	ldr	r3, [pc, #616]	; (800d03c <_dtoa_r+0x324>)
 800cdd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cdd6:	f103 3bff 	add.w	fp, r3, #4294967295
 800cdda:	6013      	str	r3, [r2, #0]
 800cddc:	f000 bd28 	b.w	800d830 <_dtoa_r+0xb18>
 800cde0:	aa14      	add	r2, sp, #80	; 0x50
 800cde2:	a915      	add	r1, sp, #84	; 0x54
 800cde4:	ec47 6b10 	vmov	d0, r6, r7
 800cde8:	4620      	mov	r0, r4
 800cdea:	f001 f9c8 	bl	800e17e <__d2b>
 800cdee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cdf2:	9004      	str	r0, [sp, #16]
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	d07c      	beq.n	800cef2 <_dtoa_r+0x1da>
 800cdf8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cdfc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800ce00:	46b2      	mov	sl, r6
 800ce02:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800ce06:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ce0a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800ce0e:	2200      	movs	r2, #0
 800ce10:	4b8b      	ldr	r3, [pc, #556]	; (800d040 <_dtoa_r+0x328>)
 800ce12:	4650      	mov	r0, sl
 800ce14:	4659      	mov	r1, fp
 800ce16:	f7f3 fa47 	bl	80002a8 <__aeabi_dsub>
 800ce1a:	a381      	add	r3, pc, #516	; (adr r3, 800d020 <_dtoa_r+0x308>)
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	f7f3 fbfa 	bl	8000618 <__aeabi_dmul>
 800ce24:	a380      	add	r3, pc, #512	; (adr r3, 800d028 <_dtoa_r+0x310>)
 800ce26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce2a:	f7f3 fa3f 	bl	80002ac <__adddf3>
 800ce2e:	4606      	mov	r6, r0
 800ce30:	4628      	mov	r0, r5
 800ce32:	460f      	mov	r7, r1
 800ce34:	f7f3 fb86 	bl	8000544 <__aeabi_i2d>
 800ce38:	a37d      	add	r3, pc, #500	; (adr r3, 800d030 <_dtoa_r+0x318>)
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f7f3 fbeb 	bl	8000618 <__aeabi_dmul>
 800ce42:	4602      	mov	r2, r0
 800ce44:	460b      	mov	r3, r1
 800ce46:	4630      	mov	r0, r6
 800ce48:	4639      	mov	r1, r7
 800ce4a:	f7f3 fa2f 	bl	80002ac <__adddf3>
 800ce4e:	4606      	mov	r6, r0
 800ce50:	460f      	mov	r7, r1
 800ce52:	f7f3 fe91 	bl	8000b78 <__aeabi_d2iz>
 800ce56:	2200      	movs	r2, #0
 800ce58:	4682      	mov	sl, r0
 800ce5a:	2300      	movs	r3, #0
 800ce5c:	4630      	mov	r0, r6
 800ce5e:	4639      	mov	r1, r7
 800ce60:	f7f3 fe4c 	bl	8000afc <__aeabi_dcmplt>
 800ce64:	b148      	cbz	r0, 800ce7a <_dtoa_r+0x162>
 800ce66:	4650      	mov	r0, sl
 800ce68:	f7f3 fb6c 	bl	8000544 <__aeabi_i2d>
 800ce6c:	4632      	mov	r2, r6
 800ce6e:	463b      	mov	r3, r7
 800ce70:	f7f3 fe3a 	bl	8000ae8 <__aeabi_dcmpeq>
 800ce74:	b908      	cbnz	r0, 800ce7a <_dtoa_r+0x162>
 800ce76:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce7a:	f1ba 0f16 	cmp.w	sl, #22
 800ce7e:	d859      	bhi.n	800cf34 <_dtoa_r+0x21c>
 800ce80:	4970      	ldr	r1, [pc, #448]	; (800d044 <_dtoa_r+0x32c>)
 800ce82:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ce86:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ce8e:	f7f3 fe53 	bl	8000b38 <__aeabi_dcmpgt>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	d050      	beq.n	800cf38 <_dtoa_r+0x220>
 800ce96:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce9e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cea0:	1b5d      	subs	r5, r3, r5
 800cea2:	f1b5 0801 	subs.w	r8, r5, #1
 800cea6:	bf49      	itett	mi
 800cea8:	f1c5 0301 	rsbmi	r3, r5, #1
 800ceac:	2300      	movpl	r3, #0
 800ceae:	9305      	strmi	r3, [sp, #20]
 800ceb0:	f04f 0800 	movmi.w	r8, #0
 800ceb4:	bf58      	it	pl
 800ceb6:	9305      	strpl	r3, [sp, #20]
 800ceb8:	f1ba 0f00 	cmp.w	sl, #0
 800cebc:	db3e      	blt.n	800cf3c <_dtoa_r+0x224>
 800cebe:	2300      	movs	r3, #0
 800cec0:	44d0      	add	r8, sl
 800cec2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800cec6:	9307      	str	r3, [sp, #28]
 800cec8:	9b06      	ldr	r3, [sp, #24]
 800ceca:	2b09      	cmp	r3, #9
 800cecc:	f200 8090 	bhi.w	800cff0 <_dtoa_r+0x2d8>
 800ced0:	2b05      	cmp	r3, #5
 800ced2:	bfc4      	itt	gt
 800ced4:	3b04      	subgt	r3, #4
 800ced6:	9306      	strgt	r3, [sp, #24]
 800ced8:	9b06      	ldr	r3, [sp, #24]
 800ceda:	f1a3 0302 	sub.w	r3, r3, #2
 800cede:	bfcc      	ite	gt
 800cee0:	2500      	movgt	r5, #0
 800cee2:	2501      	movle	r5, #1
 800cee4:	2b03      	cmp	r3, #3
 800cee6:	f200 808f 	bhi.w	800d008 <_dtoa_r+0x2f0>
 800ceea:	e8df f003 	tbb	[pc, r3]
 800ceee:	7f7d      	.short	0x7f7d
 800cef0:	7131      	.short	0x7131
 800cef2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cef6:	441d      	add	r5, r3
 800cef8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cefc:	2820      	cmp	r0, #32
 800cefe:	dd13      	ble.n	800cf28 <_dtoa_r+0x210>
 800cf00:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cf04:	9b00      	ldr	r3, [sp, #0]
 800cf06:	fa08 f800 	lsl.w	r8, r8, r0
 800cf0a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cf0e:	fa23 f000 	lsr.w	r0, r3, r0
 800cf12:	ea48 0000 	orr.w	r0, r8, r0
 800cf16:	f7f3 fb05 	bl	8000524 <__aeabi_ui2d>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	4682      	mov	sl, r0
 800cf1e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cf22:	3d01      	subs	r5, #1
 800cf24:	9313      	str	r3, [sp, #76]	; 0x4c
 800cf26:	e772      	b.n	800ce0e <_dtoa_r+0xf6>
 800cf28:	9b00      	ldr	r3, [sp, #0]
 800cf2a:	f1c0 0020 	rsb	r0, r0, #32
 800cf2e:	fa03 f000 	lsl.w	r0, r3, r0
 800cf32:	e7f0      	b.n	800cf16 <_dtoa_r+0x1fe>
 800cf34:	2301      	movs	r3, #1
 800cf36:	e7b1      	b.n	800ce9c <_dtoa_r+0x184>
 800cf38:	900f      	str	r0, [sp, #60]	; 0x3c
 800cf3a:	e7b0      	b.n	800ce9e <_dtoa_r+0x186>
 800cf3c:	9b05      	ldr	r3, [sp, #20]
 800cf3e:	eba3 030a 	sub.w	r3, r3, sl
 800cf42:	9305      	str	r3, [sp, #20]
 800cf44:	f1ca 0300 	rsb	r3, sl, #0
 800cf48:	9307      	str	r3, [sp, #28]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	930e      	str	r3, [sp, #56]	; 0x38
 800cf4e:	e7bb      	b.n	800cec8 <_dtoa_r+0x1b0>
 800cf50:	2301      	movs	r3, #1
 800cf52:	930a      	str	r3, [sp, #40]	; 0x28
 800cf54:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd59      	ble.n	800d00e <_dtoa_r+0x2f6>
 800cf5a:	9302      	str	r3, [sp, #8]
 800cf5c:	4699      	mov	r9, r3
 800cf5e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf60:	2200      	movs	r2, #0
 800cf62:	6072      	str	r2, [r6, #4]
 800cf64:	2204      	movs	r2, #4
 800cf66:	f102 0014 	add.w	r0, r2, #20
 800cf6a:	4298      	cmp	r0, r3
 800cf6c:	6871      	ldr	r1, [r6, #4]
 800cf6e:	d953      	bls.n	800d018 <_dtoa_r+0x300>
 800cf70:	4620      	mov	r0, r4
 800cf72:	f000 fe77 	bl	800dc64 <_Balloc>
 800cf76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf78:	6030      	str	r0, [r6, #0]
 800cf7a:	f1b9 0f0e 	cmp.w	r9, #14
 800cf7e:	f8d3 b000 	ldr.w	fp, [r3]
 800cf82:	f200 80e6 	bhi.w	800d152 <_dtoa_r+0x43a>
 800cf86:	2d00      	cmp	r5, #0
 800cf88:	f000 80e3 	beq.w	800d152 <_dtoa_r+0x43a>
 800cf8c:	ed9d 7b00 	vldr	d7, [sp]
 800cf90:	f1ba 0f00 	cmp.w	sl, #0
 800cf94:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cf98:	dd74      	ble.n	800d084 <_dtoa_r+0x36c>
 800cf9a:	4a2a      	ldr	r2, [pc, #168]	; (800d044 <_dtoa_r+0x32c>)
 800cf9c:	f00a 030f 	and.w	r3, sl, #15
 800cfa0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfa4:	ed93 7b00 	vldr	d7, [r3]
 800cfa8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cfac:	06f0      	lsls	r0, r6, #27
 800cfae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cfb2:	d565      	bpl.n	800d080 <_dtoa_r+0x368>
 800cfb4:	4b24      	ldr	r3, [pc, #144]	; (800d048 <_dtoa_r+0x330>)
 800cfb6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cfba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfbe:	f7f3 fc55 	bl	800086c <__aeabi_ddiv>
 800cfc2:	e9cd 0100 	strd	r0, r1, [sp]
 800cfc6:	f006 060f 	and.w	r6, r6, #15
 800cfca:	2503      	movs	r5, #3
 800cfcc:	4f1e      	ldr	r7, [pc, #120]	; (800d048 <_dtoa_r+0x330>)
 800cfce:	e04c      	b.n	800d06a <_dtoa_r+0x352>
 800cfd0:	2301      	movs	r3, #1
 800cfd2:	930a      	str	r3, [sp, #40]	; 0x28
 800cfd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cfd6:	4453      	add	r3, sl
 800cfd8:	f103 0901 	add.w	r9, r3, #1
 800cfdc:	9302      	str	r3, [sp, #8]
 800cfde:	464b      	mov	r3, r9
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	bfb8      	it	lt
 800cfe4:	2301      	movlt	r3, #1
 800cfe6:	e7ba      	b.n	800cf5e <_dtoa_r+0x246>
 800cfe8:	2300      	movs	r3, #0
 800cfea:	e7b2      	b.n	800cf52 <_dtoa_r+0x23a>
 800cfec:	2300      	movs	r3, #0
 800cfee:	e7f0      	b.n	800cfd2 <_dtoa_r+0x2ba>
 800cff0:	2501      	movs	r5, #1
 800cff2:	2300      	movs	r3, #0
 800cff4:	9306      	str	r3, [sp, #24]
 800cff6:	950a      	str	r5, [sp, #40]	; 0x28
 800cff8:	f04f 33ff 	mov.w	r3, #4294967295
 800cffc:	9302      	str	r3, [sp, #8]
 800cffe:	4699      	mov	r9, r3
 800d000:	2200      	movs	r2, #0
 800d002:	2312      	movs	r3, #18
 800d004:	920b      	str	r2, [sp, #44]	; 0x2c
 800d006:	e7aa      	b.n	800cf5e <_dtoa_r+0x246>
 800d008:	2301      	movs	r3, #1
 800d00a:	930a      	str	r3, [sp, #40]	; 0x28
 800d00c:	e7f4      	b.n	800cff8 <_dtoa_r+0x2e0>
 800d00e:	2301      	movs	r3, #1
 800d010:	9302      	str	r3, [sp, #8]
 800d012:	4699      	mov	r9, r3
 800d014:	461a      	mov	r2, r3
 800d016:	e7f5      	b.n	800d004 <_dtoa_r+0x2ec>
 800d018:	3101      	adds	r1, #1
 800d01a:	6071      	str	r1, [r6, #4]
 800d01c:	0052      	lsls	r2, r2, #1
 800d01e:	e7a2      	b.n	800cf66 <_dtoa_r+0x24e>
 800d020:	636f4361 	.word	0x636f4361
 800d024:	3fd287a7 	.word	0x3fd287a7
 800d028:	8b60c8b3 	.word	0x8b60c8b3
 800d02c:	3fc68a28 	.word	0x3fc68a28
 800d030:	509f79fb 	.word	0x509f79fb
 800d034:	3fd34413 	.word	0x3fd34413
 800d038:	7ff00000 	.word	0x7ff00000
 800d03c:	080dd32e 	.word	0x080dd32e
 800d040:	3ff80000 	.word	0x3ff80000
 800d044:	080dd3e8 	.word	0x080dd3e8
 800d048:	080dd3c0 	.word	0x080dd3c0
 800d04c:	080dd35a 	.word	0x080dd35a
 800d050:	07f1      	lsls	r1, r6, #31
 800d052:	d508      	bpl.n	800d066 <_dtoa_r+0x34e>
 800d054:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d05c:	f7f3 fadc 	bl	8000618 <__aeabi_dmul>
 800d060:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d064:	3501      	adds	r5, #1
 800d066:	1076      	asrs	r6, r6, #1
 800d068:	3708      	adds	r7, #8
 800d06a:	2e00      	cmp	r6, #0
 800d06c:	d1f0      	bne.n	800d050 <_dtoa_r+0x338>
 800d06e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d072:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d076:	f7f3 fbf9 	bl	800086c <__aeabi_ddiv>
 800d07a:	e9cd 0100 	strd	r0, r1, [sp]
 800d07e:	e01a      	b.n	800d0b6 <_dtoa_r+0x39e>
 800d080:	2502      	movs	r5, #2
 800d082:	e7a3      	b.n	800cfcc <_dtoa_r+0x2b4>
 800d084:	f000 80a0 	beq.w	800d1c8 <_dtoa_r+0x4b0>
 800d088:	f1ca 0600 	rsb	r6, sl, #0
 800d08c:	4b9f      	ldr	r3, [pc, #636]	; (800d30c <_dtoa_r+0x5f4>)
 800d08e:	4fa0      	ldr	r7, [pc, #640]	; (800d310 <_dtoa_r+0x5f8>)
 800d090:	f006 020f 	and.w	r2, r6, #15
 800d094:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d098:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d09c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d0a0:	f7f3 faba 	bl	8000618 <__aeabi_dmul>
 800d0a4:	e9cd 0100 	strd	r0, r1, [sp]
 800d0a8:	1136      	asrs	r6, r6, #4
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	2502      	movs	r5, #2
 800d0ae:	2e00      	cmp	r6, #0
 800d0b0:	d17f      	bne.n	800d1b2 <_dtoa_r+0x49a>
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d1e1      	bne.n	800d07a <_dtoa_r+0x362>
 800d0b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 8087 	beq.w	800d1cc <_dtoa_r+0x4b4>
 800d0be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d0c2:	2200      	movs	r2, #0
 800d0c4:	4b93      	ldr	r3, [pc, #588]	; (800d314 <_dtoa_r+0x5fc>)
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	4639      	mov	r1, r7
 800d0ca:	f7f3 fd17 	bl	8000afc <__aeabi_dcmplt>
 800d0ce:	2800      	cmp	r0, #0
 800d0d0:	d07c      	beq.n	800d1cc <_dtoa_r+0x4b4>
 800d0d2:	f1b9 0f00 	cmp.w	r9, #0
 800d0d6:	d079      	beq.n	800d1cc <_dtoa_r+0x4b4>
 800d0d8:	9b02      	ldr	r3, [sp, #8]
 800d0da:	2b00      	cmp	r3, #0
 800d0dc:	dd35      	ble.n	800d14a <_dtoa_r+0x432>
 800d0de:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d0e2:	9308      	str	r3, [sp, #32]
 800d0e4:	4639      	mov	r1, r7
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	4b8b      	ldr	r3, [pc, #556]	; (800d318 <_dtoa_r+0x600>)
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7f3 fa94 	bl	8000618 <__aeabi_dmul>
 800d0f0:	e9cd 0100 	strd	r0, r1, [sp]
 800d0f4:	9f02      	ldr	r7, [sp, #8]
 800d0f6:	3501      	adds	r5, #1
 800d0f8:	4628      	mov	r0, r5
 800d0fa:	f7f3 fa23 	bl	8000544 <__aeabi_i2d>
 800d0fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d102:	f7f3 fa89 	bl	8000618 <__aeabi_dmul>
 800d106:	2200      	movs	r2, #0
 800d108:	4b84      	ldr	r3, [pc, #528]	; (800d31c <_dtoa_r+0x604>)
 800d10a:	f7f3 f8cf 	bl	80002ac <__adddf3>
 800d10e:	4605      	mov	r5, r0
 800d110:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d114:	2f00      	cmp	r7, #0
 800d116:	d15d      	bne.n	800d1d4 <_dtoa_r+0x4bc>
 800d118:	2200      	movs	r2, #0
 800d11a:	4b81      	ldr	r3, [pc, #516]	; (800d320 <_dtoa_r+0x608>)
 800d11c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d120:	f7f3 f8c2 	bl	80002a8 <__aeabi_dsub>
 800d124:	462a      	mov	r2, r5
 800d126:	4633      	mov	r3, r6
 800d128:	e9cd 0100 	strd	r0, r1, [sp]
 800d12c:	f7f3 fd04 	bl	8000b38 <__aeabi_dcmpgt>
 800d130:	2800      	cmp	r0, #0
 800d132:	f040 8288 	bne.w	800d646 <_dtoa_r+0x92e>
 800d136:	462a      	mov	r2, r5
 800d138:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d13c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d140:	f7f3 fcdc 	bl	8000afc <__aeabi_dcmplt>
 800d144:	2800      	cmp	r0, #0
 800d146:	f040 827c 	bne.w	800d642 <_dtoa_r+0x92a>
 800d14a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d14e:	e9cd 2300 	strd	r2, r3, [sp]
 800d152:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d154:	2b00      	cmp	r3, #0
 800d156:	f2c0 8150 	blt.w	800d3fa <_dtoa_r+0x6e2>
 800d15a:	f1ba 0f0e 	cmp.w	sl, #14
 800d15e:	f300 814c 	bgt.w	800d3fa <_dtoa_r+0x6e2>
 800d162:	4b6a      	ldr	r3, [pc, #424]	; (800d30c <_dtoa_r+0x5f4>)
 800d164:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d168:	ed93 7b00 	vldr	d7, [r3]
 800d16c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d16e:	2b00      	cmp	r3, #0
 800d170:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d174:	f280 80d8 	bge.w	800d328 <_dtoa_r+0x610>
 800d178:	f1b9 0f00 	cmp.w	r9, #0
 800d17c:	f300 80d4 	bgt.w	800d328 <_dtoa_r+0x610>
 800d180:	f040 825e 	bne.w	800d640 <_dtoa_r+0x928>
 800d184:	2200      	movs	r2, #0
 800d186:	4b66      	ldr	r3, [pc, #408]	; (800d320 <_dtoa_r+0x608>)
 800d188:	ec51 0b17 	vmov	r0, r1, d7
 800d18c:	f7f3 fa44 	bl	8000618 <__aeabi_dmul>
 800d190:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d194:	f7f3 fcc6 	bl	8000b24 <__aeabi_dcmpge>
 800d198:	464f      	mov	r7, r9
 800d19a:	464e      	mov	r6, r9
 800d19c:	2800      	cmp	r0, #0
 800d19e:	f040 8234 	bne.w	800d60a <_dtoa_r+0x8f2>
 800d1a2:	2331      	movs	r3, #49	; 0x31
 800d1a4:	f10b 0501 	add.w	r5, fp, #1
 800d1a8:	f88b 3000 	strb.w	r3, [fp]
 800d1ac:	f10a 0a01 	add.w	sl, sl, #1
 800d1b0:	e22f      	b.n	800d612 <_dtoa_r+0x8fa>
 800d1b2:	07f2      	lsls	r2, r6, #31
 800d1b4:	d505      	bpl.n	800d1c2 <_dtoa_r+0x4aa>
 800d1b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1ba:	f7f3 fa2d 	bl	8000618 <__aeabi_dmul>
 800d1be:	3501      	adds	r5, #1
 800d1c0:	2301      	movs	r3, #1
 800d1c2:	1076      	asrs	r6, r6, #1
 800d1c4:	3708      	adds	r7, #8
 800d1c6:	e772      	b.n	800d0ae <_dtoa_r+0x396>
 800d1c8:	2502      	movs	r5, #2
 800d1ca:	e774      	b.n	800d0b6 <_dtoa_r+0x39e>
 800d1cc:	f8cd a020 	str.w	sl, [sp, #32]
 800d1d0:	464f      	mov	r7, r9
 800d1d2:	e791      	b.n	800d0f8 <_dtoa_r+0x3e0>
 800d1d4:	4b4d      	ldr	r3, [pc, #308]	; (800d30c <_dtoa_r+0x5f4>)
 800d1d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d1da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d1de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d047      	beq.n	800d274 <_dtoa_r+0x55c>
 800d1e4:	4602      	mov	r2, r0
 800d1e6:	460b      	mov	r3, r1
 800d1e8:	2000      	movs	r0, #0
 800d1ea:	494e      	ldr	r1, [pc, #312]	; (800d324 <_dtoa_r+0x60c>)
 800d1ec:	f7f3 fb3e 	bl	800086c <__aeabi_ddiv>
 800d1f0:	462a      	mov	r2, r5
 800d1f2:	4633      	mov	r3, r6
 800d1f4:	f7f3 f858 	bl	80002a8 <__aeabi_dsub>
 800d1f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d1fc:	465d      	mov	r5, fp
 800d1fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d202:	f7f3 fcb9 	bl	8000b78 <__aeabi_d2iz>
 800d206:	4606      	mov	r6, r0
 800d208:	f7f3 f99c 	bl	8000544 <__aeabi_i2d>
 800d20c:	4602      	mov	r2, r0
 800d20e:	460b      	mov	r3, r1
 800d210:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d214:	f7f3 f848 	bl	80002a8 <__aeabi_dsub>
 800d218:	3630      	adds	r6, #48	; 0x30
 800d21a:	f805 6b01 	strb.w	r6, [r5], #1
 800d21e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d222:	e9cd 0100 	strd	r0, r1, [sp]
 800d226:	f7f3 fc69 	bl	8000afc <__aeabi_dcmplt>
 800d22a:	2800      	cmp	r0, #0
 800d22c:	d163      	bne.n	800d2f6 <_dtoa_r+0x5de>
 800d22e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d232:	2000      	movs	r0, #0
 800d234:	4937      	ldr	r1, [pc, #220]	; (800d314 <_dtoa_r+0x5fc>)
 800d236:	f7f3 f837 	bl	80002a8 <__aeabi_dsub>
 800d23a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d23e:	f7f3 fc5d 	bl	8000afc <__aeabi_dcmplt>
 800d242:	2800      	cmp	r0, #0
 800d244:	f040 80b7 	bne.w	800d3b6 <_dtoa_r+0x69e>
 800d248:	eba5 030b 	sub.w	r3, r5, fp
 800d24c:	429f      	cmp	r7, r3
 800d24e:	f77f af7c 	ble.w	800d14a <_dtoa_r+0x432>
 800d252:	2200      	movs	r2, #0
 800d254:	4b30      	ldr	r3, [pc, #192]	; (800d318 <_dtoa_r+0x600>)
 800d256:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d25a:	f7f3 f9dd 	bl	8000618 <__aeabi_dmul>
 800d25e:	2200      	movs	r2, #0
 800d260:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d264:	4b2c      	ldr	r3, [pc, #176]	; (800d318 <_dtoa_r+0x600>)
 800d266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d26a:	f7f3 f9d5 	bl	8000618 <__aeabi_dmul>
 800d26e:	e9cd 0100 	strd	r0, r1, [sp]
 800d272:	e7c4      	b.n	800d1fe <_dtoa_r+0x4e6>
 800d274:	462a      	mov	r2, r5
 800d276:	4633      	mov	r3, r6
 800d278:	f7f3 f9ce 	bl	8000618 <__aeabi_dmul>
 800d27c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d280:	eb0b 0507 	add.w	r5, fp, r7
 800d284:	465e      	mov	r6, fp
 800d286:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d28a:	f7f3 fc75 	bl	8000b78 <__aeabi_d2iz>
 800d28e:	4607      	mov	r7, r0
 800d290:	f7f3 f958 	bl	8000544 <__aeabi_i2d>
 800d294:	3730      	adds	r7, #48	; 0x30
 800d296:	4602      	mov	r2, r0
 800d298:	460b      	mov	r3, r1
 800d29a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d29e:	f7f3 f803 	bl	80002a8 <__aeabi_dsub>
 800d2a2:	f806 7b01 	strb.w	r7, [r6], #1
 800d2a6:	42ae      	cmp	r6, r5
 800d2a8:	e9cd 0100 	strd	r0, r1, [sp]
 800d2ac:	f04f 0200 	mov.w	r2, #0
 800d2b0:	d126      	bne.n	800d300 <_dtoa_r+0x5e8>
 800d2b2:	4b1c      	ldr	r3, [pc, #112]	; (800d324 <_dtoa_r+0x60c>)
 800d2b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2b8:	f7f2 fff8 	bl	80002ac <__adddf3>
 800d2bc:	4602      	mov	r2, r0
 800d2be:	460b      	mov	r3, r1
 800d2c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2c4:	f7f3 fc38 	bl	8000b38 <__aeabi_dcmpgt>
 800d2c8:	2800      	cmp	r0, #0
 800d2ca:	d174      	bne.n	800d3b6 <_dtoa_r+0x69e>
 800d2cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d2d0:	2000      	movs	r0, #0
 800d2d2:	4914      	ldr	r1, [pc, #80]	; (800d324 <_dtoa_r+0x60c>)
 800d2d4:	f7f2 ffe8 	bl	80002a8 <__aeabi_dsub>
 800d2d8:	4602      	mov	r2, r0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d2e0:	f7f3 fc0c 	bl	8000afc <__aeabi_dcmplt>
 800d2e4:	2800      	cmp	r0, #0
 800d2e6:	f43f af30 	beq.w	800d14a <_dtoa_r+0x432>
 800d2ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d2ee:	2b30      	cmp	r3, #48	; 0x30
 800d2f0:	f105 32ff 	add.w	r2, r5, #4294967295
 800d2f4:	d002      	beq.n	800d2fc <_dtoa_r+0x5e4>
 800d2f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d2fa:	e04a      	b.n	800d392 <_dtoa_r+0x67a>
 800d2fc:	4615      	mov	r5, r2
 800d2fe:	e7f4      	b.n	800d2ea <_dtoa_r+0x5d2>
 800d300:	4b05      	ldr	r3, [pc, #20]	; (800d318 <_dtoa_r+0x600>)
 800d302:	f7f3 f989 	bl	8000618 <__aeabi_dmul>
 800d306:	e9cd 0100 	strd	r0, r1, [sp]
 800d30a:	e7bc      	b.n	800d286 <_dtoa_r+0x56e>
 800d30c:	080dd3e8 	.word	0x080dd3e8
 800d310:	080dd3c0 	.word	0x080dd3c0
 800d314:	3ff00000 	.word	0x3ff00000
 800d318:	40240000 	.word	0x40240000
 800d31c:	401c0000 	.word	0x401c0000
 800d320:	40140000 	.word	0x40140000
 800d324:	3fe00000 	.word	0x3fe00000
 800d328:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d32c:	465d      	mov	r5, fp
 800d32e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d332:	4630      	mov	r0, r6
 800d334:	4639      	mov	r1, r7
 800d336:	f7f3 fa99 	bl	800086c <__aeabi_ddiv>
 800d33a:	f7f3 fc1d 	bl	8000b78 <__aeabi_d2iz>
 800d33e:	4680      	mov	r8, r0
 800d340:	f7f3 f900 	bl	8000544 <__aeabi_i2d>
 800d344:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d348:	f7f3 f966 	bl	8000618 <__aeabi_dmul>
 800d34c:	4602      	mov	r2, r0
 800d34e:	460b      	mov	r3, r1
 800d350:	4630      	mov	r0, r6
 800d352:	4639      	mov	r1, r7
 800d354:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d358:	f7f2 ffa6 	bl	80002a8 <__aeabi_dsub>
 800d35c:	f805 6b01 	strb.w	r6, [r5], #1
 800d360:	eba5 060b 	sub.w	r6, r5, fp
 800d364:	45b1      	cmp	r9, r6
 800d366:	4602      	mov	r2, r0
 800d368:	460b      	mov	r3, r1
 800d36a:	d139      	bne.n	800d3e0 <_dtoa_r+0x6c8>
 800d36c:	f7f2 ff9e 	bl	80002ac <__adddf3>
 800d370:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d374:	4606      	mov	r6, r0
 800d376:	460f      	mov	r7, r1
 800d378:	f7f3 fbde 	bl	8000b38 <__aeabi_dcmpgt>
 800d37c:	b9c8      	cbnz	r0, 800d3b2 <_dtoa_r+0x69a>
 800d37e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d382:	4630      	mov	r0, r6
 800d384:	4639      	mov	r1, r7
 800d386:	f7f3 fbaf 	bl	8000ae8 <__aeabi_dcmpeq>
 800d38a:	b110      	cbz	r0, 800d392 <_dtoa_r+0x67a>
 800d38c:	f018 0f01 	tst.w	r8, #1
 800d390:	d10f      	bne.n	800d3b2 <_dtoa_r+0x69a>
 800d392:	9904      	ldr	r1, [sp, #16]
 800d394:	4620      	mov	r0, r4
 800d396:	f000 fc99 	bl	800dccc <_Bfree>
 800d39a:	2300      	movs	r3, #0
 800d39c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d39e:	702b      	strb	r3, [r5, #0]
 800d3a0:	f10a 0301 	add.w	r3, sl, #1
 800d3a4:	6013      	str	r3, [r2, #0]
 800d3a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	f000 8241 	beq.w	800d830 <_dtoa_r+0xb18>
 800d3ae:	601d      	str	r5, [r3, #0]
 800d3b0:	e23e      	b.n	800d830 <_dtoa_r+0xb18>
 800d3b2:	f8cd a020 	str.w	sl, [sp, #32]
 800d3b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d3ba:	2a39      	cmp	r2, #57	; 0x39
 800d3bc:	f105 33ff 	add.w	r3, r5, #4294967295
 800d3c0:	d108      	bne.n	800d3d4 <_dtoa_r+0x6bc>
 800d3c2:	459b      	cmp	fp, r3
 800d3c4:	d10a      	bne.n	800d3dc <_dtoa_r+0x6c4>
 800d3c6:	9b08      	ldr	r3, [sp, #32]
 800d3c8:	3301      	adds	r3, #1
 800d3ca:	9308      	str	r3, [sp, #32]
 800d3cc:	2330      	movs	r3, #48	; 0x30
 800d3ce:	f88b 3000 	strb.w	r3, [fp]
 800d3d2:	465b      	mov	r3, fp
 800d3d4:	781a      	ldrb	r2, [r3, #0]
 800d3d6:	3201      	adds	r2, #1
 800d3d8:	701a      	strb	r2, [r3, #0]
 800d3da:	e78c      	b.n	800d2f6 <_dtoa_r+0x5de>
 800d3dc:	461d      	mov	r5, r3
 800d3de:	e7ea      	b.n	800d3b6 <_dtoa_r+0x69e>
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	4b9b      	ldr	r3, [pc, #620]	; (800d650 <_dtoa_r+0x938>)
 800d3e4:	f7f3 f918 	bl	8000618 <__aeabi_dmul>
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	2300      	movs	r3, #0
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	460f      	mov	r7, r1
 800d3f0:	f7f3 fb7a 	bl	8000ae8 <__aeabi_dcmpeq>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d09a      	beq.n	800d32e <_dtoa_r+0x616>
 800d3f8:	e7cb      	b.n	800d392 <_dtoa_r+0x67a>
 800d3fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d3fc:	2a00      	cmp	r2, #0
 800d3fe:	f000 808b 	beq.w	800d518 <_dtoa_r+0x800>
 800d402:	9a06      	ldr	r2, [sp, #24]
 800d404:	2a01      	cmp	r2, #1
 800d406:	dc6e      	bgt.n	800d4e6 <_dtoa_r+0x7ce>
 800d408:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d40a:	2a00      	cmp	r2, #0
 800d40c:	d067      	beq.n	800d4de <_dtoa_r+0x7c6>
 800d40e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d412:	9f07      	ldr	r7, [sp, #28]
 800d414:	9d05      	ldr	r5, [sp, #20]
 800d416:	9a05      	ldr	r2, [sp, #20]
 800d418:	2101      	movs	r1, #1
 800d41a:	441a      	add	r2, r3
 800d41c:	4620      	mov	r0, r4
 800d41e:	9205      	str	r2, [sp, #20]
 800d420:	4498      	add	r8, r3
 800d422:	f000 fcf3 	bl	800de0c <__i2b>
 800d426:	4606      	mov	r6, r0
 800d428:	2d00      	cmp	r5, #0
 800d42a:	dd0c      	ble.n	800d446 <_dtoa_r+0x72e>
 800d42c:	f1b8 0f00 	cmp.w	r8, #0
 800d430:	dd09      	ble.n	800d446 <_dtoa_r+0x72e>
 800d432:	4545      	cmp	r5, r8
 800d434:	9a05      	ldr	r2, [sp, #20]
 800d436:	462b      	mov	r3, r5
 800d438:	bfa8      	it	ge
 800d43a:	4643      	movge	r3, r8
 800d43c:	1ad2      	subs	r2, r2, r3
 800d43e:	9205      	str	r2, [sp, #20]
 800d440:	1aed      	subs	r5, r5, r3
 800d442:	eba8 0803 	sub.w	r8, r8, r3
 800d446:	9b07      	ldr	r3, [sp, #28]
 800d448:	b1eb      	cbz	r3, 800d486 <_dtoa_r+0x76e>
 800d44a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d067      	beq.n	800d520 <_dtoa_r+0x808>
 800d450:	b18f      	cbz	r7, 800d476 <_dtoa_r+0x75e>
 800d452:	4631      	mov	r1, r6
 800d454:	463a      	mov	r2, r7
 800d456:	4620      	mov	r0, r4
 800d458:	f000 fd78 	bl	800df4c <__pow5mult>
 800d45c:	9a04      	ldr	r2, [sp, #16]
 800d45e:	4601      	mov	r1, r0
 800d460:	4606      	mov	r6, r0
 800d462:	4620      	mov	r0, r4
 800d464:	f000 fcdb 	bl	800de1e <__multiply>
 800d468:	9904      	ldr	r1, [sp, #16]
 800d46a:	9008      	str	r0, [sp, #32]
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 fc2d 	bl	800dccc <_Bfree>
 800d472:	9b08      	ldr	r3, [sp, #32]
 800d474:	9304      	str	r3, [sp, #16]
 800d476:	9b07      	ldr	r3, [sp, #28]
 800d478:	1bda      	subs	r2, r3, r7
 800d47a:	d004      	beq.n	800d486 <_dtoa_r+0x76e>
 800d47c:	9904      	ldr	r1, [sp, #16]
 800d47e:	4620      	mov	r0, r4
 800d480:	f000 fd64 	bl	800df4c <__pow5mult>
 800d484:	9004      	str	r0, [sp, #16]
 800d486:	2101      	movs	r1, #1
 800d488:	4620      	mov	r0, r4
 800d48a:	f000 fcbf 	bl	800de0c <__i2b>
 800d48e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d490:	4607      	mov	r7, r0
 800d492:	2b00      	cmp	r3, #0
 800d494:	f000 81d0 	beq.w	800d838 <_dtoa_r+0xb20>
 800d498:	461a      	mov	r2, r3
 800d49a:	4601      	mov	r1, r0
 800d49c:	4620      	mov	r0, r4
 800d49e:	f000 fd55 	bl	800df4c <__pow5mult>
 800d4a2:	9b06      	ldr	r3, [sp, #24]
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	4607      	mov	r7, r0
 800d4a8:	dc40      	bgt.n	800d52c <_dtoa_r+0x814>
 800d4aa:	9b00      	ldr	r3, [sp, #0]
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d139      	bne.n	800d524 <_dtoa_r+0x80c>
 800d4b0:	9b01      	ldr	r3, [sp, #4]
 800d4b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d136      	bne.n	800d528 <_dtoa_r+0x810>
 800d4ba:	9b01      	ldr	r3, [sp, #4]
 800d4bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d4c0:	0d1b      	lsrs	r3, r3, #20
 800d4c2:	051b      	lsls	r3, r3, #20
 800d4c4:	b12b      	cbz	r3, 800d4d2 <_dtoa_r+0x7ba>
 800d4c6:	9b05      	ldr	r3, [sp, #20]
 800d4c8:	3301      	adds	r3, #1
 800d4ca:	9305      	str	r3, [sp, #20]
 800d4cc:	f108 0801 	add.w	r8, r8, #1
 800d4d0:	2301      	movs	r3, #1
 800d4d2:	9307      	str	r3, [sp, #28]
 800d4d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d12a      	bne.n	800d530 <_dtoa_r+0x818>
 800d4da:	2001      	movs	r0, #1
 800d4dc:	e030      	b.n	800d540 <_dtoa_r+0x828>
 800d4de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d4e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4e4:	e795      	b.n	800d412 <_dtoa_r+0x6fa>
 800d4e6:	9b07      	ldr	r3, [sp, #28]
 800d4e8:	f109 37ff 	add.w	r7, r9, #4294967295
 800d4ec:	42bb      	cmp	r3, r7
 800d4ee:	bfbf      	itttt	lt
 800d4f0:	9b07      	ldrlt	r3, [sp, #28]
 800d4f2:	9707      	strlt	r7, [sp, #28]
 800d4f4:	1afa      	sublt	r2, r7, r3
 800d4f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d4f8:	bfbb      	ittet	lt
 800d4fa:	189b      	addlt	r3, r3, r2
 800d4fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d4fe:	1bdf      	subge	r7, r3, r7
 800d500:	2700      	movlt	r7, #0
 800d502:	f1b9 0f00 	cmp.w	r9, #0
 800d506:	bfb5      	itete	lt
 800d508:	9b05      	ldrlt	r3, [sp, #20]
 800d50a:	9d05      	ldrge	r5, [sp, #20]
 800d50c:	eba3 0509 	sublt.w	r5, r3, r9
 800d510:	464b      	movge	r3, r9
 800d512:	bfb8      	it	lt
 800d514:	2300      	movlt	r3, #0
 800d516:	e77e      	b.n	800d416 <_dtoa_r+0x6fe>
 800d518:	9f07      	ldr	r7, [sp, #28]
 800d51a:	9d05      	ldr	r5, [sp, #20]
 800d51c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d51e:	e783      	b.n	800d428 <_dtoa_r+0x710>
 800d520:	9a07      	ldr	r2, [sp, #28]
 800d522:	e7ab      	b.n	800d47c <_dtoa_r+0x764>
 800d524:	2300      	movs	r3, #0
 800d526:	e7d4      	b.n	800d4d2 <_dtoa_r+0x7ba>
 800d528:	9b00      	ldr	r3, [sp, #0]
 800d52a:	e7d2      	b.n	800d4d2 <_dtoa_r+0x7ba>
 800d52c:	2300      	movs	r3, #0
 800d52e:	9307      	str	r3, [sp, #28]
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d536:	6918      	ldr	r0, [r3, #16]
 800d538:	f000 fc1a 	bl	800dd70 <__hi0bits>
 800d53c:	f1c0 0020 	rsb	r0, r0, #32
 800d540:	4440      	add	r0, r8
 800d542:	f010 001f 	ands.w	r0, r0, #31
 800d546:	d047      	beq.n	800d5d8 <_dtoa_r+0x8c0>
 800d548:	f1c0 0320 	rsb	r3, r0, #32
 800d54c:	2b04      	cmp	r3, #4
 800d54e:	dd3b      	ble.n	800d5c8 <_dtoa_r+0x8b0>
 800d550:	9b05      	ldr	r3, [sp, #20]
 800d552:	f1c0 001c 	rsb	r0, r0, #28
 800d556:	4403      	add	r3, r0
 800d558:	9305      	str	r3, [sp, #20]
 800d55a:	4405      	add	r5, r0
 800d55c:	4480      	add	r8, r0
 800d55e:	9b05      	ldr	r3, [sp, #20]
 800d560:	2b00      	cmp	r3, #0
 800d562:	dd05      	ble.n	800d570 <_dtoa_r+0x858>
 800d564:	461a      	mov	r2, r3
 800d566:	9904      	ldr	r1, [sp, #16]
 800d568:	4620      	mov	r0, r4
 800d56a:	f000 fd3d 	bl	800dfe8 <__lshift>
 800d56e:	9004      	str	r0, [sp, #16]
 800d570:	f1b8 0f00 	cmp.w	r8, #0
 800d574:	dd05      	ble.n	800d582 <_dtoa_r+0x86a>
 800d576:	4639      	mov	r1, r7
 800d578:	4642      	mov	r2, r8
 800d57a:	4620      	mov	r0, r4
 800d57c:	f000 fd34 	bl	800dfe8 <__lshift>
 800d580:	4607      	mov	r7, r0
 800d582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d584:	b353      	cbz	r3, 800d5dc <_dtoa_r+0x8c4>
 800d586:	4639      	mov	r1, r7
 800d588:	9804      	ldr	r0, [sp, #16]
 800d58a:	f000 fd81 	bl	800e090 <__mcmp>
 800d58e:	2800      	cmp	r0, #0
 800d590:	da24      	bge.n	800d5dc <_dtoa_r+0x8c4>
 800d592:	2300      	movs	r3, #0
 800d594:	220a      	movs	r2, #10
 800d596:	9904      	ldr	r1, [sp, #16]
 800d598:	4620      	mov	r0, r4
 800d59a:	f000 fbae 	bl	800dcfa <__multadd>
 800d59e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a0:	9004      	str	r0, [sp, #16]
 800d5a2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	f000 814d 	beq.w	800d846 <_dtoa_r+0xb2e>
 800d5ac:	2300      	movs	r3, #0
 800d5ae:	4631      	mov	r1, r6
 800d5b0:	220a      	movs	r2, #10
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 fba1 	bl	800dcfa <__multadd>
 800d5b8:	9b02      	ldr	r3, [sp, #8]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	4606      	mov	r6, r0
 800d5be:	dc4f      	bgt.n	800d660 <_dtoa_r+0x948>
 800d5c0:	9b06      	ldr	r3, [sp, #24]
 800d5c2:	2b02      	cmp	r3, #2
 800d5c4:	dd4c      	ble.n	800d660 <_dtoa_r+0x948>
 800d5c6:	e011      	b.n	800d5ec <_dtoa_r+0x8d4>
 800d5c8:	d0c9      	beq.n	800d55e <_dtoa_r+0x846>
 800d5ca:	9a05      	ldr	r2, [sp, #20]
 800d5cc:	331c      	adds	r3, #28
 800d5ce:	441a      	add	r2, r3
 800d5d0:	9205      	str	r2, [sp, #20]
 800d5d2:	441d      	add	r5, r3
 800d5d4:	4498      	add	r8, r3
 800d5d6:	e7c2      	b.n	800d55e <_dtoa_r+0x846>
 800d5d8:	4603      	mov	r3, r0
 800d5da:	e7f6      	b.n	800d5ca <_dtoa_r+0x8b2>
 800d5dc:	f1b9 0f00 	cmp.w	r9, #0
 800d5e0:	dc38      	bgt.n	800d654 <_dtoa_r+0x93c>
 800d5e2:	9b06      	ldr	r3, [sp, #24]
 800d5e4:	2b02      	cmp	r3, #2
 800d5e6:	dd35      	ble.n	800d654 <_dtoa_r+0x93c>
 800d5e8:	f8cd 9008 	str.w	r9, [sp, #8]
 800d5ec:	9b02      	ldr	r3, [sp, #8]
 800d5ee:	b963      	cbnz	r3, 800d60a <_dtoa_r+0x8f2>
 800d5f0:	4639      	mov	r1, r7
 800d5f2:	2205      	movs	r2, #5
 800d5f4:	4620      	mov	r0, r4
 800d5f6:	f000 fb80 	bl	800dcfa <__multadd>
 800d5fa:	4601      	mov	r1, r0
 800d5fc:	4607      	mov	r7, r0
 800d5fe:	9804      	ldr	r0, [sp, #16]
 800d600:	f000 fd46 	bl	800e090 <__mcmp>
 800d604:	2800      	cmp	r0, #0
 800d606:	f73f adcc 	bgt.w	800d1a2 <_dtoa_r+0x48a>
 800d60a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d60c:	465d      	mov	r5, fp
 800d60e:	ea6f 0a03 	mvn.w	sl, r3
 800d612:	f04f 0900 	mov.w	r9, #0
 800d616:	4639      	mov	r1, r7
 800d618:	4620      	mov	r0, r4
 800d61a:	f000 fb57 	bl	800dccc <_Bfree>
 800d61e:	2e00      	cmp	r6, #0
 800d620:	f43f aeb7 	beq.w	800d392 <_dtoa_r+0x67a>
 800d624:	f1b9 0f00 	cmp.w	r9, #0
 800d628:	d005      	beq.n	800d636 <_dtoa_r+0x91e>
 800d62a:	45b1      	cmp	r9, r6
 800d62c:	d003      	beq.n	800d636 <_dtoa_r+0x91e>
 800d62e:	4649      	mov	r1, r9
 800d630:	4620      	mov	r0, r4
 800d632:	f000 fb4b 	bl	800dccc <_Bfree>
 800d636:	4631      	mov	r1, r6
 800d638:	4620      	mov	r0, r4
 800d63a:	f000 fb47 	bl	800dccc <_Bfree>
 800d63e:	e6a8      	b.n	800d392 <_dtoa_r+0x67a>
 800d640:	2700      	movs	r7, #0
 800d642:	463e      	mov	r6, r7
 800d644:	e7e1      	b.n	800d60a <_dtoa_r+0x8f2>
 800d646:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d64a:	463e      	mov	r6, r7
 800d64c:	e5a9      	b.n	800d1a2 <_dtoa_r+0x48a>
 800d64e:	bf00      	nop
 800d650:	40240000 	.word	0x40240000
 800d654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d656:	f8cd 9008 	str.w	r9, [sp, #8]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	f000 80fa 	beq.w	800d854 <_dtoa_r+0xb3c>
 800d660:	2d00      	cmp	r5, #0
 800d662:	dd05      	ble.n	800d670 <_dtoa_r+0x958>
 800d664:	4631      	mov	r1, r6
 800d666:	462a      	mov	r2, r5
 800d668:	4620      	mov	r0, r4
 800d66a:	f000 fcbd 	bl	800dfe8 <__lshift>
 800d66e:	4606      	mov	r6, r0
 800d670:	9b07      	ldr	r3, [sp, #28]
 800d672:	2b00      	cmp	r3, #0
 800d674:	d04c      	beq.n	800d710 <_dtoa_r+0x9f8>
 800d676:	6871      	ldr	r1, [r6, #4]
 800d678:	4620      	mov	r0, r4
 800d67a:	f000 faf3 	bl	800dc64 <_Balloc>
 800d67e:	6932      	ldr	r2, [r6, #16]
 800d680:	3202      	adds	r2, #2
 800d682:	4605      	mov	r5, r0
 800d684:	0092      	lsls	r2, r2, #2
 800d686:	f106 010c 	add.w	r1, r6, #12
 800d68a:	300c      	adds	r0, #12
 800d68c:	f7fe fa9e 	bl	800bbcc <memcpy>
 800d690:	2201      	movs	r2, #1
 800d692:	4629      	mov	r1, r5
 800d694:	4620      	mov	r0, r4
 800d696:	f000 fca7 	bl	800dfe8 <__lshift>
 800d69a:	9b00      	ldr	r3, [sp, #0]
 800d69c:	f8cd b014 	str.w	fp, [sp, #20]
 800d6a0:	f003 0301 	and.w	r3, r3, #1
 800d6a4:	46b1      	mov	r9, r6
 800d6a6:	9307      	str	r3, [sp, #28]
 800d6a8:	4606      	mov	r6, r0
 800d6aa:	4639      	mov	r1, r7
 800d6ac:	9804      	ldr	r0, [sp, #16]
 800d6ae:	f7ff faa7 	bl	800cc00 <quorem>
 800d6b2:	4649      	mov	r1, r9
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d6ba:	9804      	ldr	r0, [sp, #16]
 800d6bc:	f000 fce8 	bl	800e090 <__mcmp>
 800d6c0:	4632      	mov	r2, r6
 800d6c2:	9000      	str	r0, [sp, #0]
 800d6c4:	4639      	mov	r1, r7
 800d6c6:	4620      	mov	r0, r4
 800d6c8:	f000 fcfc 	bl	800e0c4 <__mdiff>
 800d6cc:	68c3      	ldr	r3, [r0, #12]
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	bb03      	cbnz	r3, 800d714 <_dtoa_r+0x9fc>
 800d6d2:	4601      	mov	r1, r0
 800d6d4:	9008      	str	r0, [sp, #32]
 800d6d6:	9804      	ldr	r0, [sp, #16]
 800d6d8:	f000 fcda 	bl	800e090 <__mcmp>
 800d6dc:	9a08      	ldr	r2, [sp, #32]
 800d6de:	4603      	mov	r3, r0
 800d6e0:	4611      	mov	r1, r2
 800d6e2:	4620      	mov	r0, r4
 800d6e4:	9308      	str	r3, [sp, #32]
 800d6e6:	f000 faf1 	bl	800dccc <_Bfree>
 800d6ea:	9b08      	ldr	r3, [sp, #32]
 800d6ec:	b9a3      	cbnz	r3, 800d718 <_dtoa_r+0xa00>
 800d6ee:	9a06      	ldr	r2, [sp, #24]
 800d6f0:	b992      	cbnz	r2, 800d718 <_dtoa_r+0xa00>
 800d6f2:	9a07      	ldr	r2, [sp, #28]
 800d6f4:	b982      	cbnz	r2, 800d718 <_dtoa_r+0xa00>
 800d6f6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d6fa:	d029      	beq.n	800d750 <_dtoa_r+0xa38>
 800d6fc:	9b00      	ldr	r3, [sp, #0]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	dd01      	ble.n	800d706 <_dtoa_r+0x9ee>
 800d702:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d706:	9b05      	ldr	r3, [sp, #20]
 800d708:	1c5d      	adds	r5, r3, #1
 800d70a:	f883 8000 	strb.w	r8, [r3]
 800d70e:	e782      	b.n	800d616 <_dtoa_r+0x8fe>
 800d710:	4630      	mov	r0, r6
 800d712:	e7c2      	b.n	800d69a <_dtoa_r+0x982>
 800d714:	2301      	movs	r3, #1
 800d716:	e7e3      	b.n	800d6e0 <_dtoa_r+0x9c8>
 800d718:	9a00      	ldr	r2, [sp, #0]
 800d71a:	2a00      	cmp	r2, #0
 800d71c:	db04      	blt.n	800d728 <_dtoa_r+0xa10>
 800d71e:	d125      	bne.n	800d76c <_dtoa_r+0xa54>
 800d720:	9a06      	ldr	r2, [sp, #24]
 800d722:	bb1a      	cbnz	r2, 800d76c <_dtoa_r+0xa54>
 800d724:	9a07      	ldr	r2, [sp, #28]
 800d726:	bb0a      	cbnz	r2, 800d76c <_dtoa_r+0xa54>
 800d728:	2b00      	cmp	r3, #0
 800d72a:	ddec      	ble.n	800d706 <_dtoa_r+0x9ee>
 800d72c:	2201      	movs	r2, #1
 800d72e:	9904      	ldr	r1, [sp, #16]
 800d730:	4620      	mov	r0, r4
 800d732:	f000 fc59 	bl	800dfe8 <__lshift>
 800d736:	4639      	mov	r1, r7
 800d738:	9004      	str	r0, [sp, #16]
 800d73a:	f000 fca9 	bl	800e090 <__mcmp>
 800d73e:	2800      	cmp	r0, #0
 800d740:	dc03      	bgt.n	800d74a <_dtoa_r+0xa32>
 800d742:	d1e0      	bne.n	800d706 <_dtoa_r+0x9ee>
 800d744:	f018 0f01 	tst.w	r8, #1
 800d748:	d0dd      	beq.n	800d706 <_dtoa_r+0x9ee>
 800d74a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d74e:	d1d8      	bne.n	800d702 <_dtoa_r+0x9ea>
 800d750:	9b05      	ldr	r3, [sp, #20]
 800d752:	9a05      	ldr	r2, [sp, #20]
 800d754:	1c5d      	adds	r5, r3, #1
 800d756:	2339      	movs	r3, #57	; 0x39
 800d758:	7013      	strb	r3, [r2, #0]
 800d75a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d75e:	2b39      	cmp	r3, #57	; 0x39
 800d760:	f105 32ff 	add.w	r2, r5, #4294967295
 800d764:	d04f      	beq.n	800d806 <_dtoa_r+0xaee>
 800d766:	3301      	adds	r3, #1
 800d768:	7013      	strb	r3, [r2, #0]
 800d76a:	e754      	b.n	800d616 <_dtoa_r+0x8fe>
 800d76c:	9a05      	ldr	r2, [sp, #20]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f102 0501 	add.w	r5, r2, #1
 800d774:	dd06      	ble.n	800d784 <_dtoa_r+0xa6c>
 800d776:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d77a:	d0e9      	beq.n	800d750 <_dtoa_r+0xa38>
 800d77c:	f108 0801 	add.w	r8, r8, #1
 800d780:	9b05      	ldr	r3, [sp, #20]
 800d782:	e7c2      	b.n	800d70a <_dtoa_r+0x9f2>
 800d784:	9a02      	ldr	r2, [sp, #8]
 800d786:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d78a:	eba5 030b 	sub.w	r3, r5, fp
 800d78e:	4293      	cmp	r3, r2
 800d790:	d021      	beq.n	800d7d6 <_dtoa_r+0xabe>
 800d792:	2300      	movs	r3, #0
 800d794:	220a      	movs	r2, #10
 800d796:	9904      	ldr	r1, [sp, #16]
 800d798:	4620      	mov	r0, r4
 800d79a:	f000 faae 	bl	800dcfa <__multadd>
 800d79e:	45b1      	cmp	r9, r6
 800d7a0:	9004      	str	r0, [sp, #16]
 800d7a2:	f04f 0300 	mov.w	r3, #0
 800d7a6:	f04f 020a 	mov.w	r2, #10
 800d7aa:	4649      	mov	r1, r9
 800d7ac:	4620      	mov	r0, r4
 800d7ae:	d105      	bne.n	800d7bc <_dtoa_r+0xaa4>
 800d7b0:	f000 faa3 	bl	800dcfa <__multadd>
 800d7b4:	4681      	mov	r9, r0
 800d7b6:	4606      	mov	r6, r0
 800d7b8:	9505      	str	r5, [sp, #20]
 800d7ba:	e776      	b.n	800d6aa <_dtoa_r+0x992>
 800d7bc:	f000 fa9d 	bl	800dcfa <__multadd>
 800d7c0:	4631      	mov	r1, r6
 800d7c2:	4681      	mov	r9, r0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	220a      	movs	r2, #10
 800d7c8:	4620      	mov	r0, r4
 800d7ca:	f000 fa96 	bl	800dcfa <__multadd>
 800d7ce:	4606      	mov	r6, r0
 800d7d0:	e7f2      	b.n	800d7b8 <_dtoa_r+0xaa0>
 800d7d2:	f04f 0900 	mov.w	r9, #0
 800d7d6:	2201      	movs	r2, #1
 800d7d8:	9904      	ldr	r1, [sp, #16]
 800d7da:	4620      	mov	r0, r4
 800d7dc:	f000 fc04 	bl	800dfe8 <__lshift>
 800d7e0:	4639      	mov	r1, r7
 800d7e2:	9004      	str	r0, [sp, #16]
 800d7e4:	f000 fc54 	bl	800e090 <__mcmp>
 800d7e8:	2800      	cmp	r0, #0
 800d7ea:	dcb6      	bgt.n	800d75a <_dtoa_r+0xa42>
 800d7ec:	d102      	bne.n	800d7f4 <_dtoa_r+0xadc>
 800d7ee:	f018 0f01 	tst.w	r8, #1
 800d7f2:	d1b2      	bne.n	800d75a <_dtoa_r+0xa42>
 800d7f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7f8:	2b30      	cmp	r3, #48	; 0x30
 800d7fa:	f105 32ff 	add.w	r2, r5, #4294967295
 800d7fe:	f47f af0a 	bne.w	800d616 <_dtoa_r+0x8fe>
 800d802:	4615      	mov	r5, r2
 800d804:	e7f6      	b.n	800d7f4 <_dtoa_r+0xadc>
 800d806:	4593      	cmp	fp, r2
 800d808:	d105      	bne.n	800d816 <_dtoa_r+0xafe>
 800d80a:	2331      	movs	r3, #49	; 0x31
 800d80c:	f10a 0a01 	add.w	sl, sl, #1
 800d810:	f88b 3000 	strb.w	r3, [fp]
 800d814:	e6ff      	b.n	800d616 <_dtoa_r+0x8fe>
 800d816:	4615      	mov	r5, r2
 800d818:	e79f      	b.n	800d75a <_dtoa_r+0xa42>
 800d81a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d880 <_dtoa_r+0xb68>
 800d81e:	e007      	b.n	800d830 <_dtoa_r+0xb18>
 800d820:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d822:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d884 <_dtoa_r+0xb6c>
 800d826:	b11b      	cbz	r3, 800d830 <_dtoa_r+0xb18>
 800d828:	f10b 0308 	add.w	r3, fp, #8
 800d82c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d82e:	6013      	str	r3, [r2, #0]
 800d830:	4658      	mov	r0, fp
 800d832:	b017      	add	sp, #92	; 0x5c
 800d834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d838:	9b06      	ldr	r3, [sp, #24]
 800d83a:	2b01      	cmp	r3, #1
 800d83c:	f77f ae35 	ble.w	800d4aa <_dtoa_r+0x792>
 800d840:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d842:	9307      	str	r3, [sp, #28]
 800d844:	e649      	b.n	800d4da <_dtoa_r+0x7c2>
 800d846:	9b02      	ldr	r3, [sp, #8]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	dc03      	bgt.n	800d854 <_dtoa_r+0xb3c>
 800d84c:	9b06      	ldr	r3, [sp, #24]
 800d84e:	2b02      	cmp	r3, #2
 800d850:	f73f aecc 	bgt.w	800d5ec <_dtoa_r+0x8d4>
 800d854:	465d      	mov	r5, fp
 800d856:	4639      	mov	r1, r7
 800d858:	9804      	ldr	r0, [sp, #16]
 800d85a:	f7ff f9d1 	bl	800cc00 <quorem>
 800d85e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d862:	f805 8b01 	strb.w	r8, [r5], #1
 800d866:	9a02      	ldr	r2, [sp, #8]
 800d868:	eba5 030b 	sub.w	r3, r5, fp
 800d86c:	429a      	cmp	r2, r3
 800d86e:	ddb0      	ble.n	800d7d2 <_dtoa_r+0xaba>
 800d870:	2300      	movs	r3, #0
 800d872:	220a      	movs	r2, #10
 800d874:	9904      	ldr	r1, [sp, #16]
 800d876:	4620      	mov	r0, r4
 800d878:	f000 fa3f 	bl	800dcfa <__multadd>
 800d87c:	9004      	str	r0, [sp, #16]
 800d87e:	e7ea      	b.n	800d856 <_dtoa_r+0xb3e>
 800d880:	080dd32d 	.word	0x080dd32d
 800d884:	080dd351 	.word	0x080dd351

0800d888 <__sflush_r>:
 800d888:	898a      	ldrh	r2, [r1, #12]
 800d88a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d88e:	4605      	mov	r5, r0
 800d890:	0710      	lsls	r0, r2, #28
 800d892:	460c      	mov	r4, r1
 800d894:	d458      	bmi.n	800d948 <__sflush_r+0xc0>
 800d896:	684b      	ldr	r3, [r1, #4]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	dc05      	bgt.n	800d8a8 <__sflush_r+0x20>
 800d89c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	dc02      	bgt.n	800d8a8 <__sflush_r+0x20>
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d8a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8aa:	2e00      	cmp	r6, #0
 800d8ac:	d0f9      	beq.n	800d8a2 <__sflush_r+0x1a>
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d8b4:	682f      	ldr	r7, [r5, #0]
 800d8b6:	6a21      	ldr	r1, [r4, #32]
 800d8b8:	602b      	str	r3, [r5, #0]
 800d8ba:	d032      	beq.n	800d922 <__sflush_r+0x9a>
 800d8bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d8be:	89a3      	ldrh	r3, [r4, #12]
 800d8c0:	075a      	lsls	r2, r3, #29
 800d8c2:	d505      	bpl.n	800d8d0 <__sflush_r+0x48>
 800d8c4:	6863      	ldr	r3, [r4, #4]
 800d8c6:	1ac0      	subs	r0, r0, r3
 800d8c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d8ca:	b10b      	cbz	r3, 800d8d0 <__sflush_r+0x48>
 800d8cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d8ce:	1ac0      	subs	r0, r0, r3
 800d8d0:	2300      	movs	r3, #0
 800d8d2:	4602      	mov	r2, r0
 800d8d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d8d6:	6a21      	ldr	r1, [r4, #32]
 800d8d8:	4628      	mov	r0, r5
 800d8da:	47b0      	blx	r6
 800d8dc:	1c43      	adds	r3, r0, #1
 800d8de:	89a3      	ldrh	r3, [r4, #12]
 800d8e0:	d106      	bne.n	800d8f0 <__sflush_r+0x68>
 800d8e2:	6829      	ldr	r1, [r5, #0]
 800d8e4:	291d      	cmp	r1, #29
 800d8e6:	d848      	bhi.n	800d97a <__sflush_r+0xf2>
 800d8e8:	4a29      	ldr	r2, [pc, #164]	; (800d990 <__sflush_r+0x108>)
 800d8ea:	40ca      	lsrs	r2, r1
 800d8ec:	07d6      	lsls	r6, r2, #31
 800d8ee:	d544      	bpl.n	800d97a <__sflush_r+0xf2>
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	6062      	str	r2, [r4, #4]
 800d8f4:	04d9      	lsls	r1, r3, #19
 800d8f6:	6922      	ldr	r2, [r4, #16]
 800d8f8:	6022      	str	r2, [r4, #0]
 800d8fa:	d504      	bpl.n	800d906 <__sflush_r+0x7e>
 800d8fc:	1c42      	adds	r2, r0, #1
 800d8fe:	d101      	bne.n	800d904 <__sflush_r+0x7c>
 800d900:	682b      	ldr	r3, [r5, #0]
 800d902:	b903      	cbnz	r3, 800d906 <__sflush_r+0x7e>
 800d904:	6560      	str	r0, [r4, #84]	; 0x54
 800d906:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d908:	602f      	str	r7, [r5, #0]
 800d90a:	2900      	cmp	r1, #0
 800d90c:	d0c9      	beq.n	800d8a2 <__sflush_r+0x1a>
 800d90e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d912:	4299      	cmp	r1, r3
 800d914:	d002      	beq.n	800d91c <__sflush_r+0x94>
 800d916:	4628      	mov	r0, r5
 800d918:	f7fe f984 	bl	800bc24 <_free_r>
 800d91c:	2000      	movs	r0, #0
 800d91e:	6360      	str	r0, [r4, #52]	; 0x34
 800d920:	e7c0      	b.n	800d8a4 <__sflush_r+0x1c>
 800d922:	2301      	movs	r3, #1
 800d924:	4628      	mov	r0, r5
 800d926:	47b0      	blx	r6
 800d928:	1c41      	adds	r1, r0, #1
 800d92a:	d1c8      	bne.n	800d8be <__sflush_r+0x36>
 800d92c:	682b      	ldr	r3, [r5, #0]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d0c5      	beq.n	800d8be <__sflush_r+0x36>
 800d932:	2b1d      	cmp	r3, #29
 800d934:	d001      	beq.n	800d93a <__sflush_r+0xb2>
 800d936:	2b16      	cmp	r3, #22
 800d938:	d101      	bne.n	800d93e <__sflush_r+0xb6>
 800d93a:	602f      	str	r7, [r5, #0]
 800d93c:	e7b1      	b.n	800d8a2 <__sflush_r+0x1a>
 800d93e:	89a3      	ldrh	r3, [r4, #12]
 800d940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d944:	81a3      	strh	r3, [r4, #12]
 800d946:	e7ad      	b.n	800d8a4 <__sflush_r+0x1c>
 800d948:	690f      	ldr	r7, [r1, #16]
 800d94a:	2f00      	cmp	r7, #0
 800d94c:	d0a9      	beq.n	800d8a2 <__sflush_r+0x1a>
 800d94e:	0793      	lsls	r3, r2, #30
 800d950:	680e      	ldr	r6, [r1, #0]
 800d952:	bf08      	it	eq
 800d954:	694b      	ldreq	r3, [r1, #20]
 800d956:	600f      	str	r7, [r1, #0]
 800d958:	bf18      	it	ne
 800d95a:	2300      	movne	r3, #0
 800d95c:	eba6 0807 	sub.w	r8, r6, r7
 800d960:	608b      	str	r3, [r1, #8]
 800d962:	f1b8 0f00 	cmp.w	r8, #0
 800d966:	dd9c      	ble.n	800d8a2 <__sflush_r+0x1a>
 800d968:	4643      	mov	r3, r8
 800d96a:	463a      	mov	r2, r7
 800d96c:	6a21      	ldr	r1, [r4, #32]
 800d96e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d970:	4628      	mov	r0, r5
 800d972:	47b0      	blx	r6
 800d974:	2800      	cmp	r0, #0
 800d976:	dc06      	bgt.n	800d986 <__sflush_r+0xfe>
 800d978:	89a3      	ldrh	r3, [r4, #12]
 800d97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d97e:	81a3      	strh	r3, [r4, #12]
 800d980:	f04f 30ff 	mov.w	r0, #4294967295
 800d984:	e78e      	b.n	800d8a4 <__sflush_r+0x1c>
 800d986:	4407      	add	r7, r0
 800d988:	eba8 0800 	sub.w	r8, r8, r0
 800d98c:	e7e9      	b.n	800d962 <__sflush_r+0xda>
 800d98e:	bf00      	nop
 800d990:	20400001 	.word	0x20400001

0800d994 <_fflush_r>:
 800d994:	b538      	push	{r3, r4, r5, lr}
 800d996:	690b      	ldr	r3, [r1, #16]
 800d998:	4605      	mov	r5, r0
 800d99a:	460c      	mov	r4, r1
 800d99c:	b1db      	cbz	r3, 800d9d6 <_fflush_r+0x42>
 800d99e:	b118      	cbz	r0, 800d9a8 <_fflush_r+0x14>
 800d9a0:	6983      	ldr	r3, [r0, #24]
 800d9a2:	b90b      	cbnz	r3, 800d9a8 <_fflush_r+0x14>
 800d9a4:	f000 f860 	bl	800da68 <__sinit>
 800d9a8:	4b0c      	ldr	r3, [pc, #48]	; (800d9dc <_fflush_r+0x48>)
 800d9aa:	429c      	cmp	r4, r3
 800d9ac:	d109      	bne.n	800d9c2 <_fflush_r+0x2e>
 800d9ae:	686c      	ldr	r4, [r5, #4]
 800d9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9b4:	b17b      	cbz	r3, 800d9d6 <_fflush_r+0x42>
 800d9b6:	4621      	mov	r1, r4
 800d9b8:	4628      	mov	r0, r5
 800d9ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9be:	f7ff bf63 	b.w	800d888 <__sflush_r>
 800d9c2:	4b07      	ldr	r3, [pc, #28]	; (800d9e0 <_fflush_r+0x4c>)
 800d9c4:	429c      	cmp	r4, r3
 800d9c6:	d101      	bne.n	800d9cc <_fflush_r+0x38>
 800d9c8:	68ac      	ldr	r4, [r5, #8]
 800d9ca:	e7f1      	b.n	800d9b0 <_fflush_r+0x1c>
 800d9cc:	4b05      	ldr	r3, [pc, #20]	; (800d9e4 <_fflush_r+0x50>)
 800d9ce:	429c      	cmp	r4, r3
 800d9d0:	bf08      	it	eq
 800d9d2:	68ec      	ldreq	r4, [r5, #12]
 800d9d4:	e7ec      	b.n	800d9b0 <_fflush_r+0x1c>
 800d9d6:	2000      	movs	r0, #0
 800d9d8:	bd38      	pop	{r3, r4, r5, pc}
 800d9da:	bf00      	nop
 800d9dc:	080dd380 	.word	0x080dd380
 800d9e0:	080dd3a0 	.word	0x080dd3a0
 800d9e4:	080dd360 	.word	0x080dd360

0800d9e8 <std>:
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	b510      	push	{r4, lr}
 800d9ec:	4604      	mov	r4, r0
 800d9ee:	e9c0 3300 	strd	r3, r3, [r0]
 800d9f2:	6083      	str	r3, [r0, #8]
 800d9f4:	8181      	strh	r1, [r0, #12]
 800d9f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d9f8:	81c2      	strh	r2, [r0, #14]
 800d9fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d9fe:	6183      	str	r3, [r0, #24]
 800da00:	4619      	mov	r1, r3
 800da02:	2208      	movs	r2, #8
 800da04:	305c      	adds	r0, #92	; 0x5c
 800da06:	f7fe f905 	bl	800bc14 <memset>
 800da0a:	4b05      	ldr	r3, [pc, #20]	; (800da20 <std+0x38>)
 800da0c:	6263      	str	r3, [r4, #36]	; 0x24
 800da0e:	4b05      	ldr	r3, [pc, #20]	; (800da24 <std+0x3c>)
 800da10:	62a3      	str	r3, [r4, #40]	; 0x28
 800da12:	4b05      	ldr	r3, [pc, #20]	; (800da28 <std+0x40>)
 800da14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800da16:	4b05      	ldr	r3, [pc, #20]	; (800da2c <std+0x44>)
 800da18:	6224      	str	r4, [r4, #32]
 800da1a:	6323      	str	r3, [r4, #48]	; 0x30
 800da1c:	bd10      	pop	{r4, pc}
 800da1e:	bf00      	nop
 800da20:	0800e529 	.word	0x0800e529
 800da24:	0800e54b 	.word	0x0800e54b
 800da28:	0800e583 	.word	0x0800e583
 800da2c:	0800e5a7 	.word	0x0800e5a7

0800da30 <_cleanup_r>:
 800da30:	4901      	ldr	r1, [pc, #4]	; (800da38 <_cleanup_r+0x8>)
 800da32:	f000 b885 	b.w	800db40 <_fwalk_reent>
 800da36:	bf00      	nop
 800da38:	0800d995 	.word	0x0800d995

0800da3c <__sfmoreglue>:
 800da3c:	b570      	push	{r4, r5, r6, lr}
 800da3e:	1e4a      	subs	r2, r1, #1
 800da40:	2568      	movs	r5, #104	; 0x68
 800da42:	4355      	muls	r5, r2
 800da44:	460e      	mov	r6, r1
 800da46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800da4a:	f7fe f939 	bl	800bcc0 <_malloc_r>
 800da4e:	4604      	mov	r4, r0
 800da50:	b140      	cbz	r0, 800da64 <__sfmoreglue+0x28>
 800da52:	2100      	movs	r1, #0
 800da54:	e9c0 1600 	strd	r1, r6, [r0]
 800da58:	300c      	adds	r0, #12
 800da5a:	60a0      	str	r0, [r4, #8]
 800da5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800da60:	f7fe f8d8 	bl	800bc14 <memset>
 800da64:	4620      	mov	r0, r4
 800da66:	bd70      	pop	{r4, r5, r6, pc}

0800da68 <__sinit>:
 800da68:	6983      	ldr	r3, [r0, #24]
 800da6a:	b510      	push	{r4, lr}
 800da6c:	4604      	mov	r4, r0
 800da6e:	bb33      	cbnz	r3, 800dabe <__sinit+0x56>
 800da70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800da74:	6503      	str	r3, [r0, #80]	; 0x50
 800da76:	4b12      	ldr	r3, [pc, #72]	; (800dac0 <__sinit+0x58>)
 800da78:	4a12      	ldr	r2, [pc, #72]	; (800dac4 <__sinit+0x5c>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	6282      	str	r2, [r0, #40]	; 0x28
 800da7e:	4298      	cmp	r0, r3
 800da80:	bf04      	itt	eq
 800da82:	2301      	moveq	r3, #1
 800da84:	6183      	streq	r3, [r0, #24]
 800da86:	f000 f81f 	bl	800dac8 <__sfp>
 800da8a:	6060      	str	r0, [r4, #4]
 800da8c:	4620      	mov	r0, r4
 800da8e:	f000 f81b 	bl	800dac8 <__sfp>
 800da92:	60a0      	str	r0, [r4, #8]
 800da94:	4620      	mov	r0, r4
 800da96:	f000 f817 	bl	800dac8 <__sfp>
 800da9a:	2200      	movs	r2, #0
 800da9c:	60e0      	str	r0, [r4, #12]
 800da9e:	2104      	movs	r1, #4
 800daa0:	6860      	ldr	r0, [r4, #4]
 800daa2:	f7ff ffa1 	bl	800d9e8 <std>
 800daa6:	2201      	movs	r2, #1
 800daa8:	2109      	movs	r1, #9
 800daaa:	68a0      	ldr	r0, [r4, #8]
 800daac:	f7ff ff9c 	bl	800d9e8 <std>
 800dab0:	2202      	movs	r2, #2
 800dab2:	2112      	movs	r1, #18
 800dab4:	68e0      	ldr	r0, [r4, #12]
 800dab6:	f7ff ff97 	bl	800d9e8 <std>
 800daba:	2301      	movs	r3, #1
 800dabc:	61a3      	str	r3, [r4, #24]
 800dabe:	bd10      	pop	{r4, pc}
 800dac0:	080dd308 	.word	0x080dd308
 800dac4:	0800da31 	.word	0x0800da31

0800dac8 <__sfp>:
 800dac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daca:	4b1b      	ldr	r3, [pc, #108]	; (800db38 <__sfp+0x70>)
 800dacc:	681e      	ldr	r6, [r3, #0]
 800dace:	69b3      	ldr	r3, [r6, #24]
 800dad0:	4607      	mov	r7, r0
 800dad2:	b913      	cbnz	r3, 800dada <__sfp+0x12>
 800dad4:	4630      	mov	r0, r6
 800dad6:	f7ff ffc7 	bl	800da68 <__sinit>
 800dada:	3648      	adds	r6, #72	; 0x48
 800dadc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dae0:	3b01      	subs	r3, #1
 800dae2:	d503      	bpl.n	800daec <__sfp+0x24>
 800dae4:	6833      	ldr	r3, [r6, #0]
 800dae6:	b133      	cbz	r3, 800daf6 <__sfp+0x2e>
 800dae8:	6836      	ldr	r6, [r6, #0]
 800daea:	e7f7      	b.n	800dadc <__sfp+0x14>
 800daec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800daf0:	b16d      	cbz	r5, 800db0e <__sfp+0x46>
 800daf2:	3468      	adds	r4, #104	; 0x68
 800daf4:	e7f4      	b.n	800dae0 <__sfp+0x18>
 800daf6:	2104      	movs	r1, #4
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff ff9f 	bl	800da3c <__sfmoreglue>
 800dafe:	6030      	str	r0, [r6, #0]
 800db00:	2800      	cmp	r0, #0
 800db02:	d1f1      	bne.n	800dae8 <__sfp+0x20>
 800db04:	230c      	movs	r3, #12
 800db06:	603b      	str	r3, [r7, #0]
 800db08:	4604      	mov	r4, r0
 800db0a:	4620      	mov	r0, r4
 800db0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db0e:	4b0b      	ldr	r3, [pc, #44]	; (800db3c <__sfp+0x74>)
 800db10:	6665      	str	r5, [r4, #100]	; 0x64
 800db12:	e9c4 5500 	strd	r5, r5, [r4]
 800db16:	60a5      	str	r5, [r4, #8]
 800db18:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800db1c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800db20:	2208      	movs	r2, #8
 800db22:	4629      	mov	r1, r5
 800db24:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800db28:	f7fe f874 	bl	800bc14 <memset>
 800db2c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800db30:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800db34:	e7e9      	b.n	800db0a <__sfp+0x42>
 800db36:	bf00      	nop
 800db38:	080dd308 	.word	0x080dd308
 800db3c:	ffff0001 	.word	0xffff0001

0800db40 <_fwalk_reent>:
 800db40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db44:	4680      	mov	r8, r0
 800db46:	4689      	mov	r9, r1
 800db48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800db4c:	2600      	movs	r6, #0
 800db4e:	b914      	cbnz	r4, 800db56 <_fwalk_reent+0x16>
 800db50:	4630      	mov	r0, r6
 800db52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db56:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800db5a:	3f01      	subs	r7, #1
 800db5c:	d501      	bpl.n	800db62 <_fwalk_reent+0x22>
 800db5e:	6824      	ldr	r4, [r4, #0]
 800db60:	e7f5      	b.n	800db4e <_fwalk_reent+0xe>
 800db62:	89ab      	ldrh	r3, [r5, #12]
 800db64:	2b01      	cmp	r3, #1
 800db66:	d907      	bls.n	800db78 <_fwalk_reent+0x38>
 800db68:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800db6c:	3301      	adds	r3, #1
 800db6e:	d003      	beq.n	800db78 <_fwalk_reent+0x38>
 800db70:	4629      	mov	r1, r5
 800db72:	4640      	mov	r0, r8
 800db74:	47c8      	blx	r9
 800db76:	4306      	orrs	r6, r0
 800db78:	3568      	adds	r5, #104	; 0x68
 800db7a:	e7ee      	b.n	800db5a <_fwalk_reent+0x1a>

0800db7c <_localeconv_r>:
 800db7c:	4b04      	ldr	r3, [pc, #16]	; (800db90 <_localeconv_r+0x14>)
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	6a18      	ldr	r0, [r3, #32]
 800db82:	4b04      	ldr	r3, [pc, #16]	; (800db94 <_localeconv_r+0x18>)
 800db84:	2800      	cmp	r0, #0
 800db86:	bf08      	it	eq
 800db88:	4618      	moveq	r0, r3
 800db8a:	30f0      	adds	r0, #240	; 0xf0
 800db8c:	4770      	bx	lr
 800db8e:	bf00      	nop
 800db90:	2000003c 	.word	0x2000003c
 800db94:	200000a0 	.word	0x200000a0

0800db98 <__swhatbuf_r>:
 800db98:	b570      	push	{r4, r5, r6, lr}
 800db9a:	460e      	mov	r6, r1
 800db9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dba0:	2900      	cmp	r1, #0
 800dba2:	b096      	sub	sp, #88	; 0x58
 800dba4:	4614      	mov	r4, r2
 800dba6:	461d      	mov	r5, r3
 800dba8:	da07      	bge.n	800dbba <__swhatbuf_r+0x22>
 800dbaa:	2300      	movs	r3, #0
 800dbac:	602b      	str	r3, [r5, #0]
 800dbae:	89b3      	ldrh	r3, [r6, #12]
 800dbb0:	061a      	lsls	r2, r3, #24
 800dbb2:	d410      	bmi.n	800dbd6 <__swhatbuf_r+0x3e>
 800dbb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dbb8:	e00e      	b.n	800dbd8 <__swhatbuf_r+0x40>
 800dbba:	466a      	mov	r2, sp
 800dbbc:	f000 fd1a 	bl	800e5f4 <_fstat_r>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	dbf2      	blt.n	800dbaa <__swhatbuf_r+0x12>
 800dbc4:	9a01      	ldr	r2, [sp, #4]
 800dbc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800dbca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800dbce:	425a      	negs	r2, r3
 800dbd0:	415a      	adcs	r2, r3
 800dbd2:	602a      	str	r2, [r5, #0]
 800dbd4:	e7ee      	b.n	800dbb4 <__swhatbuf_r+0x1c>
 800dbd6:	2340      	movs	r3, #64	; 0x40
 800dbd8:	2000      	movs	r0, #0
 800dbda:	6023      	str	r3, [r4, #0]
 800dbdc:	b016      	add	sp, #88	; 0x58
 800dbde:	bd70      	pop	{r4, r5, r6, pc}

0800dbe0 <__smakebuf_r>:
 800dbe0:	898b      	ldrh	r3, [r1, #12]
 800dbe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dbe4:	079d      	lsls	r5, r3, #30
 800dbe6:	4606      	mov	r6, r0
 800dbe8:	460c      	mov	r4, r1
 800dbea:	d507      	bpl.n	800dbfc <__smakebuf_r+0x1c>
 800dbec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dbf0:	6023      	str	r3, [r4, #0]
 800dbf2:	6123      	str	r3, [r4, #16]
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	6163      	str	r3, [r4, #20]
 800dbf8:	b002      	add	sp, #8
 800dbfa:	bd70      	pop	{r4, r5, r6, pc}
 800dbfc:	ab01      	add	r3, sp, #4
 800dbfe:	466a      	mov	r2, sp
 800dc00:	f7ff ffca 	bl	800db98 <__swhatbuf_r>
 800dc04:	9900      	ldr	r1, [sp, #0]
 800dc06:	4605      	mov	r5, r0
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7fe f859 	bl	800bcc0 <_malloc_r>
 800dc0e:	b948      	cbnz	r0, 800dc24 <__smakebuf_r+0x44>
 800dc10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc14:	059a      	lsls	r2, r3, #22
 800dc16:	d4ef      	bmi.n	800dbf8 <__smakebuf_r+0x18>
 800dc18:	f023 0303 	bic.w	r3, r3, #3
 800dc1c:	f043 0302 	orr.w	r3, r3, #2
 800dc20:	81a3      	strh	r3, [r4, #12]
 800dc22:	e7e3      	b.n	800dbec <__smakebuf_r+0xc>
 800dc24:	4b0d      	ldr	r3, [pc, #52]	; (800dc5c <__smakebuf_r+0x7c>)
 800dc26:	62b3      	str	r3, [r6, #40]	; 0x28
 800dc28:	89a3      	ldrh	r3, [r4, #12]
 800dc2a:	6020      	str	r0, [r4, #0]
 800dc2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc30:	81a3      	strh	r3, [r4, #12]
 800dc32:	9b00      	ldr	r3, [sp, #0]
 800dc34:	6163      	str	r3, [r4, #20]
 800dc36:	9b01      	ldr	r3, [sp, #4]
 800dc38:	6120      	str	r0, [r4, #16]
 800dc3a:	b15b      	cbz	r3, 800dc54 <__smakebuf_r+0x74>
 800dc3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc40:	4630      	mov	r0, r6
 800dc42:	f000 fce9 	bl	800e618 <_isatty_r>
 800dc46:	b128      	cbz	r0, 800dc54 <__smakebuf_r+0x74>
 800dc48:	89a3      	ldrh	r3, [r4, #12]
 800dc4a:	f023 0303 	bic.w	r3, r3, #3
 800dc4e:	f043 0301 	orr.w	r3, r3, #1
 800dc52:	81a3      	strh	r3, [r4, #12]
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	431d      	orrs	r5, r3
 800dc58:	81a5      	strh	r5, [r4, #12]
 800dc5a:	e7cd      	b.n	800dbf8 <__smakebuf_r+0x18>
 800dc5c:	0800da31 	.word	0x0800da31

0800dc60 <__malloc_lock>:
 800dc60:	4770      	bx	lr

0800dc62 <__malloc_unlock>:
 800dc62:	4770      	bx	lr

0800dc64 <_Balloc>:
 800dc64:	b570      	push	{r4, r5, r6, lr}
 800dc66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800dc68:	4604      	mov	r4, r0
 800dc6a:	460e      	mov	r6, r1
 800dc6c:	b93d      	cbnz	r5, 800dc7e <_Balloc+0x1a>
 800dc6e:	2010      	movs	r0, #16
 800dc70:	f7fd ff9c 	bl	800bbac <malloc>
 800dc74:	6260      	str	r0, [r4, #36]	; 0x24
 800dc76:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dc7a:	6005      	str	r5, [r0, #0]
 800dc7c:	60c5      	str	r5, [r0, #12]
 800dc7e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dc80:	68eb      	ldr	r3, [r5, #12]
 800dc82:	b183      	cbz	r3, 800dca6 <_Balloc+0x42>
 800dc84:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dc86:	68db      	ldr	r3, [r3, #12]
 800dc88:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dc8c:	b9b8      	cbnz	r0, 800dcbe <_Balloc+0x5a>
 800dc8e:	2101      	movs	r1, #1
 800dc90:	fa01 f506 	lsl.w	r5, r1, r6
 800dc94:	1d6a      	adds	r2, r5, #5
 800dc96:	0092      	lsls	r2, r2, #2
 800dc98:	4620      	mov	r0, r4
 800dc9a:	f000 fabf 	bl	800e21c <_calloc_r>
 800dc9e:	b160      	cbz	r0, 800dcba <_Balloc+0x56>
 800dca0:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800dca4:	e00e      	b.n	800dcc4 <_Balloc+0x60>
 800dca6:	2221      	movs	r2, #33	; 0x21
 800dca8:	2104      	movs	r1, #4
 800dcaa:	4620      	mov	r0, r4
 800dcac:	f000 fab6 	bl	800e21c <_calloc_r>
 800dcb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcb2:	60e8      	str	r0, [r5, #12]
 800dcb4:	68db      	ldr	r3, [r3, #12]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d1e4      	bne.n	800dc84 <_Balloc+0x20>
 800dcba:	2000      	movs	r0, #0
 800dcbc:	bd70      	pop	{r4, r5, r6, pc}
 800dcbe:	6802      	ldr	r2, [r0, #0]
 800dcc0:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dcca:	e7f7      	b.n	800dcbc <_Balloc+0x58>

0800dccc <_Bfree>:
 800dccc:	b570      	push	{r4, r5, r6, lr}
 800dcce:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	460d      	mov	r5, r1
 800dcd4:	b93c      	cbnz	r4, 800dce6 <_Bfree+0x1a>
 800dcd6:	2010      	movs	r0, #16
 800dcd8:	f7fd ff68 	bl	800bbac <malloc>
 800dcdc:	6270      	str	r0, [r6, #36]	; 0x24
 800dcde:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dce2:	6004      	str	r4, [r0, #0]
 800dce4:	60c4      	str	r4, [r0, #12]
 800dce6:	b13d      	cbz	r5, 800dcf8 <_Bfree+0x2c>
 800dce8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800dcea:	686a      	ldr	r2, [r5, #4]
 800dcec:	68db      	ldr	r3, [r3, #12]
 800dcee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dcf2:	6029      	str	r1, [r5, #0]
 800dcf4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800dcf8:	bd70      	pop	{r4, r5, r6, pc}

0800dcfa <__multadd>:
 800dcfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcfe:	690d      	ldr	r5, [r1, #16]
 800dd00:	461f      	mov	r7, r3
 800dd02:	4606      	mov	r6, r0
 800dd04:	460c      	mov	r4, r1
 800dd06:	f101 0c14 	add.w	ip, r1, #20
 800dd0a:	2300      	movs	r3, #0
 800dd0c:	f8dc 0000 	ldr.w	r0, [ip]
 800dd10:	b281      	uxth	r1, r0
 800dd12:	fb02 7101 	mla	r1, r2, r1, r7
 800dd16:	0c0f      	lsrs	r7, r1, #16
 800dd18:	0c00      	lsrs	r0, r0, #16
 800dd1a:	fb02 7000 	mla	r0, r2, r0, r7
 800dd1e:	b289      	uxth	r1, r1
 800dd20:	3301      	adds	r3, #1
 800dd22:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800dd26:	429d      	cmp	r5, r3
 800dd28:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800dd2c:	f84c 1b04 	str.w	r1, [ip], #4
 800dd30:	dcec      	bgt.n	800dd0c <__multadd+0x12>
 800dd32:	b1d7      	cbz	r7, 800dd6a <__multadd+0x70>
 800dd34:	68a3      	ldr	r3, [r4, #8]
 800dd36:	42ab      	cmp	r3, r5
 800dd38:	dc12      	bgt.n	800dd60 <__multadd+0x66>
 800dd3a:	6861      	ldr	r1, [r4, #4]
 800dd3c:	4630      	mov	r0, r6
 800dd3e:	3101      	adds	r1, #1
 800dd40:	f7ff ff90 	bl	800dc64 <_Balloc>
 800dd44:	6922      	ldr	r2, [r4, #16]
 800dd46:	3202      	adds	r2, #2
 800dd48:	f104 010c 	add.w	r1, r4, #12
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	0092      	lsls	r2, r2, #2
 800dd50:	300c      	adds	r0, #12
 800dd52:	f7fd ff3b 	bl	800bbcc <memcpy>
 800dd56:	4621      	mov	r1, r4
 800dd58:	4630      	mov	r0, r6
 800dd5a:	f7ff ffb7 	bl	800dccc <_Bfree>
 800dd5e:	4644      	mov	r4, r8
 800dd60:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dd64:	3501      	adds	r5, #1
 800dd66:	615f      	str	r7, [r3, #20]
 800dd68:	6125      	str	r5, [r4, #16]
 800dd6a:	4620      	mov	r0, r4
 800dd6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dd70 <__hi0bits>:
 800dd70:	0c02      	lsrs	r2, r0, #16
 800dd72:	0412      	lsls	r2, r2, #16
 800dd74:	4603      	mov	r3, r0
 800dd76:	b9b2      	cbnz	r2, 800dda6 <__hi0bits+0x36>
 800dd78:	0403      	lsls	r3, r0, #16
 800dd7a:	2010      	movs	r0, #16
 800dd7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dd80:	bf04      	itt	eq
 800dd82:	021b      	lsleq	r3, r3, #8
 800dd84:	3008      	addeq	r0, #8
 800dd86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dd8a:	bf04      	itt	eq
 800dd8c:	011b      	lsleq	r3, r3, #4
 800dd8e:	3004      	addeq	r0, #4
 800dd90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dd94:	bf04      	itt	eq
 800dd96:	009b      	lsleq	r3, r3, #2
 800dd98:	3002      	addeq	r0, #2
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	db06      	blt.n	800ddac <__hi0bits+0x3c>
 800dd9e:	005b      	lsls	r3, r3, #1
 800dda0:	d503      	bpl.n	800ddaa <__hi0bits+0x3a>
 800dda2:	3001      	adds	r0, #1
 800dda4:	4770      	bx	lr
 800dda6:	2000      	movs	r0, #0
 800dda8:	e7e8      	b.n	800dd7c <__hi0bits+0xc>
 800ddaa:	2020      	movs	r0, #32
 800ddac:	4770      	bx	lr

0800ddae <__lo0bits>:
 800ddae:	6803      	ldr	r3, [r0, #0]
 800ddb0:	f013 0207 	ands.w	r2, r3, #7
 800ddb4:	4601      	mov	r1, r0
 800ddb6:	d00b      	beq.n	800ddd0 <__lo0bits+0x22>
 800ddb8:	07da      	lsls	r2, r3, #31
 800ddba:	d423      	bmi.n	800de04 <__lo0bits+0x56>
 800ddbc:	0798      	lsls	r0, r3, #30
 800ddbe:	bf49      	itett	mi
 800ddc0:	085b      	lsrmi	r3, r3, #1
 800ddc2:	089b      	lsrpl	r3, r3, #2
 800ddc4:	2001      	movmi	r0, #1
 800ddc6:	600b      	strmi	r3, [r1, #0]
 800ddc8:	bf5c      	itt	pl
 800ddca:	600b      	strpl	r3, [r1, #0]
 800ddcc:	2002      	movpl	r0, #2
 800ddce:	4770      	bx	lr
 800ddd0:	b298      	uxth	r0, r3
 800ddd2:	b9a8      	cbnz	r0, 800de00 <__lo0bits+0x52>
 800ddd4:	0c1b      	lsrs	r3, r3, #16
 800ddd6:	2010      	movs	r0, #16
 800ddd8:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dddc:	bf04      	itt	eq
 800ddde:	0a1b      	lsreq	r3, r3, #8
 800dde0:	3008      	addeq	r0, #8
 800dde2:	071a      	lsls	r2, r3, #28
 800dde4:	bf04      	itt	eq
 800dde6:	091b      	lsreq	r3, r3, #4
 800dde8:	3004      	addeq	r0, #4
 800ddea:	079a      	lsls	r2, r3, #30
 800ddec:	bf04      	itt	eq
 800ddee:	089b      	lsreq	r3, r3, #2
 800ddf0:	3002      	addeq	r0, #2
 800ddf2:	07da      	lsls	r2, r3, #31
 800ddf4:	d402      	bmi.n	800ddfc <__lo0bits+0x4e>
 800ddf6:	085b      	lsrs	r3, r3, #1
 800ddf8:	d006      	beq.n	800de08 <__lo0bits+0x5a>
 800ddfa:	3001      	adds	r0, #1
 800ddfc:	600b      	str	r3, [r1, #0]
 800ddfe:	4770      	bx	lr
 800de00:	4610      	mov	r0, r2
 800de02:	e7e9      	b.n	800ddd8 <__lo0bits+0x2a>
 800de04:	2000      	movs	r0, #0
 800de06:	4770      	bx	lr
 800de08:	2020      	movs	r0, #32
 800de0a:	4770      	bx	lr

0800de0c <__i2b>:
 800de0c:	b510      	push	{r4, lr}
 800de0e:	460c      	mov	r4, r1
 800de10:	2101      	movs	r1, #1
 800de12:	f7ff ff27 	bl	800dc64 <_Balloc>
 800de16:	2201      	movs	r2, #1
 800de18:	6144      	str	r4, [r0, #20]
 800de1a:	6102      	str	r2, [r0, #16]
 800de1c:	bd10      	pop	{r4, pc}

0800de1e <__multiply>:
 800de1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de22:	4614      	mov	r4, r2
 800de24:	690a      	ldr	r2, [r1, #16]
 800de26:	6923      	ldr	r3, [r4, #16]
 800de28:	429a      	cmp	r2, r3
 800de2a:	bfb8      	it	lt
 800de2c:	460b      	movlt	r3, r1
 800de2e:	4688      	mov	r8, r1
 800de30:	bfbc      	itt	lt
 800de32:	46a0      	movlt	r8, r4
 800de34:	461c      	movlt	r4, r3
 800de36:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800de3a:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800de3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800de42:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800de46:	eb07 0609 	add.w	r6, r7, r9
 800de4a:	42b3      	cmp	r3, r6
 800de4c:	bfb8      	it	lt
 800de4e:	3101      	addlt	r1, #1
 800de50:	f7ff ff08 	bl	800dc64 <_Balloc>
 800de54:	f100 0514 	add.w	r5, r0, #20
 800de58:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800de5c:	462b      	mov	r3, r5
 800de5e:	2200      	movs	r2, #0
 800de60:	4573      	cmp	r3, lr
 800de62:	d316      	bcc.n	800de92 <__multiply+0x74>
 800de64:	f104 0214 	add.w	r2, r4, #20
 800de68:	f108 0114 	add.w	r1, r8, #20
 800de6c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800de70:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800de74:	9300      	str	r3, [sp, #0]
 800de76:	9b00      	ldr	r3, [sp, #0]
 800de78:	9201      	str	r2, [sp, #4]
 800de7a:	4293      	cmp	r3, r2
 800de7c:	d80c      	bhi.n	800de98 <__multiply+0x7a>
 800de7e:	2e00      	cmp	r6, #0
 800de80:	dd03      	ble.n	800de8a <__multiply+0x6c>
 800de82:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800de86:	2b00      	cmp	r3, #0
 800de88:	d05d      	beq.n	800df46 <__multiply+0x128>
 800de8a:	6106      	str	r6, [r0, #16]
 800de8c:	b003      	add	sp, #12
 800de8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de92:	f843 2b04 	str.w	r2, [r3], #4
 800de96:	e7e3      	b.n	800de60 <__multiply+0x42>
 800de98:	f8b2 b000 	ldrh.w	fp, [r2]
 800de9c:	f1bb 0f00 	cmp.w	fp, #0
 800dea0:	d023      	beq.n	800deea <__multiply+0xcc>
 800dea2:	4689      	mov	r9, r1
 800dea4:	46ac      	mov	ip, r5
 800dea6:	f04f 0800 	mov.w	r8, #0
 800deaa:	f859 4b04 	ldr.w	r4, [r9], #4
 800deae:	f8dc a000 	ldr.w	sl, [ip]
 800deb2:	b2a3      	uxth	r3, r4
 800deb4:	fa1f fa8a 	uxth.w	sl, sl
 800deb8:	fb0b a303 	mla	r3, fp, r3, sl
 800debc:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dec0:	f8dc 4000 	ldr.w	r4, [ip]
 800dec4:	4443      	add	r3, r8
 800dec6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800deca:	fb0b 840a 	mla	r4, fp, sl, r8
 800dece:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800ded2:	46e2      	mov	sl, ip
 800ded4:	b29b      	uxth	r3, r3
 800ded6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800deda:	454f      	cmp	r7, r9
 800dedc:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dee0:	f84a 3b04 	str.w	r3, [sl], #4
 800dee4:	d82b      	bhi.n	800df3e <__multiply+0x120>
 800dee6:	f8cc 8004 	str.w	r8, [ip, #4]
 800deea:	9b01      	ldr	r3, [sp, #4]
 800deec:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800def0:	3204      	adds	r2, #4
 800def2:	f1ba 0f00 	cmp.w	sl, #0
 800def6:	d020      	beq.n	800df3a <__multiply+0x11c>
 800def8:	682b      	ldr	r3, [r5, #0]
 800defa:	4689      	mov	r9, r1
 800defc:	46a8      	mov	r8, r5
 800defe:	f04f 0b00 	mov.w	fp, #0
 800df02:	f8b9 c000 	ldrh.w	ip, [r9]
 800df06:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800df0a:	fb0a 440c 	mla	r4, sl, ip, r4
 800df0e:	445c      	add	r4, fp
 800df10:	46c4      	mov	ip, r8
 800df12:	b29b      	uxth	r3, r3
 800df14:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800df18:	f84c 3b04 	str.w	r3, [ip], #4
 800df1c:	f859 3b04 	ldr.w	r3, [r9], #4
 800df20:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800df24:	0c1b      	lsrs	r3, r3, #16
 800df26:	fb0a b303 	mla	r3, sl, r3, fp
 800df2a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800df2e:	454f      	cmp	r7, r9
 800df30:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800df34:	d805      	bhi.n	800df42 <__multiply+0x124>
 800df36:	f8c8 3004 	str.w	r3, [r8, #4]
 800df3a:	3504      	adds	r5, #4
 800df3c:	e79b      	b.n	800de76 <__multiply+0x58>
 800df3e:	46d4      	mov	ip, sl
 800df40:	e7b3      	b.n	800deaa <__multiply+0x8c>
 800df42:	46e0      	mov	r8, ip
 800df44:	e7dd      	b.n	800df02 <__multiply+0xe4>
 800df46:	3e01      	subs	r6, #1
 800df48:	e799      	b.n	800de7e <__multiply+0x60>
	...

0800df4c <__pow5mult>:
 800df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df50:	4615      	mov	r5, r2
 800df52:	f012 0203 	ands.w	r2, r2, #3
 800df56:	4606      	mov	r6, r0
 800df58:	460f      	mov	r7, r1
 800df5a:	d007      	beq.n	800df6c <__pow5mult+0x20>
 800df5c:	3a01      	subs	r2, #1
 800df5e:	4c21      	ldr	r4, [pc, #132]	; (800dfe4 <__pow5mult+0x98>)
 800df60:	2300      	movs	r3, #0
 800df62:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800df66:	f7ff fec8 	bl	800dcfa <__multadd>
 800df6a:	4607      	mov	r7, r0
 800df6c:	10ad      	asrs	r5, r5, #2
 800df6e:	d035      	beq.n	800dfdc <__pow5mult+0x90>
 800df70:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800df72:	b93c      	cbnz	r4, 800df84 <__pow5mult+0x38>
 800df74:	2010      	movs	r0, #16
 800df76:	f7fd fe19 	bl	800bbac <malloc>
 800df7a:	6270      	str	r0, [r6, #36]	; 0x24
 800df7c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800df80:	6004      	str	r4, [r0, #0]
 800df82:	60c4      	str	r4, [r0, #12]
 800df84:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800df88:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800df8c:	b94c      	cbnz	r4, 800dfa2 <__pow5mult+0x56>
 800df8e:	f240 2171 	movw	r1, #625	; 0x271
 800df92:	4630      	mov	r0, r6
 800df94:	f7ff ff3a 	bl	800de0c <__i2b>
 800df98:	2300      	movs	r3, #0
 800df9a:	f8c8 0008 	str.w	r0, [r8, #8]
 800df9e:	4604      	mov	r4, r0
 800dfa0:	6003      	str	r3, [r0, #0]
 800dfa2:	f04f 0800 	mov.w	r8, #0
 800dfa6:	07eb      	lsls	r3, r5, #31
 800dfa8:	d50a      	bpl.n	800dfc0 <__pow5mult+0x74>
 800dfaa:	4639      	mov	r1, r7
 800dfac:	4622      	mov	r2, r4
 800dfae:	4630      	mov	r0, r6
 800dfb0:	f7ff ff35 	bl	800de1e <__multiply>
 800dfb4:	4639      	mov	r1, r7
 800dfb6:	4681      	mov	r9, r0
 800dfb8:	4630      	mov	r0, r6
 800dfba:	f7ff fe87 	bl	800dccc <_Bfree>
 800dfbe:	464f      	mov	r7, r9
 800dfc0:	106d      	asrs	r5, r5, #1
 800dfc2:	d00b      	beq.n	800dfdc <__pow5mult+0x90>
 800dfc4:	6820      	ldr	r0, [r4, #0]
 800dfc6:	b938      	cbnz	r0, 800dfd8 <__pow5mult+0x8c>
 800dfc8:	4622      	mov	r2, r4
 800dfca:	4621      	mov	r1, r4
 800dfcc:	4630      	mov	r0, r6
 800dfce:	f7ff ff26 	bl	800de1e <__multiply>
 800dfd2:	6020      	str	r0, [r4, #0]
 800dfd4:	f8c0 8000 	str.w	r8, [r0]
 800dfd8:	4604      	mov	r4, r0
 800dfda:	e7e4      	b.n	800dfa6 <__pow5mult+0x5a>
 800dfdc:	4638      	mov	r0, r7
 800dfde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dfe2:	bf00      	nop
 800dfe4:	080dd4b0 	.word	0x080dd4b0

0800dfe8 <__lshift>:
 800dfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfec:	460c      	mov	r4, r1
 800dfee:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dff2:	6923      	ldr	r3, [r4, #16]
 800dff4:	6849      	ldr	r1, [r1, #4]
 800dff6:	eb0a 0903 	add.w	r9, sl, r3
 800dffa:	68a3      	ldr	r3, [r4, #8]
 800dffc:	4607      	mov	r7, r0
 800dffe:	4616      	mov	r6, r2
 800e000:	f109 0501 	add.w	r5, r9, #1
 800e004:	42ab      	cmp	r3, r5
 800e006:	db32      	blt.n	800e06e <__lshift+0x86>
 800e008:	4638      	mov	r0, r7
 800e00a:	f7ff fe2b 	bl	800dc64 <_Balloc>
 800e00e:	2300      	movs	r3, #0
 800e010:	4680      	mov	r8, r0
 800e012:	f100 0114 	add.w	r1, r0, #20
 800e016:	461a      	mov	r2, r3
 800e018:	4553      	cmp	r3, sl
 800e01a:	db2b      	blt.n	800e074 <__lshift+0x8c>
 800e01c:	6920      	ldr	r0, [r4, #16]
 800e01e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e022:	f104 0314 	add.w	r3, r4, #20
 800e026:	f016 021f 	ands.w	r2, r6, #31
 800e02a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e02e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e032:	d025      	beq.n	800e080 <__lshift+0x98>
 800e034:	f1c2 0e20 	rsb	lr, r2, #32
 800e038:	2000      	movs	r0, #0
 800e03a:	681e      	ldr	r6, [r3, #0]
 800e03c:	468a      	mov	sl, r1
 800e03e:	4096      	lsls	r6, r2
 800e040:	4330      	orrs	r0, r6
 800e042:	f84a 0b04 	str.w	r0, [sl], #4
 800e046:	f853 0b04 	ldr.w	r0, [r3], #4
 800e04a:	459c      	cmp	ip, r3
 800e04c:	fa20 f00e 	lsr.w	r0, r0, lr
 800e050:	d814      	bhi.n	800e07c <__lshift+0x94>
 800e052:	6048      	str	r0, [r1, #4]
 800e054:	b108      	cbz	r0, 800e05a <__lshift+0x72>
 800e056:	f109 0502 	add.w	r5, r9, #2
 800e05a:	3d01      	subs	r5, #1
 800e05c:	4638      	mov	r0, r7
 800e05e:	f8c8 5010 	str.w	r5, [r8, #16]
 800e062:	4621      	mov	r1, r4
 800e064:	f7ff fe32 	bl	800dccc <_Bfree>
 800e068:	4640      	mov	r0, r8
 800e06a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e06e:	3101      	adds	r1, #1
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	e7c7      	b.n	800e004 <__lshift+0x1c>
 800e074:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e078:	3301      	adds	r3, #1
 800e07a:	e7cd      	b.n	800e018 <__lshift+0x30>
 800e07c:	4651      	mov	r1, sl
 800e07e:	e7dc      	b.n	800e03a <__lshift+0x52>
 800e080:	3904      	subs	r1, #4
 800e082:	f853 2b04 	ldr.w	r2, [r3], #4
 800e086:	f841 2f04 	str.w	r2, [r1, #4]!
 800e08a:	459c      	cmp	ip, r3
 800e08c:	d8f9      	bhi.n	800e082 <__lshift+0x9a>
 800e08e:	e7e4      	b.n	800e05a <__lshift+0x72>

0800e090 <__mcmp>:
 800e090:	6903      	ldr	r3, [r0, #16]
 800e092:	690a      	ldr	r2, [r1, #16]
 800e094:	1a9b      	subs	r3, r3, r2
 800e096:	b530      	push	{r4, r5, lr}
 800e098:	d10c      	bne.n	800e0b4 <__mcmp+0x24>
 800e09a:	0092      	lsls	r2, r2, #2
 800e09c:	3014      	adds	r0, #20
 800e09e:	3114      	adds	r1, #20
 800e0a0:	1884      	adds	r4, r0, r2
 800e0a2:	4411      	add	r1, r2
 800e0a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e0a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e0ac:	4295      	cmp	r5, r2
 800e0ae:	d003      	beq.n	800e0b8 <__mcmp+0x28>
 800e0b0:	d305      	bcc.n	800e0be <__mcmp+0x2e>
 800e0b2:	2301      	movs	r3, #1
 800e0b4:	4618      	mov	r0, r3
 800e0b6:	bd30      	pop	{r4, r5, pc}
 800e0b8:	42a0      	cmp	r0, r4
 800e0ba:	d3f3      	bcc.n	800e0a4 <__mcmp+0x14>
 800e0bc:	e7fa      	b.n	800e0b4 <__mcmp+0x24>
 800e0be:	f04f 33ff 	mov.w	r3, #4294967295
 800e0c2:	e7f7      	b.n	800e0b4 <__mcmp+0x24>

0800e0c4 <__mdiff>:
 800e0c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0c8:	460d      	mov	r5, r1
 800e0ca:	4607      	mov	r7, r0
 800e0cc:	4611      	mov	r1, r2
 800e0ce:	4628      	mov	r0, r5
 800e0d0:	4614      	mov	r4, r2
 800e0d2:	f7ff ffdd 	bl	800e090 <__mcmp>
 800e0d6:	1e06      	subs	r6, r0, #0
 800e0d8:	d108      	bne.n	800e0ec <__mdiff+0x28>
 800e0da:	4631      	mov	r1, r6
 800e0dc:	4638      	mov	r0, r7
 800e0de:	f7ff fdc1 	bl	800dc64 <_Balloc>
 800e0e2:	2301      	movs	r3, #1
 800e0e4:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0ec:	bfa4      	itt	ge
 800e0ee:	4623      	movge	r3, r4
 800e0f0:	462c      	movge	r4, r5
 800e0f2:	4638      	mov	r0, r7
 800e0f4:	6861      	ldr	r1, [r4, #4]
 800e0f6:	bfa6      	itte	ge
 800e0f8:	461d      	movge	r5, r3
 800e0fa:	2600      	movge	r6, #0
 800e0fc:	2601      	movlt	r6, #1
 800e0fe:	f7ff fdb1 	bl	800dc64 <_Balloc>
 800e102:	692b      	ldr	r3, [r5, #16]
 800e104:	60c6      	str	r6, [r0, #12]
 800e106:	6926      	ldr	r6, [r4, #16]
 800e108:	f105 0914 	add.w	r9, r5, #20
 800e10c:	f104 0214 	add.w	r2, r4, #20
 800e110:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e114:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e118:	f100 0514 	add.w	r5, r0, #20
 800e11c:	f04f 0e00 	mov.w	lr, #0
 800e120:	f852 ab04 	ldr.w	sl, [r2], #4
 800e124:	f859 4b04 	ldr.w	r4, [r9], #4
 800e128:	fa1e f18a 	uxtah	r1, lr, sl
 800e12c:	b2a3      	uxth	r3, r4
 800e12e:	1ac9      	subs	r1, r1, r3
 800e130:	0c23      	lsrs	r3, r4, #16
 800e132:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e136:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e13a:	b289      	uxth	r1, r1
 800e13c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e140:	45c8      	cmp	r8, r9
 800e142:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e146:	4694      	mov	ip, r2
 800e148:	f845 3b04 	str.w	r3, [r5], #4
 800e14c:	d8e8      	bhi.n	800e120 <__mdiff+0x5c>
 800e14e:	45bc      	cmp	ip, r7
 800e150:	d304      	bcc.n	800e15c <__mdiff+0x98>
 800e152:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e156:	b183      	cbz	r3, 800e17a <__mdiff+0xb6>
 800e158:	6106      	str	r6, [r0, #16]
 800e15a:	e7c5      	b.n	800e0e8 <__mdiff+0x24>
 800e15c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e160:	fa1e f381 	uxtah	r3, lr, r1
 800e164:	141a      	asrs	r2, r3, #16
 800e166:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e16a:	b29b      	uxth	r3, r3
 800e16c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e170:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e174:	f845 3b04 	str.w	r3, [r5], #4
 800e178:	e7e9      	b.n	800e14e <__mdiff+0x8a>
 800e17a:	3e01      	subs	r6, #1
 800e17c:	e7e9      	b.n	800e152 <__mdiff+0x8e>

0800e17e <__d2b>:
 800e17e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e182:	460e      	mov	r6, r1
 800e184:	2101      	movs	r1, #1
 800e186:	ec59 8b10 	vmov	r8, r9, d0
 800e18a:	4615      	mov	r5, r2
 800e18c:	f7ff fd6a 	bl	800dc64 <_Balloc>
 800e190:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e194:	4607      	mov	r7, r0
 800e196:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e19a:	bb34      	cbnz	r4, 800e1ea <__d2b+0x6c>
 800e19c:	9301      	str	r3, [sp, #4]
 800e19e:	f1b8 0300 	subs.w	r3, r8, #0
 800e1a2:	d027      	beq.n	800e1f4 <__d2b+0x76>
 800e1a4:	a802      	add	r0, sp, #8
 800e1a6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e1aa:	f7ff fe00 	bl	800ddae <__lo0bits>
 800e1ae:	9900      	ldr	r1, [sp, #0]
 800e1b0:	b1f0      	cbz	r0, 800e1f0 <__d2b+0x72>
 800e1b2:	9a01      	ldr	r2, [sp, #4]
 800e1b4:	f1c0 0320 	rsb	r3, r0, #32
 800e1b8:	fa02 f303 	lsl.w	r3, r2, r3
 800e1bc:	430b      	orrs	r3, r1
 800e1be:	40c2      	lsrs	r2, r0
 800e1c0:	617b      	str	r3, [r7, #20]
 800e1c2:	9201      	str	r2, [sp, #4]
 800e1c4:	9b01      	ldr	r3, [sp, #4]
 800e1c6:	61bb      	str	r3, [r7, #24]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	bf14      	ite	ne
 800e1cc:	2102      	movne	r1, #2
 800e1ce:	2101      	moveq	r1, #1
 800e1d0:	6139      	str	r1, [r7, #16]
 800e1d2:	b1c4      	cbz	r4, 800e206 <__d2b+0x88>
 800e1d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e1d8:	4404      	add	r4, r0
 800e1da:	6034      	str	r4, [r6, #0]
 800e1dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1e0:	6028      	str	r0, [r5, #0]
 800e1e2:	4638      	mov	r0, r7
 800e1e4:	b003      	add	sp, #12
 800e1e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1ee:	e7d5      	b.n	800e19c <__d2b+0x1e>
 800e1f0:	6179      	str	r1, [r7, #20]
 800e1f2:	e7e7      	b.n	800e1c4 <__d2b+0x46>
 800e1f4:	a801      	add	r0, sp, #4
 800e1f6:	f7ff fdda 	bl	800ddae <__lo0bits>
 800e1fa:	9b01      	ldr	r3, [sp, #4]
 800e1fc:	617b      	str	r3, [r7, #20]
 800e1fe:	2101      	movs	r1, #1
 800e200:	6139      	str	r1, [r7, #16]
 800e202:	3020      	adds	r0, #32
 800e204:	e7e5      	b.n	800e1d2 <__d2b+0x54>
 800e206:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e20a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e20e:	6030      	str	r0, [r6, #0]
 800e210:	6918      	ldr	r0, [r3, #16]
 800e212:	f7ff fdad 	bl	800dd70 <__hi0bits>
 800e216:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e21a:	e7e1      	b.n	800e1e0 <__d2b+0x62>

0800e21c <_calloc_r>:
 800e21c:	b538      	push	{r3, r4, r5, lr}
 800e21e:	fb02 f401 	mul.w	r4, r2, r1
 800e222:	4621      	mov	r1, r4
 800e224:	f7fd fd4c 	bl	800bcc0 <_malloc_r>
 800e228:	4605      	mov	r5, r0
 800e22a:	b118      	cbz	r0, 800e234 <_calloc_r+0x18>
 800e22c:	4622      	mov	r2, r4
 800e22e:	2100      	movs	r1, #0
 800e230:	f7fd fcf0 	bl	800bc14 <memset>
 800e234:	4628      	mov	r0, r5
 800e236:	bd38      	pop	{r3, r4, r5, pc}

0800e238 <_realloc_r>:
 800e238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e23a:	4607      	mov	r7, r0
 800e23c:	4614      	mov	r4, r2
 800e23e:	460e      	mov	r6, r1
 800e240:	b921      	cbnz	r1, 800e24c <_realloc_r+0x14>
 800e242:	4611      	mov	r1, r2
 800e244:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e248:	f7fd bd3a 	b.w	800bcc0 <_malloc_r>
 800e24c:	b922      	cbnz	r2, 800e258 <_realloc_r+0x20>
 800e24e:	f7fd fce9 	bl	800bc24 <_free_r>
 800e252:	4625      	mov	r5, r4
 800e254:	4628      	mov	r0, r5
 800e256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e258:	f000 fa12 	bl	800e680 <_malloc_usable_size_r>
 800e25c:	42a0      	cmp	r0, r4
 800e25e:	d20f      	bcs.n	800e280 <_realloc_r+0x48>
 800e260:	4621      	mov	r1, r4
 800e262:	4638      	mov	r0, r7
 800e264:	f7fd fd2c 	bl	800bcc0 <_malloc_r>
 800e268:	4605      	mov	r5, r0
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d0f2      	beq.n	800e254 <_realloc_r+0x1c>
 800e26e:	4631      	mov	r1, r6
 800e270:	4622      	mov	r2, r4
 800e272:	f7fd fcab 	bl	800bbcc <memcpy>
 800e276:	4631      	mov	r1, r6
 800e278:	4638      	mov	r0, r7
 800e27a:	f7fd fcd3 	bl	800bc24 <_free_r>
 800e27e:	e7e9      	b.n	800e254 <_realloc_r+0x1c>
 800e280:	4635      	mov	r5, r6
 800e282:	e7e7      	b.n	800e254 <_realloc_r+0x1c>

0800e284 <__ssputs_r>:
 800e284:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e288:	688e      	ldr	r6, [r1, #8]
 800e28a:	429e      	cmp	r6, r3
 800e28c:	4682      	mov	sl, r0
 800e28e:	460c      	mov	r4, r1
 800e290:	4690      	mov	r8, r2
 800e292:	4699      	mov	r9, r3
 800e294:	d837      	bhi.n	800e306 <__ssputs_r+0x82>
 800e296:	898a      	ldrh	r2, [r1, #12]
 800e298:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e29c:	d031      	beq.n	800e302 <__ssputs_r+0x7e>
 800e29e:	6825      	ldr	r5, [r4, #0]
 800e2a0:	6909      	ldr	r1, [r1, #16]
 800e2a2:	1a6f      	subs	r7, r5, r1
 800e2a4:	6965      	ldr	r5, [r4, #20]
 800e2a6:	2302      	movs	r3, #2
 800e2a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2ac:	fb95 f5f3 	sdiv	r5, r5, r3
 800e2b0:	f109 0301 	add.w	r3, r9, #1
 800e2b4:	443b      	add	r3, r7
 800e2b6:	429d      	cmp	r5, r3
 800e2b8:	bf38      	it	cc
 800e2ba:	461d      	movcc	r5, r3
 800e2bc:	0553      	lsls	r3, r2, #21
 800e2be:	d530      	bpl.n	800e322 <__ssputs_r+0x9e>
 800e2c0:	4629      	mov	r1, r5
 800e2c2:	f7fd fcfd 	bl	800bcc0 <_malloc_r>
 800e2c6:	4606      	mov	r6, r0
 800e2c8:	b950      	cbnz	r0, 800e2e0 <__ssputs_r+0x5c>
 800e2ca:	230c      	movs	r3, #12
 800e2cc:	f8ca 3000 	str.w	r3, [sl]
 800e2d0:	89a3      	ldrh	r3, [r4, #12]
 800e2d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2d6:	81a3      	strh	r3, [r4, #12]
 800e2d8:	f04f 30ff 	mov.w	r0, #4294967295
 800e2dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e0:	463a      	mov	r2, r7
 800e2e2:	6921      	ldr	r1, [r4, #16]
 800e2e4:	f7fd fc72 	bl	800bbcc <memcpy>
 800e2e8:	89a3      	ldrh	r3, [r4, #12]
 800e2ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2f2:	81a3      	strh	r3, [r4, #12]
 800e2f4:	6126      	str	r6, [r4, #16]
 800e2f6:	6165      	str	r5, [r4, #20]
 800e2f8:	443e      	add	r6, r7
 800e2fa:	1bed      	subs	r5, r5, r7
 800e2fc:	6026      	str	r6, [r4, #0]
 800e2fe:	60a5      	str	r5, [r4, #8]
 800e300:	464e      	mov	r6, r9
 800e302:	454e      	cmp	r6, r9
 800e304:	d900      	bls.n	800e308 <__ssputs_r+0x84>
 800e306:	464e      	mov	r6, r9
 800e308:	4632      	mov	r2, r6
 800e30a:	4641      	mov	r1, r8
 800e30c:	6820      	ldr	r0, [r4, #0]
 800e30e:	f7fd fc68 	bl	800bbe2 <memmove>
 800e312:	68a3      	ldr	r3, [r4, #8]
 800e314:	1b9b      	subs	r3, r3, r6
 800e316:	60a3      	str	r3, [r4, #8]
 800e318:	6823      	ldr	r3, [r4, #0]
 800e31a:	441e      	add	r6, r3
 800e31c:	6026      	str	r6, [r4, #0]
 800e31e:	2000      	movs	r0, #0
 800e320:	e7dc      	b.n	800e2dc <__ssputs_r+0x58>
 800e322:	462a      	mov	r2, r5
 800e324:	f7ff ff88 	bl	800e238 <_realloc_r>
 800e328:	4606      	mov	r6, r0
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d1e2      	bne.n	800e2f4 <__ssputs_r+0x70>
 800e32e:	6921      	ldr	r1, [r4, #16]
 800e330:	4650      	mov	r0, sl
 800e332:	f7fd fc77 	bl	800bc24 <_free_r>
 800e336:	e7c8      	b.n	800e2ca <__ssputs_r+0x46>

0800e338 <_svfiprintf_r>:
 800e338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e33c:	461d      	mov	r5, r3
 800e33e:	898b      	ldrh	r3, [r1, #12]
 800e340:	061f      	lsls	r7, r3, #24
 800e342:	b09d      	sub	sp, #116	; 0x74
 800e344:	4680      	mov	r8, r0
 800e346:	460c      	mov	r4, r1
 800e348:	4616      	mov	r6, r2
 800e34a:	d50f      	bpl.n	800e36c <_svfiprintf_r+0x34>
 800e34c:	690b      	ldr	r3, [r1, #16]
 800e34e:	b96b      	cbnz	r3, 800e36c <_svfiprintf_r+0x34>
 800e350:	2140      	movs	r1, #64	; 0x40
 800e352:	f7fd fcb5 	bl	800bcc0 <_malloc_r>
 800e356:	6020      	str	r0, [r4, #0]
 800e358:	6120      	str	r0, [r4, #16]
 800e35a:	b928      	cbnz	r0, 800e368 <_svfiprintf_r+0x30>
 800e35c:	230c      	movs	r3, #12
 800e35e:	f8c8 3000 	str.w	r3, [r8]
 800e362:	f04f 30ff 	mov.w	r0, #4294967295
 800e366:	e0c8      	b.n	800e4fa <_svfiprintf_r+0x1c2>
 800e368:	2340      	movs	r3, #64	; 0x40
 800e36a:	6163      	str	r3, [r4, #20]
 800e36c:	2300      	movs	r3, #0
 800e36e:	9309      	str	r3, [sp, #36]	; 0x24
 800e370:	2320      	movs	r3, #32
 800e372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e376:	2330      	movs	r3, #48	; 0x30
 800e378:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e37c:	9503      	str	r5, [sp, #12]
 800e37e:	f04f 0b01 	mov.w	fp, #1
 800e382:	4637      	mov	r7, r6
 800e384:	463d      	mov	r5, r7
 800e386:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e38a:	b10b      	cbz	r3, 800e390 <_svfiprintf_r+0x58>
 800e38c:	2b25      	cmp	r3, #37	; 0x25
 800e38e:	d13e      	bne.n	800e40e <_svfiprintf_r+0xd6>
 800e390:	ebb7 0a06 	subs.w	sl, r7, r6
 800e394:	d00b      	beq.n	800e3ae <_svfiprintf_r+0x76>
 800e396:	4653      	mov	r3, sl
 800e398:	4632      	mov	r2, r6
 800e39a:	4621      	mov	r1, r4
 800e39c:	4640      	mov	r0, r8
 800e39e:	f7ff ff71 	bl	800e284 <__ssputs_r>
 800e3a2:	3001      	adds	r0, #1
 800e3a4:	f000 80a4 	beq.w	800e4f0 <_svfiprintf_r+0x1b8>
 800e3a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3aa:	4453      	add	r3, sl
 800e3ac:	9309      	str	r3, [sp, #36]	; 0x24
 800e3ae:	783b      	ldrb	r3, [r7, #0]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	f000 809d 	beq.w	800e4f0 <_svfiprintf_r+0x1b8>
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	f04f 32ff 	mov.w	r2, #4294967295
 800e3bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3c0:	9304      	str	r3, [sp, #16]
 800e3c2:	9307      	str	r3, [sp, #28]
 800e3c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3c8:	931a      	str	r3, [sp, #104]	; 0x68
 800e3ca:	462f      	mov	r7, r5
 800e3cc:	2205      	movs	r2, #5
 800e3ce:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e3d2:	4850      	ldr	r0, [pc, #320]	; (800e514 <_svfiprintf_r+0x1dc>)
 800e3d4:	f7f1 ff14 	bl	8000200 <memchr>
 800e3d8:	9b04      	ldr	r3, [sp, #16]
 800e3da:	b9d0      	cbnz	r0, 800e412 <_svfiprintf_r+0xda>
 800e3dc:	06d9      	lsls	r1, r3, #27
 800e3de:	bf44      	itt	mi
 800e3e0:	2220      	movmi	r2, #32
 800e3e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3e6:	071a      	lsls	r2, r3, #28
 800e3e8:	bf44      	itt	mi
 800e3ea:	222b      	movmi	r2, #43	; 0x2b
 800e3ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3f0:	782a      	ldrb	r2, [r5, #0]
 800e3f2:	2a2a      	cmp	r2, #42	; 0x2a
 800e3f4:	d015      	beq.n	800e422 <_svfiprintf_r+0xea>
 800e3f6:	9a07      	ldr	r2, [sp, #28]
 800e3f8:	462f      	mov	r7, r5
 800e3fa:	2000      	movs	r0, #0
 800e3fc:	250a      	movs	r5, #10
 800e3fe:	4639      	mov	r1, r7
 800e400:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e404:	3b30      	subs	r3, #48	; 0x30
 800e406:	2b09      	cmp	r3, #9
 800e408:	d94d      	bls.n	800e4a6 <_svfiprintf_r+0x16e>
 800e40a:	b1b8      	cbz	r0, 800e43c <_svfiprintf_r+0x104>
 800e40c:	e00f      	b.n	800e42e <_svfiprintf_r+0xf6>
 800e40e:	462f      	mov	r7, r5
 800e410:	e7b8      	b.n	800e384 <_svfiprintf_r+0x4c>
 800e412:	4a40      	ldr	r2, [pc, #256]	; (800e514 <_svfiprintf_r+0x1dc>)
 800e414:	1a80      	subs	r0, r0, r2
 800e416:	fa0b f000 	lsl.w	r0, fp, r0
 800e41a:	4318      	orrs	r0, r3
 800e41c:	9004      	str	r0, [sp, #16]
 800e41e:	463d      	mov	r5, r7
 800e420:	e7d3      	b.n	800e3ca <_svfiprintf_r+0x92>
 800e422:	9a03      	ldr	r2, [sp, #12]
 800e424:	1d11      	adds	r1, r2, #4
 800e426:	6812      	ldr	r2, [r2, #0]
 800e428:	9103      	str	r1, [sp, #12]
 800e42a:	2a00      	cmp	r2, #0
 800e42c:	db01      	blt.n	800e432 <_svfiprintf_r+0xfa>
 800e42e:	9207      	str	r2, [sp, #28]
 800e430:	e004      	b.n	800e43c <_svfiprintf_r+0x104>
 800e432:	4252      	negs	r2, r2
 800e434:	f043 0302 	orr.w	r3, r3, #2
 800e438:	9207      	str	r2, [sp, #28]
 800e43a:	9304      	str	r3, [sp, #16]
 800e43c:	783b      	ldrb	r3, [r7, #0]
 800e43e:	2b2e      	cmp	r3, #46	; 0x2e
 800e440:	d10c      	bne.n	800e45c <_svfiprintf_r+0x124>
 800e442:	787b      	ldrb	r3, [r7, #1]
 800e444:	2b2a      	cmp	r3, #42	; 0x2a
 800e446:	d133      	bne.n	800e4b0 <_svfiprintf_r+0x178>
 800e448:	9b03      	ldr	r3, [sp, #12]
 800e44a:	1d1a      	adds	r2, r3, #4
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	9203      	str	r2, [sp, #12]
 800e450:	2b00      	cmp	r3, #0
 800e452:	bfb8      	it	lt
 800e454:	f04f 33ff 	movlt.w	r3, #4294967295
 800e458:	3702      	adds	r7, #2
 800e45a:	9305      	str	r3, [sp, #20]
 800e45c:	4d2e      	ldr	r5, [pc, #184]	; (800e518 <_svfiprintf_r+0x1e0>)
 800e45e:	7839      	ldrb	r1, [r7, #0]
 800e460:	2203      	movs	r2, #3
 800e462:	4628      	mov	r0, r5
 800e464:	f7f1 fecc 	bl	8000200 <memchr>
 800e468:	b138      	cbz	r0, 800e47a <_svfiprintf_r+0x142>
 800e46a:	2340      	movs	r3, #64	; 0x40
 800e46c:	1b40      	subs	r0, r0, r5
 800e46e:	fa03 f000 	lsl.w	r0, r3, r0
 800e472:	9b04      	ldr	r3, [sp, #16]
 800e474:	4303      	orrs	r3, r0
 800e476:	3701      	adds	r7, #1
 800e478:	9304      	str	r3, [sp, #16]
 800e47a:	7839      	ldrb	r1, [r7, #0]
 800e47c:	4827      	ldr	r0, [pc, #156]	; (800e51c <_svfiprintf_r+0x1e4>)
 800e47e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e482:	2206      	movs	r2, #6
 800e484:	1c7e      	adds	r6, r7, #1
 800e486:	f7f1 febb 	bl	8000200 <memchr>
 800e48a:	2800      	cmp	r0, #0
 800e48c:	d038      	beq.n	800e500 <_svfiprintf_r+0x1c8>
 800e48e:	4b24      	ldr	r3, [pc, #144]	; (800e520 <_svfiprintf_r+0x1e8>)
 800e490:	bb13      	cbnz	r3, 800e4d8 <_svfiprintf_r+0x1a0>
 800e492:	9b03      	ldr	r3, [sp, #12]
 800e494:	3307      	adds	r3, #7
 800e496:	f023 0307 	bic.w	r3, r3, #7
 800e49a:	3308      	adds	r3, #8
 800e49c:	9303      	str	r3, [sp, #12]
 800e49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a0:	444b      	add	r3, r9
 800e4a2:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a4:	e76d      	b.n	800e382 <_svfiprintf_r+0x4a>
 800e4a6:	fb05 3202 	mla	r2, r5, r2, r3
 800e4aa:	2001      	movs	r0, #1
 800e4ac:	460f      	mov	r7, r1
 800e4ae:	e7a6      	b.n	800e3fe <_svfiprintf_r+0xc6>
 800e4b0:	2300      	movs	r3, #0
 800e4b2:	3701      	adds	r7, #1
 800e4b4:	9305      	str	r3, [sp, #20]
 800e4b6:	4619      	mov	r1, r3
 800e4b8:	250a      	movs	r5, #10
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4c0:	3a30      	subs	r2, #48	; 0x30
 800e4c2:	2a09      	cmp	r2, #9
 800e4c4:	d903      	bls.n	800e4ce <_svfiprintf_r+0x196>
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d0c8      	beq.n	800e45c <_svfiprintf_r+0x124>
 800e4ca:	9105      	str	r1, [sp, #20]
 800e4cc:	e7c6      	b.n	800e45c <_svfiprintf_r+0x124>
 800e4ce:	fb05 2101 	mla	r1, r5, r1, r2
 800e4d2:	2301      	movs	r3, #1
 800e4d4:	4607      	mov	r7, r0
 800e4d6:	e7f0      	b.n	800e4ba <_svfiprintf_r+0x182>
 800e4d8:	ab03      	add	r3, sp, #12
 800e4da:	9300      	str	r3, [sp, #0]
 800e4dc:	4622      	mov	r2, r4
 800e4de:	4b11      	ldr	r3, [pc, #68]	; (800e524 <_svfiprintf_r+0x1ec>)
 800e4e0:	a904      	add	r1, sp, #16
 800e4e2:	4640      	mov	r0, r8
 800e4e4:	f7fd fe1a 	bl	800c11c <_printf_float>
 800e4e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4ec:	4681      	mov	r9, r0
 800e4ee:	d1d6      	bne.n	800e49e <_svfiprintf_r+0x166>
 800e4f0:	89a3      	ldrh	r3, [r4, #12]
 800e4f2:	065b      	lsls	r3, r3, #25
 800e4f4:	f53f af35 	bmi.w	800e362 <_svfiprintf_r+0x2a>
 800e4f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e4fa:	b01d      	add	sp, #116	; 0x74
 800e4fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e500:	ab03      	add	r3, sp, #12
 800e502:	9300      	str	r3, [sp, #0]
 800e504:	4622      	mov	r2, r4
 800e506:	4b07      	ldr	r3, [pc, #28]	; (800e524 <_svfiprintf_r+0x1ec>)
 800e508:	a904      	add	r1, sp, #16
 800e50a:	4640      	mov	r0, r8
 800e50c:	f7fe f8bc 	bl	800c688 <_printf_i>
 800e510:	e7ea      	b.n	800e4e8 <_svfiprintf_r+0x1b0>
 800e512:	bf00      	nop
 800e514:	080dd30c 	.word	0x080dd30c
 800e518:	080dd312 	.word	0x080dd312
 800e51c:	080dd316 	.word	0x080dd316
 800e520:	0800c11d 	.word	0x0800c11d
 800e524:	0800e285 	.word	0x0800e285

0800e528 <__sread>:
 800e528:	b510      	push	{r4, lr}
 800e52a:	460c      	mov	r4, r1
 800e52c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e530:	f000 f8ae 	bl	800e690 <_read_r>
 800e534:	2800      	cmp	r0, #0
 800e536:	bfab      	itete	ge
 800e538:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e53a:	89a3      	ldrhlt	r3, [r4, #12]
 800e53c:	181b      	addge	r3, r3, r0
 800e53e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e542:	bfac      	ite	ge
 800e544:	6563      	strge	r3, [r4, #84]	; 0x54
 800e546:	81a3      	strhlt	r3, [r4, #12]
 800e548:	bd10      	pop	{r4, pc}

0800e54a <__swrite>:
 800e54a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e54e:	461f      	mov	r7, r3
 800e550:	898b      	ldrh	r3, [r1, #12]
 800e552:	05db      	lsls	r3, r3, #23
 800e554:	4605      	mov	r5, r0
 800e556:	460c      	mov	r4, r1
 800e558:	4616      	mov	r6, r2
 800e55a:	d505      	bpl.n	800e568 <__swrite+0x1e>
 800e55c:	2302      	movs	r3, #2
 800e55e:	2200      	movs	r2, #0
 800e560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e564:	f000 f868 	bl	800e638 <_lseek_r>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e56e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e572:	81a3      	strh	r3, [r4, #12]
 800e574:	4632      	mov	r2, r6
 800e576:	463b      	mov	r3, r7
 800e578:	4628      	mov	r0, r5
 800e57a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e57e:	f000 b817 	b.w	800e5b0 <_write_r>

0800e582 <__sseek>:
 800e582:	b510      	push	{r4, lr}
 800e584:	460c      	mov	r4, r1
 800e586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e58a:	f000 f855 	bl	800e638 <_lseek_r>
 800e58e:	1c43      	adds	r3, r0, #1
 800e590:	89a3      	ldrh	r3, [r4, #12]
 800e592:	bf15      	itete	ne
 800e594:	6560      	strne	r0, [r4, #84]	; 0x54
 800e596:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e59a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e59e:	81a3      	strheq	r3, [r4, #12]
 800e5a0:	bf18      	it	ne
 800e5a2:	81a3      	strhne	r3, [r4, #12]
 800e5a4:	bd10      	pop	{r4, pc}

0800e5a6 <__sclose>:
 800e5a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5aa:	f000 b813 	b.w	800e5d4 <_close_r>
	...

0800e5b0 <_write_r>:
 800e5b0:	b538      	push	{r3, r4, r5, lr}
 800e5b2:	4c07      	ldr	r4, [pc, #28]	; (800e5d0 <_write_r+0x20>)
 800e5b4:	4605      	mov	r5, r0
 800e5b6:	4608      	mov	r0, r1
 800e5b8:	4611      	mov	r1, r2
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	6022      	str	r2, [r4, #0]
 800e5be:	461a      	mov	r2, r3
 800e5c0:	f7f4 f84b 	bl	800265a <_write>
 800e5c4:	1c43      	adds	r3, r0, #1
 800e5c6:	d102      	bne.n	800e5ce <_write_r+0x1e>
 800e5c8:	6823      	ldr	r3, [r4, #0]
 800e5ca:	b103      	cbz	r3, 800e5ce <_write_r+0x1e>
 800e5cc:	602b      	str	r3, [r5, #0]
 800e5ce:	bd38      	pop	{r3, r4, r5, pc}
 800e5d0:	20000eb0 	.word	0x20000eb0

0800e5d4 <_close_r>:
 800e5d4:	b538      	push	{r3, r4, r5, lr}
 800e5d6:	4c06      	ldr	r4, [pc, #24]	; (800e5f0 <_close_r+0x1c>)
 800e5d8:	2300      	movs	r3, #0
 800e5da:	4605      	mov	r5, r0
 800e5dc:	4608      	mov	r0, r1
 800e5de:	6023      	str	r3, [r4, #0]
 800e5e0:	f7f4 f857 	bl	8002692 <_close>
 800e5e4:	1c43      	adds	r3, r0, #1
 800e5e6:	d102      	bne.n	800e5ee <_close_r+0x1a>
 800e5e8:	6823      	ldr	r3, [r4, #0]
 800e5ea:	b103      	cbz	r3, 800e5ee <_close_r+0x1a>
 800e5ec:	602b      	str	r3, [r5, #0]
 800e5ee:	bd38      	pop	{r3, r4, r5, pc}
 800e5f0:	20000eb0 	.word	0x20000eb0

0800e5f4 <_fstat_r>:
 800e5f4:	b538      	push	{r3, r4, r5, lr}
 800e5f6:	4c07      	ldr	r4, [pc, #28]	; (800e614 <_fstat_r+0x20>)
 800e5f8:	2300      	movs	r3, #0
 800e5fa:	4605      	mov	r5, r0
 800e5fc:	4608      	mov	r0, r1
 800e5fe:	4611      	mov	r1, r2
 800e600:	6023      	str	r3, [r4, #0]
 800e602:	f7f4 f852 	bl	80026aa <_fstat>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d102      	bne.n	800e610 <_fstat_r+0x1c>
 800e60a:	6823      	ldr	r3, [r4, #0]
 800e60c:	b103      	cbz	r3, 800e610 <_fstat_r+0x1c>
 800e60e:	602b      	str	r3, [r5, #0]
 800e610:	bd38      	pop	{r3, r4, r5, pc}
 800e612:	bf00      	nop
 800e614:	20000eb0 	.word	0x20000eb0

0800e618 <_isatty_r>:
 800e618:	b538      	push	{r3, r4, r5, lr}
 800e61a:	4c06      	ldr	r4, [pc, #24]	; (800e634 <_isatty_r+0x1c>)
 800e61c:	2300      	movs	r3, #0
 800e61e:	4605      	mov	r5, r0
 800e620:	4608      	mov	r0, r1
 800e622:	6023      	str	r3, [r4, #0]
 800e624:	f7f4 f851 	bl	80026ca <_isatty>
 800e628:	1c43      	adds	r3, r0, #1
 800e62a:	d102      	bne.n	800e632 <_isatty_r+0x1a>
 800e62c:	6823      	ldr	r3, [r4, #0]
 800e62e:	b103      	cbz	r3, 800e632 <_isatty_r+0x1a>
 800e630:	602b      	str	r3, [r5, #0]
 800e632:	bd38      	pop	{r3, r4, r5, pc}
 800e634:	20000eb0 	.word	0x20000eb0

0800e638 <_lseek_r>:
 800e638:	b538      	push	{r3, r4, r5, lr}
 800e63a:	4c07      	ldr	r4, [pc, #28]	; (800e658 <_lseek_r+0x20>)
 800e63c:	4605      	mov	r5, r0
 800e63e:	4608      	mov	r0, r1
 800e640:	4611      	mov	r1, r2
 800e642:	2200      	movs	r2, #0
 800e644:	6022      	str	r2, [r4, #0]
 800e646:	461a      	mov	r2, r3
 800e648:	f7f4 f84a 	bl	80026e0 <_lseek>
 800e64c:	1c43      	adds	r3, r0, #1
 800e64e:	d102      	bne.n	800e656 <_lseek_r+0x1e>
 800e650:	6823      	ldr	r3, [r4, #0]
 800e652:	b103      	cbz	r3, 800e656 <_lseek_r+0x1e>
 800e654:	602b      	str	r3, [r5, #0]
 800e656:	bd38      	pop	{r3, r4, r5, pc}
 800e658:	20000eb0 	.word	0x20000eb0

0800e65c <__ascii_mbtowc>:
 800e65c:	b082      	sub	sp, #8
 800e65e:	b901      	cbnz	r1, 800e662 <__ascii_mbtowc+0x6>
 800e660:	a901      	add	r1, sp, #4
 800e662:	b142      	cbz	r2, 800e676 <__ascii_mbtowc+0x1a>
 800e664:	b14b      	cbz	r3, 800e67a <__ascii_mbtowc+0x1e>
 800e666:	7813      	ldrb	r3, [r2, #0]
 800e668:	600b      	str	r3, [r1, #0]
 800e66a:	7812      	ldrb	r2, [r2, #0]
 800e66c:	1c10      	adds	r0, r2, #0
 800e66e:	bf18      	it	ne
 800e670:	2001      	movne	r0, #1
 800e672:	b002      	add	sp, #8
 800e674:	4770      	bx	lr
 800e676:	4610      	mov	r0, r2
 800e678:	e7fb      	b.n	800e672 <__ascii_mbtowc+0x16>
 800e67a:	f06f 0001 	mvn.w	r0, #1
 800e67e:	e7f8      	b.n	800e672 <__ascii_mbtowc+0x16>

0800e680 <_malloc_usable_size_r>:
 800e680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e684:	1f18      	subs	r0, r3, #4
 800e686:	2b00      	cmp	r3, #0
 800e688:	bfbc      	itt	lt
 800e68a:	580b      	ldrlt	r3, [r1, r0]
 800e68c:	18c0      	addlt	r0, r0, r3
 800e68e:	4770      	bx	lr

0800e690 <_read_r>:
 800e690:	b538      	push	{r3, r4, r5, lr}
 800e692:	4c07      	ldr	r4, [pc, #28]	; (800e6b0 <_read_r+0x20>)
 800e694:	4605      	mov	r5, r0
 800e696:	4608      	mov	r0, r1
 800e698:	4611      	mov	r1, r2
 800e69a:	2200      	movs	r2, #0
 800e69c:	6022      	str	r2, [r4, #0]
 800e69e:	461a      	mov	r2, r3
 800e6a0:	f7f3 ffbe 	bl	8002620 <_read>
 800e6a4:	1c43      	adds	r3, r0, #1
 800e6a6:	d102      	bne.n	800e6ae <_read_r+0x1e>
 800e6a8:	6823      	ldr	r3, [r4, #0]
 800e6aa:	b103      	cbz	r3, 800e6ae <_read_r+0x1e>
 800e6ac:	602b      	str	r3, [r5, #0]
 800e6ae:	bd38      	pop	{r3, r4, r5, pc}
 800e6b0:	20000eb0 	.word	0x20000eb0

0800e6b4 <__ascii_wctomb>:
 800e6b4:	b149      	cbz	r1, 800e6ca <__ascii_wctomb+0x16>
 800e6b6:	2aff      	cmp	r2, #255	; 0xff
 800e6b8:	bf85      	ittet	hi
 800e6ba:	238a      	movhi	r3, #138	; 0x8a
 800e6bc:	6003      	strhi	r3, [r0, #0]
 800e6be:	700a      	strbls	r2, [r1, #0]
 800e6c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e6c4:	bf98      	it	ls
 800e6c6:	2001      	movls	r0, #1
 800e6c8:	4770      	bx	lr
 800e6ca:	4608      	mov	r0, r1
 800e6cc:	4770      	bx	lr
	...

0800e6d0 <_init>:
 800e6d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d2:	bf00      	nop
 800e6d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6d6:	bc08      	pop	{r3}
 800e6d8:	469e      	mov	lr, r3
 800e6da:	4770      	bx	lr

0800e6dc <_fini>:
 800e6dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6de:	bf00      	nop
 800e6e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6e2:	bc08      	pop	{r3}
 800e6e4:	469e      	mov	lr, r3
 800e6e6:	4770      	bx	lr
